
FATFS_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070b8  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08007280  08007280  00008280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007734  08007734  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  08007734  08007734  00008734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800773c  0800773c  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800773c  0800773c  0000873c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007740  08007740  00008740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007744  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020790  20000014  08007758  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200207a4  08007758  000097a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d894  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002147  00000000  00000000  000168d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00018a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bb  00000000  00000000  000196e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fa7  00000000  00000000  0001a09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b41  00000000  00000000  0001d042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebff7  00000000  00000000  0002db83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119b7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034c8  00000000  00000000  00119bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0011d088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007268 	.word	0x08007268

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	08007268 	.word	0x08007268

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <SELECT>:
 * -------- STATIC FUNCTION --------*
 * ---------------------------------*/

/* SPI Chip Select */
static void SELECT(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000502:	4802      	ldr	r0, [pc, #8]	@ (800050c <SELECT+0x14>)
 8000504:	f001 faa8 	bl	8001a58 <HAL_GPIO_WritePin>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40020c00 	.word	0x40020c00

08000510 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800051a:	4802      	ldr	r0, [pc, #8]	@ (8000524 <DESELECT+0x14>)
 800051c:	f001 fa9c 	bl	8001a58 <HAL_GPIO_WritePin>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40020c00 	.word	0x40020c00

08000528 <SPI_TxByte>:

/* SPI transmit a byte */
static void
SPI_TxByte (uint8_t data, uint32_t timeout)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
  while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 8000534:	bf00      	nop
 8000536:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <SPI_TxByte+0x30>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	f003 0302 	and.w	r3, r3, #2
 8000540:	2b02      	cmp	r3, #2
 8000542:	d1f8      	bne.n	8000536 <SPI_TxByte+0xe>
    ;
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, timeout);
 8000544:	1df9      	adds	r1, r7, #7
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	2201      	movs	r2, #1
 800054a:	4803      	ldr	r0, [pc, #12]	@ (8000558 <SPI_TxByte+0x30>)
 800054c:	f002 ff47 	bl	80033de <HAL_SPI_Transmit>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	200000c8 	.word	0x200000c8

0800055c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void
SPI_TxBuffer (uint8_t *buffer, uint16_t len, uint32_t timeout)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	460b      	mov	r3, r1
 8000566:	607a      	str	r2, [r7, #4]
 8000568:	817b      	strh	r3, [r7, #10]
  while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 800056a:	bf00      	nop
 800056c:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <SPI_TxBuffer+0x34>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	2b02      	cmp	r3, #2
 8000578:	d1f8      	bne.n	800056c <SPI_TxBuffer+0x10>
    ;
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, timeout);
 800057a:	897a      	ldrh	r2, [r7, #10]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	68f9      	ldr	r1, [r7, #12]
 8000580:	4803      	ldr	r0, [pc, #12]	@ (8000590 <SPI_TxBuffer+0x34>)
 8000582:	f002 ff2c 	bl	80033de <HAL_SPI_Transmit>
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200000c8 	.word	0x200000c8

08000594 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t
SPI_RxByte (uint32_t timeout)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af02      	add	r7, sp, #8
 800059a:	6078      	str	r0, [r7, #4]
  uint8_t dummy, data;
  dummy = 0xFF;
 800059c:	23ff      	movs	r3, #255	@ 0xff
 800059e:	73fb      	strb	r3, [r7, #15]

  while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 80005a0:	bf00      	nop
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <SPI_RxByte+0x3c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	f003 0302 	and.w	r3, r3, #2
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d1f8      	bne.n	80005a2 <SPI_RxByte+0xe>
    ;
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, timeout);
 80005b0:	f107 020e 	add.w	r2, r7, #14
 80005b4:	f107 010f 	add.w	r1, r7, #15
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2301      	movs	r3, #1
 80005be:	4804      	ldr	r0, [pc, #16]	@ (80005d0 <SPI_RxByte+0x3c>)
 80005c0:	f003 f882 	bl	80036c8 <HAL_SPI_TransmitReceive>

  return data;
 80005c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000c8 	.word	0x200000c8

080005d4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void
SPI_RxBytePtr (uint8_t *buff, uint32_t timeout)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  *buff = SPI_RxByte(timeout);
 80005de:	6838      	ldr	r0, [r7, #0]
 80005e0:	f7ff ffd8 	bl	8000594 <SPI_RxByte>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	701a      	strb	r2, [r3, #0]
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <SD_ReadyWait>:

/* SD Ready */
/* wait SD ready */
static uint8_t
SD_ReadyWait (void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80005fa:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <SD_ReadyWait+0x38>)
 80005fc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000600:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do
  {
    res = SPI_RxByte(Timer2);
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <SD_ReadyWait+0x38>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	b29b      	uxth	r3, r3
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffc3 	bl	8000594 <SPI_RxByte>
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2bff      	cmp	r3, #255	@ 0xff
 8000616:	d004      	beq.n	8000622 <SD_ReadyWait+0x2e>
 8000618:	4b04      	ldr	r3, [pc, #16]	@ (800062c <SD_ReadyWait+0x38>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	b29b      	uxth	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1ef      	bne.n	8000602 <SD_ReadyWait+0xe>

  return res;
 8000622:	79fb      	ldrb	r3, [r7, #7]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000003e 	.word	0x2000003e

08000630 <SD_PowerOn>:

/* power on */
static void
SD_PowerOn (void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
  uint8_t  args[6];
  uint32_t cnt = 0x1FFF;
 8000636:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800063a:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 800063c:	f7ff ff68 	bl	8000510 <DESELECT>
  for (int i = 0; i < 10; i++)
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	e007      	b.n	8000656 <SD_PowerOn+0x26>
  {
    SPI_TxByte(0xFF, 1000);
 8000646:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800064a:	20ff      	movs	r0, #255	@ 0xff
 800064c:	f7ff ff6c 	bl	8000528 <SPI_TxByte>
  for (int i = 0; i < 10; i++)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	3301      	adds	r3, #1
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	2b09      	cmp	r3, #9
 800065a:	ddf4      	ble.n	8000646 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 800065c:	f7ff ff4c 	bl	80004f8 <SELECT>

  /* make idle state */
  args[0] = CMD0; /* CMD0:GO_IDLE_STATE */
 8000660:	2300      	movs	r3, #0
 8000662:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95; /* CRC */
 8000674:	2395      	movs	r3, #149	@ 0x95
 8000676:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args), 1000);
 8000678:	463b      	mov	r3, r7
 800067a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800067e:	2106      	movs	r1, #6
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff6b 	bl	800055c <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte(1000) != 0x01) && cnt)
 8000686:	e002      	b.n	800068e <SD_PowerOn+0x5e>
  {
    cnt--;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3b01      	subs	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte(1000) != 0x01) && cnt)
 800068e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000692:	f7ff ff7f 	bl	8000594 <SPI_RxByte>
 8000696:	4603      	mov	r3, r0
 8000698:	2b01      	cmp	r3, #1
 800069a:	d002      	beq.n	80006a2 <SD_PowerOn+0x72>
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1f2      	bne.n	8000688 <SD_PowerOn+0x58>
  }

  DESELECT();
 80006a2:	f7ff ff35 	bl	8000510 <DESELECT>
  SPI_TxByte(0XFF, 1000);
 80006a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006aa:	20ff      	movs	r0, #255	@ 0xff
 80006ac:	f7ff ff3c 	bl	8000528 <SPI_TxByte>

  PowerFlag = 1;
 80006b0:	4b03      	ldr	r3, [pc, #12]	@ (80006c0 <SD_PowerOn+0x90>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000040 	.word	0x20000040

080006c4 <SD_PowerOff>:

/* power off */
static void
SD_PowerOff (void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80006c8:	4b03      	ldr	r3, [pc, #12]	@ (80006d8 <SD_PowerOff+0x14>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	20000040 	.word	0x20000040

080006dc <SD_RxDataBlock>:
}

/* receive data block */
static bool
SD_RxDataBlock (uint32_t *buff, uint32_t len, uint32_t timeout)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80006e8:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <SD_RxDataBlock+0x6c>)
 80006ea:	22c8      	movs	r2, #200	@ 0xc8
 80006ec:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do
  {
    token = SPI_RxByte(1000);
 80006ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006f2:	f7ff ff4f 	bl	8000594 <SPI_RxByte>
 80006f6:	4603      	mov	r3, r0
 80006f8:	75fb      	strb	r3, [r7, #23]
  } while ((token == 0xFF) && Timer1);
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
 80006fc:	2bff      	cmp	r3, #255	@ 0xff
 80006fe:	d104      	bne.n	800070a <SD_RxDataBlock+0x2e>
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <SD_RxDataBlock+0x6c>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	b29b      	uxth	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1f1      	bne.n	80006ee <SD_RxDataBlock+0x12>

  /* invalid response */
  if (token != 0xFE)
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	2bfe      	cmp	r3, #254	@ 0xfe
 800070e:	d001      	beq.n	8000714 <SD_RxDataBlock+0x38>
  {
    return FALSE;
 8000710:	2300      	movs	r3, #0
 8000712:	e015      	b.n	8000740 <SD_RxDataBlock+0x64>
  }

  /* receive data */
  do
  {
    SPI_RxBytePtr((uint8_t *)buff++, 1000);
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	1d1a      	adds	r2, r3, #4
 8000718:	60fa      	str	r2, [r7, #12]
 800071a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff58 	bl	80005d4 <SPI_RxBytePtr>
  } while (len--);
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	1e5a      	subs	r2, r3, #1
 8000728:	60ba      	str	r2, [r7, #8]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f2      	bne.n	8000714 <SD_RxDataBlock+0x38>

  /* discard CRC */
  SPI_RxByte(1000);
 800072e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000732:	f7ff ff2f 	bl	8000594 <SPI_RxByte>
  SPI_RxByte(1000);
 8000736:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800073a:	f7ff ff2b 	bl	8000594 <SPI_RxByte>

  return TRUE;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000003c 	.word	0x2000003c

0800074c <SD_TxDataBlock>:

/* transmit data block */
static bool
SD_TxDataBlock (uint8_t *buff, BYTE token, uint32_t timeout)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	460b      	mov	r3, r1
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	72fb      	strb	r3, [r7, #11]
  uint8_t resp;
  uint8_t i = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	75bb      	strb	r3, [r7, #22]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF)
 800075e:	f7ff ff49 	bl	80005f4 <SD_ReadyWait>
 8000762:	4603      	mov	r3, r0
 8000764:	2bff      	cmp	r3, #255	@ 0xff
 8000766:	d001      	beq.n	800076c <SD_TxDataBlock+0x20>
  {
    return FALSE;
 8000768:	2300      	movs	r3, #0
 800076a:	e035      	b.n	80007d8 <SD_TxDataBlock+0x8c>
  }

  /* transmit token */
  SPI_TxByte(token, timeout);
 800076c:	7afb      	ldrb	r3, [r7, #11]
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fed9 	bl	8000528 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000776:	7afb      	ldrb	r3, [r7, #11]
 8000778:	2bfd      	cmp	r3, #253	@ 0xfd
 800077a:	d025      	beq.n	80007c8 <SD_TxDataBlock+0x7c>
  {
    SPI_TxBuffer((uint8_t *)buff, 512, timeout);
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff feea 	bl	800055c <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte(timeout);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff03 	bl	8000594 <SPI_RxByte>
    SPI_RxByte(timeout);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ff00 	bl	8000594 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8000794:	e00c      	b.n	80007b0 <SD_TxDataBlock+0x64>
    {
      resp = SPI_RxByte(timeout);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff fefc 	bl	8000594 <SPI_RxByte>
 800079c:	4603      	mov	r3, r0
 800079e:	75fb      	strb	r3, [r7, #23]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05)
 80007a0:	7dfb      	ldrb	r3, [r7, #23]
 80007a2:	f003 031f 	and.w	r3, r3, #31
 80007a6:	2b05      	cmp	r3, #5
 80007a8:	d006      	beq.n	80007b8 <SD_TxDataBlock+0x6c>
      {
        break;
      }
      i++;
 80007aa:	7dbb      	ldrb	r3, [r7, #22]
 80007ac:	3301      	adds	r3, #1
 80007ae:	75bb      	strb	r3, [r7, #22]
    while (i <= 64)
 80007b0:	7dbb      	ldrb	r3, [r7, #22]
 80007b2:	2b40      	cmp	r3, #64	@ 0x40
 80007b4:	d9ef      	bls.n	8000796 <SD_TxDataBlock+0x4a>
 80007b6:	e000      	b.n	80007ba <SD_TxDataBlock+0x6e>
        break;
 80007b8:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte(timeout) == 0)
 80007ba:	bf00      	nop
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff fee9 	bl	8000594 <SPI_RxByte>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0f9      	beq.n	80007bc <SD_TxDataBlock+0x70>
      ;
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05)
 80007c8:	7dfb      	ldrb	r3, [r7, #23]
 80007ca:	f003 031f 	and.w	r3, r3, #31
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	d101      	bne.n	80007d6 <SD_TxDataBlock+0x8a>
  {
    return TRUE;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e000      	b.n	80007d8 <SD_TxDataBlock+0x8c>
  }

  return FALSE;
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <SD_SendCmd>:

/* transmit command */
static BYTE
SD_SendCmd (BYTE cmd, uint32_t arg, uint32_t timeout)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	73fb      	strb	r3, [r7, #15]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF)
 80007ee:	f7ff ff01 	bl	80005f4 <SD_ReadyWait>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2bff      	cmp	r3, #255	@ 0xff
 80007f6:	d001      	beq.n	80007fc <SD_SendCmd+0x1c>
  {
    return 0xFF;
 80007f8:	23ff      	movs	r3, #255	@ 0xff
 80007fa:	e04a      	b.n	8000892 <SD_SendCmd+0xb2>
  }

  /* transmit command */
  SPI_TxByte(cmd, timeout);                  /* Command */
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe91 	bl	8000528 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24), timeout); /* Argument[31..24] */
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	0e1b      	lsrs	r3, r3, #24
 800080a:	b2db      	uxtb	r3, r3
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fe8a 	bl	8000528 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16), timeout); /* Argument[23..16] */
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	0c1b      	lsrs	r3, r3, #16
 8000818:	b2db      	uxtb	r3, r3
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fe83 	bl	8000528 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8), timeout);  /* Argument[15..8] */
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	b2db      	uxtb	r3, r3
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fe7c 	bl	8000528 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg, timeout);         /* Argument[7..0] */
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fe76 	bl	8000528 <SPI_TxByte>

  /* prepare CRC */
  if (cmd == CMD0)
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d102      	bne.n	8000848 <SD_SendCmd+0x68>
  {
    crc = 0x95; /* CRC for CMD0(0) */
 8000842:	2395      	movs	r3, #149	@ 0x95
 8000844:	75fb      	strb	r3, [r7, #23]
 8000846:	e007      	b.n	8000858 <SD_SendCmd+0x78>
  }
  else if (cmd == CMD8)
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b08      	cmp	r3, #8
 800084c:	d102      	bne.n	8000854 <SD_SendCmd+0x74>
  {
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800084e:	2387      	movs	r3, #135	@ 0x87
 8000850:	75fb      	strb	r3, [r7, #23]
 8000852:	e001      	b.n	8000858 <SD_SendCmd+0x78>
  }
  else
  {
    crc = 1;
 8000854:	2301      	movs	r3, #1
 8000856:	75fb      	strb	r3, [r7, #23]
  }

  /* transmit CRC */
  SPI_TxByte(crc, timeout);
 8000858:	7dfb      	ldrb	r3, [r7, #23]
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe63 	bl	8000528 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12)
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	2b0c      	cmp	r3, #12
 8000866:	d102      	bne.n	800086e <SD_SendCmd+0x8e>
  {
    SPI_RxByte(timeout);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff fe93 	bl	8000594 <SPI_RxByte>
  }

  /* receive response */
  uint8_t n = 10;
 800086e:	230a      	movs	r3, #10
 8000870:	75bb      	strb	r3, [r7, #22]
  do
  {
    res = SPI_RxByte(timeout);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff fe8e 	bl	8000594 <SPI_RxByte>
 8000878:	4603      	mov	r3, r0
 800087a:	757b      	strb	r3, [r7, #21]
  } while ((res & 0x80) && --n);
 800087c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000880:	2b00      	cmp	r3, #0
 8000882:	da05      	bge.n	8000890 <SD_SendCmd+0xb0>
 8000884:	7dbb      	ldrb	r3, [r7, #22]
 8000886:	3b01      	subs	r3, #1
 8000888:	75bb      	strb	r3, [r7, #22]
 800088a:	7dbb      	ldrb	r3, [r7, #22]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1f0      	bne.n	8000872 <SD_SendCmd+0x92>

  return res;
 8000890:	7d7b      	ldrb	r3, [r7, #21]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <BSP_SD_SPI_Init>:
/* ---------------------------------*
 * -------- GLOBAL FUNCTION --------*
 * ---------------------------------*/

uint8_t BSP_SD_SPI_Init(void)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b089      	sub	sp, #36	@ 0x24
 80008a0:	af00      	add	r7, sp, #0
	uint8_t n, type, ocr[4];

	/* SD Power On */
	SD_PowerOn();
 80008a2:	f7ff fec5 	bl	8000630 <SD_PowerOn>
	/* SPI Chip Select */
	SELECT();
 80008a6:	f7ff fe27 	bl	80004f8 <SELECT>
	type = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	77bb      	strb	r3, [r7, #30]

	/* Idle State Entry */
	if (SD_SendCmd(CMD0, 0, 1000) == 1)
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	2100      	movs	r1, #0
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff ff93 	bl	80007e0 <SD_SendCmd>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	f040 80be 	bne.w	8000a3e <BSP_SD_SPI_Init+0x1a2>
	{
	/* Set the timer for 1 second */
	Timer1 = 100;
 80008c2:	4b91      	ldr	r3, [pc, #580]	@ (8000b08 <BSP_SD_SPI_Init+0x26c>)
 80008c4:	2264      	movs	r2, #100	@ 0x64
 80008c6:	801a      	strh	r2, [r3, #0]

	/* SD Checking Interface Behavior Conditions */
	if (SD_SendCmd(CMD8, 0x1AA, 1000) == 1)
 80008c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008cc:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80008d0:	2008      	movs	r0, #8
 80008d2:	f7ff ff85 	bl	80007e0 <SD_SendCmd>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d163      	bne.n	80009a4 <BSP_SD_SPI_Init+0x108>
	{
	  /* SDC Ver2+ */
	  for (n = 0; n < 4; n++)
 80008dc:	2300      	movs	r3, #0
 80008de:	77fb      	strb	r3, [r7, #31]
 80008e0:	e00e      	b.n	8000900 <BSP_SD_SPI_Init+0x64>
	  {
		ocr[n] = SPI_RxByte(1000);
 80008e2:	7ffc      	ldrb	r4, [r7, #31]
 80008e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008e8:	f7ff fe54 	bl	8000594 <SPI_RxByte>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	f104 0320 	add.w	r3, r4, #32
 80008f4:	443b      	add	r3, r7
 80008f6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  for (n = 0; n < 4; n++)
 80008fa:	7ffb      	ldrb	r3, [r7, #31]
 80008fc:	3301      	adds	r3, #1
 80008fe:	77fb      	strb	r3, [r7, #31]
 8000900:	7ffb      	ldrb	r3, [r7, #31]
 8000902:	2b03      	cmp	r3, #3
 8000904:	d9ed      	bls.n	80008e2 <BSP_SD_SPI_Init+0x46>
	  }
	  if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000906:	7dbb      	ldrb	r3, [r7, #22]
 8000908:	2b01      	cmp	r3, #1
 800090a:	f040 8098 	bne.w	8000a3e <BSP_SD_SPI_Init+0x1a2>
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	2baa      	cmp	r3, #170	@ 0xaa
 8000912:	f040 8094 	bne.w	8000a3e <BSP_SD_SPI_Init+0x1a2>
	  {
		/* 2.7-3.6V */
		do {
		  if (SD_SendCmd(CMD55, 0, 1000) <= 1 && SD_SendCmd(CMD41, 1UL << 30, 1000) == 0)
 8000916:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800091a:	2100      	movs	r1, #0
 800091c:	2037      	movs	r0, #55	@ 0x37
 800091e:	f7ff ff5f 	bl	80007e0 <SD_SendCmd>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	d809      	bhi.n	800093c <BSP_SD_SPI_Init+0xa0>
 8000928:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800092c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000930:	2069      	movs	r0, #105	@ 0x69
 8000932:	f7ff ff55 	bl	80007e0 <SD_SendCmd>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d005      	beq.n	8000948 <BSP_SD_SPI_Init+0xac>
			break; /* ACMD41 with HCS bit */
		} while (Timer1);
 800093c:	4b72      	ldr	r3, [pc, #456]	@ (8000b08 <BSP_SD_SPI_Init+0x26c>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	b29b      	uxth	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1e7      	bne.n	8000916 <BSP_SD_SPI_Init+0x7a>
 8000946:	e000      	b.n	800094a <BSP_SD_SPI_Init+0xae>
			break; /* ACMD41 with HCS bit */
 8000948:	bf00      	nop

		if (Timer1 && SD_SendCmd(CMD58, 0, 1000) == 0)
 800094a:	4b6f      	ldr	r3, [pc, #444]	@ (8000b08 <BSP_SD_SPI_Init+0x26c>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	b29b      	uxth	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d074      	beq.n	8000a3e <BSP_SD_SPI_Init+0x1a2>
 8000954:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000958:	2100      	movs	r1, #0
 800095a:	203a      	movs	r0, #58	@ 0x3a
 800095c:	f7ff ff40 	bl	80007e0 <SD_SendCmd>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d16b      	bne.n	8000a3e <BSP_SD_SPI_Init+0x1a2>
		{
		  /* Check CCS bit */
		  for (n = 0; n < 4; n++)
 8000966:	2300      	movs	r3, #0
 8000968:	77fb      	strb	r3, [r7, #31]
 800096a:	e00e      	b.n	800098a <BSP_SD_SPI_Init+0xee>
		  {
			ocr[n] = SPI_RxByte(1000);
 800096c:	7ffc      	ldrb	r4, [r7, #31]
 800096e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000972:	f7ff fe0f 	bl	8000594 <SPI_RxByte>
 8000976:	4603      	mov	r3, r0
 8000978:	461a      	mov	r2, r3
 800097a:	f104 0320 	add.w	r3, r4, #32
 800097e:	443b      	add	r3, r7
 8000980:	f803 2c0c 	strb.w	r2, [r3, #-12]
		  for (n = 0; n < 4; n++)
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	3301      	adds	r3, #1
 8000988:	77fb      	strb	r3, [r7, #31]
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d9ed      	bls.n	800096c <BSP_SD_SPI_Init+0xd0>
		  }
		  type = (ocr[0] & 0x40) ? 6 : 2;
 8000990:	7d3b      	ldrb	r3, [r7, #20]
 8000992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <BSP_SD_SPI_Init+0x102>
 800099a:	2306      	movs	r3, #6
 800099c:	e000      	b.n	80009a0 <BSP_SD_SPI_Init+0x104>
 800099e:	2302      	movs	r3, #2
 80009a0:	77bb      	strb	r3, [r7, #30]
 80009a2:	e04c      	b.n	8000a3e <BSP_SD_SPI_Init+0x1a2>
	  }
	}
	else
	{
	  /* SDC Ver1 or MMC */
	  type = (SD_SendCmd(CMD55, 0, 1000) <= 1 && SD_SendCmd(CMD41, 0, 1000) <= 1) ? 2 : 1; /* SDC : MMC */
 80009a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009a8:	2100      	movs	r1, #0
 80009aa:	2037      	movs	r0, #55	@ 0x37
 80009ac:	f7ff ff18 	bl	80007e0 <SD_SendCmd>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d80a      	bhi.n	80009cc <BSP_SD_SPI_Init+0x130>
 80009b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009ba:	2100      	movs	r1, #0
 80009bc:	2069      	movs	r0, #105	@ 0x69
 80009be:	f7ff ff0f 	bl	80007e0 <SD_SendCmd>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d801      	bhi.n	80009cc <BSP_SD_SPI_Init+0x130>
 80009c8:	2302      	movs	r3, #2
 80009ca:	e000      	b.n	80009ce <BSP_SD_SPI_Init+0x132>
 80009cc:	2301      	movs	r3, #1
 80009ce:	77bb      	strb	r3, [r7, #30]
	  do {
		if (type == 2)
 80009d0:	7fbb      	ldrb	r3, [r7, #30]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d112      	bne.n	80009fc <BSP_SD_SPI_Init+0x160>
		{
		  if (SD_SendCmd(CMD55, 0, 1000) <= 1 && SD_SendCmd(CMD41, 0, 1000) == 0)
 80009d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009da:	2100      	movs	r1, #0
 80009dc:	2037      	movs	r0, #55	@ 0x37
 80009de:	f7ff feff 	bl	80007e0 <SD_SendCmd>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d812      	bhi.n	8000a0e <BSP_SD_SPI_Init+0x172>
 80009e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009ec:	2100      	movs	r1, #0
 80009ee:	2069      	movs	r0, #105	@ 0x69
 80009f0:	f7ff fef6 	bl	80007e0 <SD_SendCmd>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d109      	bne.n	8000a0e <BSP_SD_SPI_Init+0x172>
			break; /* ACMD41 */
 80009fa:	e00f      	b.n	8000a1c <BSP_SD_SPI_Init+0x180>
		}
		else
		{
		  if (SD_SendCmd(CMD1, 0,  1000) == 0)
 80009fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a00:	2100      	movs	r1, #0
 8000a02:	2001      	movs	r0, #1
 8000a04:	f7ff feec 	bl	80007e0 <SD_SendCmd>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d005      	beq.n	8000a1a <BSP_SD_SPI_Init+0x17e>
			break; /* CMD1 */
		}
	  } while (Timer1);
 8000a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b08 <BSP_SD_SPI_Init+0x26c>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1db      	bne.n	80009d0 <BSP_SD_SPI_Init+0x134>
 8000a18:	e000      	b.n	8000a1c <BSP_SD_SPI_Init+0x180>
			break; /* CMD1 */
 8000a1a:	bf00      	nop

	  if (!Timer1 || SD_SendCmd(CMD16, 512, 1000) != 0)
 8000a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b08 <BSP_SD_SPI_Init+0x26c>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d009      	beq.n	8000a3a <BSP_SD_SPI_Init+0x19e>
 8000a26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a2e:	2010      	movs	r0, #16
 8000a30:	f7ff fed6 	bl	80007e0 <SD_SendCmd>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <BSP_SD_SPI_Init+0x1a2>
	  {
		/* Select Block Length */
		type = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	77bb      	strb	r3, [r7, #30]
	  }
	}
	}

	cardInfo.CardType = type;
 8000a3e:	7fbb      	ldrb	r3, [r7, #30]
 8000a40:	4a32      	ldr	r2, [pc, #200]	@ (8000b0c <BSP_SD_SPI_Init+0x270>)
 8000a42:	6013      	str	r3, [r2, #0]

	DESELECT();
 8000a44:	f7ff fd64 	bl	8000510 <DESELECT>

	SPI_RxByte(1000); /* Idle State Transitions (Release DO) */
 8000a48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a4c:	f7ff fda2 	bl	8000594 <SPI_RxByte>

	if (type)
 8000a50:	7fbb      	ldrb	r3, [r7, #30]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d051      	beq.n	8000afa <BSP_SD_SPI_Init+0x25e>
	{
		// Get information
	    uint8_t n, csd[16];
	    uint32_t csize;
		if ((SD_SendCmd(CMD9, 0, 1000) == 0) && SD_RxDataBlock((uint32_t *)csd, 16, 1000))
 8000a56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2009      	movs	r0, #9
 8000a5e:	f7ff febf 	bl	80007e0 <SD_SendCmd>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d146      	bne.n	8000af6 <BSP_SD_SPI_Init+0x25a>
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a6e:	2110      	movs	r1, #16
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fe33 	bl	80006dc <SD_RxDataBlock>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d03c      	beq.n	8000af6 <BSP_SD_SPI_Init+0x25a>
		{
			if ((csd[0] >> 6) == 1)
 8000a7c:	793b      	ldrb	r3, [r7, #4]
 8000a7e:	099b      	lsrs	r3, r3, #6
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d10b      	bne.n	8000a9e <BSP_SD_SPI_Init+0x202>
			{
				/* SDC V2 */
				csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	7b3b      	ldrb	r3, [r7, #12]
 8000a8c:	021b      	lsls	r3, r3, #8
 8000a8e:	4413      	add	r3, r2
 8000a90:	3301      	adds	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
				cardInfo.LogBlockNbr = csize << 10;
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	029b      	lsls	r3, r3, #10
 8000a98:	4a1c      	ldr	r2, [pc, #112]	@ (8000b0c <BSP_SD_SPI_Init+0x270>)
 8000a9a:	6053      	str	r3, [r2, #4]
 8000a9c:	e027      	b.n	8000aee <BSP_SD_SPI_Init+0x252>
			}
			else
			{
				/* MMC or SDC V1 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000a9e:	7a7b      	ldrb	r3, [r7, #9]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	7bbb      	ldrb	r3, [r7, #14]
 8000aa8:	09db      	lsrs	r3, r3, #7
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4413      	add	r3, r2
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	7b7b      	ldrb	r3, [r7, #13]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f003 0306 	and.w	r3, r3, #6
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4413      	add	r3, r2
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	777b      	strb	r3, [r7, #29]
				csize = (csd[8] >> 6) + (csd[7] << 2) + ((csd[6] & 3) << 10) + 1;
 8000ac4:	7b3b      	ldrb	r3, [r7, #12]
 8000ac6:	099b      	lsrs	r3, r3, #6
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	441a      	add	r2, r3
 8000ad2:	7abb      	ldrb	r3, [r7, #10]
 8000ad4:	029b      	lsls	r3, r3, #10
 8000ad6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ada:	4413      	add	r3, r2
 8000adc:	3301      	adds	r3, #1
 8000ade:	61bb      	str	r3, [r7, #24]
				cardInfo.LogBlockNbr = csize << (n - 9);
 8000ae0:	7f7b      	ldrb	r3, [r7, #29]
 8000ae2:	3b09      	subs	r3, #9
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	4a08      	ldr	r2, [pc, #32]	@ (8000b0c <BSP_SD_SPI_Init+0x270>)
 8000aec:	6053      	str	r3, [r2, #4]
			}
			cardInfo.LogBlockSize = 512;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <BSP_SD_SPI_Init+0x270>)
 8000af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000af4:	609a      	str	r2, [r3, #8]
		}
		return MSD_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e002      	b.n	8000b00 <BSP_SD_SPI_Init+0x264>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000afa:	f7ff fde3 	bl	80006c4 <SD_PowerOff>
		return MSD_ERROR;
 8000afe:	2301      	movs	r3, #1
	}
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3724      	adds	r7, #36	@ 0x24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	2000003c 	.word	0x2000003c
 8000b0c:	20000030 	.word	0x20000030

08000b10 <BSP_SD_SPI_ReadBlocks>:

uint8_t BSP_SD_SPI_ReadBlocks(uint32_t *pData,
                               uint32_t  ReadAddr,
                               uint32_t  NumOfBlocks,
                               uint32_t  Timeout)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	603b      	str	r3, [r7, #0]

	  SELECT();
 8000b1e:	f7ff fceb 	bl	80004f8 <SELECT>

	  if (NumOfBlocks == 1)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d113      	bne.n	8000b50 <BSP_SD_SPI_ReadBlocks+0x40>
	  {
	    /* 싱글 블록 읽기 */
	    if ((SD_SendCmd(CMD17, ReadAddr, Timeout) == 0) && SD_RxDataBlock(pData, 512, Timeout))
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	68b9      	ldr	r1, [r7, #8]
 8000b2c:	2011      	movs	r0, #17
 8000b2e:	f7ff fe57 	bl	80007e0 <SD_SendCmd>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d130      	bne.n	8000b9a <BSP_SD_SPI_ReadBlocks+0x8a>
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff fdcc 	bl	80006dc <SD_RxDataBlock>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d027      	beq.n	8000b9a <BSP_SD_SPI_ReadBlocks+0x8a>
	    	NumOfBlocks = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	e024      	b.n	8000b9a <BSP_SD_SPI_ReadBlocks+0x8a>
	  }
	  else
	  {
	    /* 다중 블록 읽기 */
	    if (SD_SendCmd(CMD18, ReadAddr, Timeout) == 0)
 8000b50:	683a      	ldr	r2, [r7, #0]
 8000b52:	68b9      	ldr	r1, [r7, #8]
 8000b54:	2012      	movs	r0, #18
 8000b56:	f7ff fe43 	bl	80007e0 <SD_SendCmd>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d11c      	bne.n	8000b9a <BSP_SD_SPI_ReadBlocks+0x8a>
	    {
	      do {
	        if (!SD_RxDataBlock(pData, 512, Timeout))
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f7ff fdb8 	bl	80006dc <SD_RxDataBlock>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	f083 0301 	eor.w	r3, r3, #1
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10a      	bne.n	8000b8e <BSP_SD_SPI_ReadBlocks+0x7e>
	          break;

	        pData += 512;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000b7e:	60fb      	str	r3, [r7, #12]
	      } while (--NumOfBlocks);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1e9      	bne.n	8000b60 <BSP_SD_SPI_ReadBlocks+0x50>
 8000b8c:	e000      	b.n	8000b90 <BSP_SD_SPI_ReadBlocks+0x80>
	          break;
 8000b8e:	bf00      	nop

	      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
	      SD_SendCmd(CMD12, 0, Timeout);
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	2100      	movs	r1, #0
 8000b94:	200c      	movs	r0, #12
 8000b96:	f7ff fe23 	bl	80007e0 <SD_SendCmd>
	    }
	  }

	  DESELECT();
 8000b9a:	f7ff fcb9 	bl	8000510 <DESELECT>
	  SPI_RxByte(Timeout); /* Idle 상태(Release DO) */
 8000b9e:	6838      	ldr	r0, [r7, #0]
 8000ba0:	f7ff fcf8 	bl	8000594 <SPI_RxByte>

	  return NumOfBlocks ? MSD_ERROR : MSD_OK;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	bf14      	ite	ne
 8000baa:	2301      	movne	r3, #1
 8000bac:	2300      	moveq	r3, #0
 8000bae:	b2db      	uxtb	r3, r3
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <BSP_SD_SPI_WriteBlocks>:

uint8_t BSP_SD_SPI_WriteBlocks(uint32_t *pData,
                                uint32_t  WriteAddr,
                                uint32_t  NumOfBlocks,
                                uint32_t  Timeout)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	603b      	str	r3, [r7, #0]
	if (!(cardInfo.CardType & CT_SD2))
 8000bc6:	4b36      	ldr	r3, [pc, #216]	@ (8000ca0 <BSP_SD_SPI_WriteBlocks+0xe8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d102      	bne.n	8000bd8 <BSP_SD_SPI_WriteBlocks+0x20>
	  {
	    WriteAddr *= 512;
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	025b      	lsls	r3, r3, #9
 8000bd6:	60bb      	str	r3, [r7, #8]
	  }

	  SELECT();
 8000bd8:	f7ff fc8e 	bl	80004f8 <SELECT>

	  if (NumOfBlocks == 1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d112      	bne.n	8000c08 <BSP_SD_SPI_WriteBlocks+0x50>
	  {
	    /* 싱글 블록 쓰기 */
	    if ((SD_SendCmd(CMD24, WriteAddr, Timeout) == 0) && SD_TxDataBlock((uint8_t *)pData, 0xFE, Timeout))
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	2018      	movs	r0, #24
 8000be8:	f7ff fdfa 	bl	80007e0 <SD_SendCmd>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d146      	bne.n	8000c80 <BSP_SD_SPI_WriteBlocks+0xc8>
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	21fe      	movs	r1, #254	@ 0xfe
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f7ff fda8 	bl	800074c <SD_TxDataBlock>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d03e      	beq.n	8000c80 <BSP_SD_SPI_WriteBlocks+0xc8>
	    	NumOfBlocks = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	e03b      	b.n	8000c80 <BSP_SD_SPI_WriteBlocks+0xc8>
	  }
	  else
	  {
		  /* WRITE_MULTIPLE_BLOCK */
	    if (cardInfo.CardType & CT_SD1)
 8000c08:	4b25      	ldr	r3, [pc, #148]	@ (8000ca0 <BSP_SD_SPI_WriteBlocks+0xe8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f003 0302 	and.w	r3, r3, #2
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d009      	beq.n	8000c28 <BSP_SD_SPI_WriteBlocks+0x70>
	    {
	    	SD_SendCmd(CMD55, 0, Timeout);
 8000c14:	683a      	ldr	r2, [r7, #0]
 8000c16:	2100      	movs	r1, #0
 8000c18:	2037      	movs	r0, #55	@ 0x37
 8000c1a:	f7ff fde1 	bl	80007e0 <SD_SendCmd>
	    	SD_SendCmd(CMD23, NumOfBlocks, Timeout); /* ACMD23 */
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	2017      	movs	r0, #23
 8000c24:	f7ff fddc 	bl	80007e0 <SD_SendCmd>
	    }
	    if (SD_SendCmd(CMD25, WriteAddr, Timeout) == 0)
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	68b9      	ldr	r1, [r7, #8]
 8000c2c:	2019      	movs	r0, #25
 8000c2e:	f7ff fdd7 	bl	80007e0 <SD_SendCmd>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d123      	bne.n	8000c80 <BSP_SD_SPI_WriteBlocks+0xc8>
	        {
	          do
	          {
	            if (!SD_TxDataBlock((uint8_t *)pData, 0xFC, Timeout))
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	21fc      	movs	r1, #252	@ 0xfc
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f7ff fd85 	bl	800074c <SD_TxDataBlock>
 8000c42:	4603      	mov	r3, r0
 8000c44:	f083 0301 	eor.w	r3, r3, #1
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10a      	bne.n	8000c64 <BSP_SD_SPI_WriteBlocks+0xac>
	            {
	              break;
	            }
	            pData += 512;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000c54:	60fb      	str	r3, [r7, #12]
	          } while (--NumOfBlocks);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1ea      	bne.n	8000c38 <BSP_SD_SPI_WriteBlocks+0x80>
 8000c62:	e000      	b.n	8000c66 <BSP_SD_SPI_WriteBlocks+0xae>
	              break;
 8000c64:	bf00      	nop

	          /* STOP_TRAN token */
	          if (!SD_TxDataBlock(0, 0xFD, Timeout))
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	21fd      	movs	r1, #253	@ 0xfd
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff fd6e 	bl	800074c <SD_TxDataBlock>
 8000c70:	4603      	mov	r3, r0
 8000c72:	f083 0301 	eor.w	r3, r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <BSP_SD_SPI_WriteBlocks+0xc8>
	          {
	            NumOfBlocks = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	607b      	str	r3, [r7, #4]
	          }
	        }
	      }

	  DESELECT();
 8000c80:	f7ff fc46 	bl	8000510 <DESELECT>
	  SPI_RxByte(1000);
 8000c84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c88:	f7ff fc84 	bl	8000594 <SPI_RxByte>

	  return NumOfBlocks ? MSD_ERROR : MSD_OK;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	bf14      	ite	ne
 8000c92:	2301      	movne	r3, #1
 8000c94:	2300      	moveq	r3, #0
 8000c96:	b2db      	uxtb	r3, r3
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000030 	.word	0x20000030

08000ca4 <BSP_SD_SPI_GetCardInfo>:
 * @param CardInfo Pointer to a `BSP_SD_SPI_CardInfo` structure to be filled
 *                 with the card information.
 */
void
BSP_SD_SPI_GetCardInfo (BSP_SD_SPI_CardInfo *CardInfo)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  CardInfo->CardType     = cardInfo.CardType;
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <BSP_SD_SPI_GetCardInfo+0x2c>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	601a      	str	r2, [r3, #0]
  CardInfo->LogBlockNbr  = cardInfo.LogBlockNbr;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <BSP_SD_SPI_GetCardInfo+0x2c>)
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	605a      	str	r2, [r3, #4]
  CardInfo->LogBlockSize = cardInfo.LogBlockSize;
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <BSP_SD_SPI_GetCardInfo+0x2c>)
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	20000030 	.word	0x20000030

08000cd4 <bufsize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int
bufsize (char *buf)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  int i = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  while (*buf++ != '\0')
 8000ce0:	e002      	b.n	8000ce8 <bufsize+0x14>
  {
    i++;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
  while (*buf++ != '\0')
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1f6      	bne.n	8000ce2 <bufsize+0xe>
  }
  return i;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	memset(buffer, 0xFF, BUFFER_SIZE); // Fill buffer with data
 8000d08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d0c:	21ff      	movs	r1, #255	@ 0xff
 8000d0e:	4821      	ldr	r0, [pc, #132]	@ (8000d94 <main+0x90>)
 8000d10:	f006 fa62 	bl	80071d8 <memset>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d14:	f000 f964 	bl	8000fe0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d18:	f000 fb13 	bl	8001342 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1c:	f000 f84c 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d20:	f000 f916 	bl	8000f50 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000d24:	f000 f8d6 	bl	8000ed4 <MX_SPI2_Init>
  MX_SDMMC1_SD_Init();
 8000d28:	f000 f8ae 	bl	8000e88 <MX_SDMMC1_SD_Init>
//  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
//  {
//    Error_Handler();
//  }

  fr = f_mount(&SDFatFs_main, "", 1);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	491a      	ldr	r1, [pc, #104]	@ (8000d98 <main+0x94>)
 8000d30:	481a      	ldr	r0, [pc, #104]	@ (8000d9c <main+0x98>)
 8000d32:	f005 fd6d 	bl	8006810 <f_mount>
 8000d36:	4603      	mov	r3, r0
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <main+0x9c>)
 8000d3c:	701a      	strb	r2, [r3, #0]
  fr = f_open(&MyFile, "file3.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000d3e:	220a      	movs	r2, #10
 8000d40:	4918      	ldr	r1, [pc, #96]	@ (8000da4 <main+0xa0>)
 8000d42:	4819      	ldr	r0, [pc, #100]	@ (8000da8 <main+0xa4>)
 8000d44:	f005 fdae 	bl	80068a4 <f_open>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <main+0x9c>)
 8000d4e:	701a      	strb	r2, [r3, #0]

  /* Writing text */
  while (bytes_written < total_size)
 8000d50:	e014      	b.n	8000d7c <main+0x78>
  {
    fr = f_write(&MyFile, buffer, bufsize(buffer), &bw);
 8000d52:	4810      	ldr	r0, [pc, #64]	@ (8000d94 <main+0x90>)
 8000d54:	f7ff ffbe 	bl	8000cd4 <bufsize>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <main+0xa8>)
 8000d5e:	490d      	ldr	r1, [pc, #52]	@ (8000d94 <main+0x90>)
 8000d60:	4811      	ldr	r0, [pc, #68]	@ (8000da8 <main+0xa4>)
 8000d62:	f005 ff27 	bl	8006bb4 <f_write>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <main+0x9c>)
 8000d6c:	701a      	strb	r2, [r3, #0]

    bytes_written += bw;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <main+0xac>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <main+0xa8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <main+0xac>)
 8000d7a:	6013      	str	r3, [r2, #0]
  while (bytes_written < total_size)
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <main+0xac>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <main+0xb0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d3e4      	bcc.n	8000d52 <main+0x4e>
  }
  f_close(&MyFile);
 8000d88:	4807      	ldr	r0, [pc, #28]	@ (8000da8 <main+0xa4>)
 8000d8a:	f006 f8fa 	bl	8006f82 <f_close>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d8e:	bf00      	nop
 8000d90:	e7fd      	b.n	8000d8e <main+0x8a>
 8000d92:	bf00      	nop
 8000d94:	2000058c 	.word	0x2000058c
 8000d98:	08007280 	.word	0x08007280
 8000d9c:	2000012c 	.word	0x2000012c
 8000da0:	20000000 	.word	0x20000000
 8000da4:	08007284 	.word	0x08007284
 8000da8:	20000364 	.word	0x20000364
 8000dac:	2002058c 	.word	0x2002058c
 8000db0:	20020590 	.word	0x20020590
 8000db4:	20000004 	.word	0x20000004

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	@ 0x50
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	2230      	movs	r2, #48	@ 0x30
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f006 fa06 	bl	80071d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ddc:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <SystemClock_Config+0xc8>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	4a27      	ldr	r2, [pc, #156]	@ (8000e80 <SystemClock_Config+0xc8>)
 8000de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de8:	4b25      	ldr	r3, [pc, #148]	@ (8000e80 <SystemClock_Config+0xc8>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000df4:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <SystemClock_Config+0xcc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dfc:	4a21      	ldr	r2, [pc, #132]	@ (8000e84 <SystemClock_Config+0xcc>)
 8000dfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <SystemClock_Config+0xcc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e10:	2301      	movs	r3, #1
 8000e12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e14:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e24:	2319      	movs	r3, #25
 8000e26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000e28:	2390      	movs	r3, #144	@ 0x90
 8000e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e30:	2303      	movs	r3, #3
 8000e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	f107 0320 	add.w	r3, r7, #32
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fe27 	bl	8001a8c <HAL_RCC_OscConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e44:	f000 f8f8 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e48:	230f      	movs	r3, #15
 8000e4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2102      	movs	r1, #2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 f8b4 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000e72:	f000 f8e1 	bl	8001038 <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3750      	adds	r7, #80	@ 0x50
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40007000 	.word	0x40007000

08000e88 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_SDMMC1_SD_Init+0x44>)
 8000e8e:	4a10      	ldr	r2, [pc, #64]	@ (8000ed0 <MX_SDMMC1_SD_Init+0x48>)
 8000e90:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <MX_SDMMC1_SD_Init+0x44>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <MX_SDMMC1_SD_Init+0x44>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <MX_SDMMC1_SD_Init+0x44>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <MX_SDMMC1_SD_Init+0x44>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <MX_SDMMC1_SD_Init+0x44>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <MX_SDMMC1_SD_Init+0x44>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_SDMMC1_SD_Init+0x44>)
 8000eb8:	f001 fe2e 	bl	8002b18 <HAL_SD_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8000ec2:	f000 f8b9 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000044 	.word	0x20000044
 8000ed0:	40012c00 	.word	0x40012c00

08000ed4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000eda:	4a1c      	ldr	r2, [pc, #112]	@ (8000f4c <MX_SPI2_Init+0x78>)
 8000edc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000ee0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ee4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000eee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ef2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f06:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000f22:	2207      	movs	r2, #7
 8000f24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000f2e:	2208      	movs	r2, #8
 8000f30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_SPI2_Init+0x74>)
 8000f34:	f002 f9a8 	bl	8003288 <HAL_SPI_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f000 f87b 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000c8 	.word	0x200000c8
 8000f4c:	40003800 	.word	0x40003800

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	4b21      	ldr	r3, [pc, #132]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a20      	ldr	r2, [pc, #128]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a1a      	ldr	r2, [pc, #104]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000fa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_GPIO_Init+0x8c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fce:	bf00      	nop
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ff2:	f000 fb0d 	bl	8001610 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001002:	231f      	movs	r3, #31
 8001004:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001006:	2387      	movs	r3, #135	@ 0x87
 8001008:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800100a:	2300      	movs	r3, #0
 800100c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800100e:	2300      	movs	r3, #0
 8001010:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001012:	2301      	movs	r3, #1
 8001014:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001016:	2301      	movs	r3, #1
 8001018:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001022:	463b      	mov	r3, r7
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fb2b 	bl	8001680 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800102a:	2004      	movs	r0, #4
 800102c:	f000 fb08 	bl	8001640 <HAL_MPU_Enable>

}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <Error_Handler+0x8>

08001044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <HAL_MspInit+0x44>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	4a0e      	ldr	r2, [pc, #56]	@ (8001088 <HAL_MspInit+0x44>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001054:	6413      	str	r3, [r2, #64]	@ 0x40
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <HAL_MspInit+0x44>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <HAL_MspInit+0x44>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	4a08      	ldr	r2, [pc, #32]	@ (8001088 <HAL_MspInit+0x44>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106c:	6453      	str	r3, [r2, #68]	@ 0x44
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_MspInit+0x44>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0ac      	sub	sp, #176	@ 0xb0
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	2284      	movs	r2, #132	@ 0x84
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f006 f893 	bl	80071d8 <memset>
  if(hsd->Instance==SDMMC1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a34      	ldr	r2, [pc, #208]	@ (8001188 <HAL_SD_MspInit+0xfc>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d161      	bne.n	8001180 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80010bc:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 80010c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ce:	f107 0318 	add.w	r3, r7, #24
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 f930 	bl	8002338 <HAL_RCCEx_PeriphCLKConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80010de:	f7ff ffab 	bl	8001038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010e2:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <HAL_SD_MspInit+0x100>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	4a29      	ldr	r2, [pc, #164]	@ (800118c <HAL_SD_MspInit+0x100>)
 80010e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ee:	4b27      	ldr	r3, [pc, #156]	@ (800118c <HAL_SD_MspInit+0x100>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b24      	ldr	r3, [pc, #144]	@ (800118c <HAL_SD_MspInit+0x100>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a23      	ldr	r2, [pc, #140]	@ (800118c <HAL_SD_MspInit+0x100>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <HAL_SD_MspInit+0x100>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <HAL_SD_MspInit+0x100>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a1d      	ldr	r2, [pc, #116]	@ (800118c <HAL_SD_MspInit+0x100>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <HAL_SD_MspInit+0x100>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 800112a:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800112e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001144:	230c      	movs	r3, #12
 8001146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800114e:	4619      	mov	r1, r3
 8001150:	480f      	ldr	r0, [pc, #60]	@ (8001190 <HAL_SD_MspInit+0x104>)
 8001152:	f000 fad5 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001156:	2304      	movs	r3, #4
 8001158:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800116e:	230c      	movs	r3, #12
 8001170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001174:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001178:	4619      	mov	r1, r3
 800117a:	4806      	ldr	r0, [pc, #24]	@ (8001194 <HAL_SD_MspInit+0x108>)
 800117c:	f000 fac0 	bl	8001700 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001180:	bf00      	nop
 8001182:	37b0      	adds	r7, #176	@ 0xb0
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40012c00 	.word	0x40012c00
 800118c:	40023800 	.word	0x40023800
 8001190:	40020800 	.word	0x40020800
 8001194:	40020c00 	.word	0x40020c00

08001198 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a25      	ldr	r2, [pc, #148]	@ (800124c <HAL_SPI_MspInit+0xb4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d144      	bne.n	8001244 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011ba:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <HAL_SPI_MspInit+0xb8>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	4a24      	ldr	r2, [pc, #144]	@ (8001250 <HAL_SPI_MspInit+0xb8>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c6:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <HAL_SPI_MspInit+0xb8>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80011d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <HAL_SPI_MspInit+0xb8>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001250 <HAL_SPI_MspInit+0xb8>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <HAL_SPI_MspInit+0xb8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_SPI_MspInit+0xb8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <HAL_SPI_MspInit+0xb8>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_SPI_MspInit+0xb8>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001202:	2303      	movs	r3, #3
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001212:	2305      	movs	r3, #5
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	480d      	ldr	r0, [pc, #52]	@ (8001254 <HAL_SPI_MspInit+0xbc>)
 800121e:	f000 fa6f 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001222:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001234:	2305      	movs	r3, #5
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	@ (8001258 <HAL_SPI_MspInit+0xc0>)
 8001240:	f000 fa5e 	bl	8001700 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	@ 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40003800 	.word	0x40003800
 8001250:	40023800 	.word	0x40023800
 8001254:	40022000 	.word	0x40022000
 8001258:	40020400 	.word	0x40020400

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <NMI_Handler+0x4>

08001264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <MemManage_Handler+0x4>

08001274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <UsageFault_Handler+0x4>

08001284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f882 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  time_count++;
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <SysTick_Handler+0x18>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a02      	ldr	r2, [pc, #8]	@ (80012c8 <SysTick_Handler+0x18>)
 80012c0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20020594 	.word	0x20020594

080012cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	@ (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001328 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012f4:	f7ff ffea 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012fa:	490d      	ldr	r1, [pc, #52]	@ (8001330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001310:	4c0a      	ldr	r4, [pc, #40]	@ (800133c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800131e:	f005 ff71 	bl	8007204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff fcef 	bl	8000d04 <main>
  bx  lr    
 8001326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800132c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001330:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001334:	08007744 	.word	0x08007744
  ldr r2, =_sbss
 8001338:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800133c:	200207a4 	.word	0x200207a4

08001340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC_IRQHandler>

08001342 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001346:	2003      	movs	r0, #3
 8001348:	f000 f92e 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134c:	200f      	movs	r0, #15
 800134e:	f000 f805 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001352:	f7ff fe77 	bl	8001044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <HAL_InitTick+0x54>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <HAL_InitTick+0x58>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f93b 	bl	80015f6 <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00e      	b.n	80013a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d80a      	bhi.n	80013a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 f911 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4a06      	ldr	r2, [pc, #24]	@ (80013b8 <HAL_InitTick+0x5c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20000010 	.word	0x20000010
 80013b8:	2000000c 	.word	0x2000000c

080013bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_IncTick+0x20>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_IncTick+0x24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <HAL_IncTick+0x24>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000010 	.word	0x20000010
 80013e0:	20020598 	.word	0x20020598

080013e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20020598 	.word	0x20020598

080013fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff ffee 	bl	80013e4 <HAL_GetTick>
 8001408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d005      	beq.n	8001422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_Delay+0x44>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001422:	bf00      	nop
 8001424:	f7ff ffde 	bl	80013e4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	429a      	cmp	r2, r3
 8001432:	d8f7      	bhi.n	8001424 <HAL_Delay+0x28>
  {
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000010 	.word	0x20000010

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <__NVIC_SetPriorityGrouping+0x40>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	4313      	orrs	r3, r2
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <__NVIC_SetPriorityGrouping+0x40>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00
 8001488:	05fa0000 	.word	0x05fa0000

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	@ (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	@ (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	@ 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	@ 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff47 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff5c 	bl	800148c <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff8e 	bl	80014fc <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffb0 	bl	8001564 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001614:	f3bf 8f5f 	dmb	sy
}
 8001618:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800161a:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <HAL_MPU_Disable+0x28>)
 800161c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161e:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <HAL_MPU_Disable+0x28>)
 8001620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001624:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001626:	4b05      	ldr	r3, [pc, #20]	@ (800163c <HAL_MPU_Disable+0x2c>)
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00
 800163c:	e000ed90 	.word	0xe000ed90

08001640 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001648:	4a0b      	ldr	r2, [pc, #44]	@ (8001678 <HAL_MPU_Enable+0x38>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_MPU_Enable+0x3c>)
 8001654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001656:	4a09      	ldr	r2, [pc, #36]	@ (800167c <HAL_MPU_Enable+0x3c>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800165c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800165e:	f3bf 8f4f 	dsb	sy
}
 8001662:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001664:	f3bf 8f6f 	isb	sy
}
 8001668:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed90 	.word	0xe000ed90
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	785a      	ldrb	r2, [r3, #1]
 800168c:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <HAL_MPU_ConfigRegion+0x7c>)
 800168e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <HAL_MPU_ConfigRegion+0x7c>)
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	4a19      	ldr	r2, [pc, #100]	@ (80016fc <HAL_MPU_ConfigRegion+0x7c>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800169c:	4a17      	ldr	r2, [pc, #92]	@ (80016fc <HAL_MPU_ConfigRegion+0x7c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7b1b      	ldrb	r3, [r3, #12]
 80016a8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7adb      	ldrb	r3, [r3, #11]
 80016ae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7a9b      	ldrb	r3, [r3, #10]
 80016b6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7b5b      	ldrb	r3, [r3, #13]
 80016be:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7b9b      	ldrb	r3, [r3, #14]
 80016c6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7bdb      	ldrb	r3, [r3, #15]
 80016ce:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7a5b      	ldrb	r3, [r3, #9]
 80016d6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	7a1b      	ldrb	r3, [r3, #8]
 80016de:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016e0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016ea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016ec:	6113      	str	r3, [r2, #16]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed90 	.word	0xe000ed90

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	@ 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	e175      	b.n	8001a0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	429a      	cmp	r2, r3
 800173a:	f040 8164 	bne.w	8001a06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d005      	beq.n	8001756 <HAL_GPIO_Init+0x56>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d130      	bne.n	80017b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800178c:	2201      	movs	r2, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 0201 	and.w	r2, r3, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d017      	beq.n	80017f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d123      	bne.n	8001848 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	08da      	lsrs	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3208      	adds	r2, #8
 8001808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	08da      	lsrs	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3208      	adds	r2, #8
 8001842:	69b9      	ldr	r1, [r7, #24]
 8001844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0203 	and.w	r2, r3, #3
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 80be 	beq.w	8001a06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	4b66      	ldr	r3, [pc, #408]	@ (8001a24 <HAL_GPIO_Init+0x324>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	4a65      	ldr	r2, [pc, #404]	@ (8001a24 <HAL_GPIO_Init+0x324>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001894:	6453      	str	r3, [r2, #68]	@ 0x44
 8001896:	4b63      	ldr	r3, [pc, #396]	@ (8001a24 <HAL_GPIO_Init+0x324>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018a2:	4a61      	ldr	r2, [pc, #388]	@ (8001a28 <HAL_GPIO_Init+0x328>)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a58      	ldr	r2, [pc, #352]	@ (8001a2c <HAL_GPIO_Init+0x32c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d037      	beq.n	800193e <HAL_GPIO_Init+0x23e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a57      	ldr	r2, [pc, #348]	@ (8001a30 <HAL_GPIO_Init+0x330>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d031      	beq.n	800193a <HAL_GPIO_Init+0x23a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a56      	ldr	r2, [pc, #344]	@ (8001a34 <HAL_GPIO_Init+0x334>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d02b      	beq.n	8001936 <HAL_GPIO_Init+0x236>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a55      	ldr	r2, [pc, #340]	@ (8001a38 <HAL_GPIO_Init+0x338>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d025      	beq.n	8001932 <HAL_GPIO_Init+0x232>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a54      	ldr	r2, [pc, #336]	@ (8001a3c <HAL_GPIO_Init+0x33c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01f      	beq.n	800192e <HAL_GPIO_Init+0x22e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a53      	ldr	r2, [pc, #332]	@ (8001a40 <HAL_GPIO_Init+0x340>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_GPIO_Init+0x22a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a52      	ldr	r2, [pc, #328]	@ (8001a44 <HAL_GPIO_Init+0x344>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x226>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a51      	ldr	r2, [pc, #324]	@ (8001a48 <HAL_GPIO_Init+0x348>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x222>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a50      	ldr	r2, [pc, #320]	@ (8001a4c <HAL_GPIO_Init+0x34c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x21e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4f      	ldr	r2, [pc, #316]	@ (8001a50 <HAL_GPIO_Init+0x350>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x21a>
 8001916:	2309      	movs	r3, #9
 8001918:	e012      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800191a:	230a      	movs	r3, #10
 800191c:	e010      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800191e:	2308      	movs	r3, #8
 8001920:	e00e      	b.n	8001940 <HAL_GPIO_Init+0x240>
 8001922:	2307      	movs	r3, #7
 8001924:	e00c      	b.n	8001940 <HAL_GPIO_Init+0x240>
 8001926:	2306      	movs	r3, #6
 8001928:	e00a      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800192a:	2305      	movs	r3, #5
 800192c:	e008      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800192e:	2304      	movs	r3, #4
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x240>
 8001932:	2303      	movs	r3, #3
 8001934:	e004      	b.n	8001940 <HAL_GPIO_Init+0x240>
 8001936:	2302      	movs	r3, #2
 8001938:	e002      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800193e:	2300      	movs	r3, #0
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f002 0203 	and.w	r2, r2, #3
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	4093      	lsls	r3, r2
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001950:	4935      	ldr	r1, [pc, #212]	@ (8001a28 <HAL_GPIO_Init+0x328>)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a54 <HAL_GPIO_Init+0x354>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001982:	4a34      	ldr	r2, [pc, #208]	@ (8001a54 <HAL_GPIO_Init+0x354>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001988:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <HAL_GPIO_Init+0x354>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ac:	4a29      	ldr	r2, [pc, #164]	@ (8001a54 <HAL_GPIO_Init+0x354>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019b2:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <HAL_GPIO_Init+0x354>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a54 <HAL_GPIO_Init+0x354>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <HAL_GPIO_Init+0x354>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a00:	4a14      	ldr	r2, [pc, #80]	@ (8001a54 <HAL_GPIO_Init+0x354>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b0f      	cmp	r3, #15
 8001a10:	f67f ae86 	bls.w	8001720 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3724      	adds	r7, #36	@ 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020c00 	.word	0x40020c00
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40021400 	.word	0x40021400
 8001a44:	40021800 	.word	0x40021800
 8001a48:	40021c00 	.word	0x40021c00
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	40022400 	.word	0x40022400
 8001a54:	40013c00 	.word	0x40013c00

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	619a      	str	r2, [r3, #24]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e291      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8087 	beq.w	8001bbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab0:	4b96      	ldr	r3, [pc, #600]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d00c      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001abc:	4b93      	ldr	r3, [pc, #588]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d112      	bne.n	8001aee <HAL_RCC_OscConfig+0x62>
 8001ac8:	4b90      	ldr	r3, [pc, #576]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ad4:	d10b      	bne.n	8001aee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d06c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x130>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d168      	bne.n	8001bbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e26b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x7a>
 8001af8:	4b84      	ldr	r3, [pc, #528]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a83      	ldr	r2, [pc, #524]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	e02e      	b.n	8001b64 <HAL_RCC_OscConfig+0xd8>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x9c>
 8001b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a7e      	ldr	r2, [pc, #504]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a7b      	ldr	r2, [pc, #492]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e01d      	b.n	8001b64 <HAL_RCC_OscConfig+0xd8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0xc0>
 8001b32:	4b76      	ldr	r3, [pc, #472]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a75      	ldr	r2, [pc, #468]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b73      	ldr	r3, [pc, #460]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a72      	ldr	r2, [pc, #456]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0xd8>
 8001b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a6e      	ldr	r2, [pc, #440]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b6c      	ldr	r3, [pc, #432]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a6b      	ldr	r2, [pc, #428]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fc3a 	bl	80013e4 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fc36 	bl	80013e4 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	@ 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e21f      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b61      	ldr	r3, [pc, #388]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0xe8>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fc26 	bl	80013e4 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fc22 	bl	80013e4 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	@ 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e20b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	4b57      	ldr	r3, [pc, #348]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x110>
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d069      	beq.n	8001c9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bca:	4b50      	ldr	r3, [pc, #320]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd6:	4b4d      	ldr	r3, [pc, #308]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d11c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x190>
 8001be2:	4b4a      	ldr	r3, [pc, #296]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d116      	bne.n	8001c1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_RCC_OscConfig+0x17a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e1df      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c06:	4b41      	ldr	r3, [pc, #260]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	493d      	ldr	r1, [pc, #244]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	e040      	b.n	8001c9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d023      	beq.n	8001c6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c24:	4b39      	ldr	r3, [pc, #228]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a38      	ldr	r2, [pc, #224]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fbd8 	bl	80013e4 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff fbd4 	bl	80013e4 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e1bd      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4a:	4b30      	ldr	r3, [pc, #192]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b2d      	ldr	r3, [pc, #180]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4929      	ldr	r1, [pc, #164]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
 8001c6a:	e018      	b.n	8001c9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6c:	4b27      	ldr	r3, [pc, #156]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a26      	ldr	r2, [pc, #152]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fbb4 	bl	80013e4 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff fbb0 	bl	80013e4 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e199      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d038      	beq.n	8001d1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d019      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb2:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb6:	4a15      	ldr	r2, [pc, #84]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff fb91 	bl	80013e4 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fb8d 	bl	80013e4 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e176      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x23a>
 8001ce4:	e01a      	b.n	8001d1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cea:	4a08      	ldr	r2, [pc, #32]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001cec:	f023 0301 	bic.w	r3, r3, #1
 8001cf0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fb77 	bl	80013e4 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fb73 	bl	80013e4 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d903      	bls.n	8001d10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e15c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
 8001d0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	4b91      	ldr	r3, [pc, #580]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ee      	bne.n	8001cfa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a4 	beq.w	8001e72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10d      	bne.n	8001d52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b88      	ldr	r3, [pc, #544]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	4a87      	ldr	r2, [pc, #540]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d42:	4b85      	ldr	r3, [pc, #532]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d52:	4b82      	ldr	r3, [pc, #520]	@ (8001f5c <HAL_RCC_OscConfig+0x4d0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d118      	bne.n	8001d90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f5c <HAL_RCC_OscConfig+0x4d0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7e      	ldr	r2, [pc, #504]	@ (8001f5c <HAL_RCC_OscConfig+0x4d0>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fb3b 	bl	80013e4 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d72:	f7ff fb37 	bl	80013e4 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b64      	cmp	r3, #100	@ 0x64
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e120      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d84:	4b75      	ldr	r3, [pc, #468]	@ (8001f5c <HAL_RCC_OscConfig+0x4d0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x31a>
 8001d98:	4b6f      	ldr	r3, [pc, #444]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da4:	e02d      	b.n	8001e02 <HAL_RCC_OscConfig+0x376>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x33c>
 8001dae:	4b6a      	ldr	r3, [pc, #424]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db2:	4a69      	ldr	r2, [pc, #420]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dba:	4b67      	ldr	r3, [pc, #412]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dbe:	4a66      	ldr	r2, [pc, #408]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc6:	e01c      	b.n	8001e02 <HAL_RCC_OscConfig+0x376>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d10c      	bne.n	8001dea <HAL_RCC_OscConfig+0x35e>
 8001dd0:	4b61      	ldr	r3, [pc, #388]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd4:	4a60      	ldr	r2, [pc, #384]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ddc:	4b5e      	ldr	r3, [pc, #376]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de0:	4a5d      	ldr	r2, [pc, #372]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001de8:	e00b      	b.n	8001e02 <HAL_RCC_OscConfig+0x376>
 8001dea:	4b5b      	ldr	r3, [pc, #364]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dee:	4a5a      	ldr	r2, [pc, #360]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df6:	4b58      	ldr	r3, [pc, #352]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfa:	4a57      	ldr	r2, [pc, #348]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d015      	beq.n	8001e36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0a:	f7ff faeb 	bl	80013e4 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff fae7 	bl	80013e4 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0ce      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	4b4b      	ldr	r3, [pc, #300]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ee      	beq.n	8001e12 <HAL_RCC_OscConfig+0x386>
 8001e34:	e014      	b.n	8001e60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7ff fad5 	bl	80013e4 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff fad1 	bl	80013e4 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0b8      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	4b40      	ldr	r3, [pc, #256]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ee      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d105      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b3c      	ldr	r3, [pc, #240]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80a4 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7c:	4b36      	ldr	r3, [pc, #216]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d06b      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d149      	bne.n	8001f24 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e90:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a30      	ldr	r2, [pc, #192]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff faa2 	bl	80013e4 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff fa9e 	bl	80013e4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e087      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb6:	4b28      	ldr	r3, [pc, #160]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	019b      	lsls	r3, r3, #6
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	3b01      	subs	r3, #1
 8001edc:	041b      	lsls	r3, r3, #16
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	061b      	lsls	r3, r3, #24
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001eea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001eee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a18      	ldr	r2, [pc, #96]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff fa72 	bl	80013e4 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff fa6e 	bl	80013e4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e057      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x478>
 8001f22:	e04f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0b      	ldr	r2, [pc, #44]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff fa58 	bl	80013e4 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff fa54 	bl	80013e4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e03d      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4ac>
 8001f56:	e035      	b.n	8001fc4 <HAL_RCC_OscConfig+0x538>
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <HAL_RCC_OscConfig+0x544>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d028      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d121      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d11a      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d111      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0d0      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b6a      	ldr	r3, [pc, #424]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d910      	bls.n	800201c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b67      	ldr	r3, [pc, #412]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 020f 	bic.w	r2, r3, #15
 8002002:	4965      	ldr	r1, [pc, #404]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b63      	ldr	r3, [pc, #396]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b8      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002034:	4b59      	ldr	r3, [pc, #356]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a58      	ldr	r2, [pc, #352]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 800203a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800203e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800204c:	4b53      	ldr	r3, [pc, #332]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a52      	ldr	r2, [pc, #328]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002052:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002056:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b50      	ldr	r3, [pc, #320]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	494d      	ldr	r1, [pc, #308]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d040      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b47      	ldr	r3, [pc, #284]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d115      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002096:	4b41      	ldr	r3, [pc, #260]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e073      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	4b3d      	ldr	r3, [pc, #244]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e06b      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b6:	4b39      	ldr	r3, [pc, #228]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f023 0203 	bic.w	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4936      	ldr	r1, [pc, #216]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c8:	f7ff f98c 	bl	80013e4 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d0:	f7ff f988 	bl	80013e4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e053      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b2d      	ldr	r3, [pc, #180]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 020c 	and.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1eb      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b27      	ldr	r3, [pc, #156]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d210      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b24      	ldr	r3, [pc, #144]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 020f 	bic.w	r2, r3, #15
 800210e:	4922      	ldr	r1, [pc, #136]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e032      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b19      	ldr	r3, [pc, #100]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4916      	ldr	r1, [pc, #88]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002152:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	490e      	ldr	r1, [pc, #56]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002166:	f000 f821 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 800216a:	4602      	mov	r2, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	490a      	ldr	r1, [pc, #40]	@ (80021a0 <HAL_RCC_ClockConfig+0x1cc>)
 8002178:	5ccb      	ldrb	r3, [r1, r3]
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	4a09      	ldr	r2, [pc, #36]	@ (80021a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002182:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <HAL_RCC_ClockConfig+0x1d4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f8e8 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00
 800219c:	40023800 	.word	0x40023800
 80021a0:	080072e4 	.word	0x080072e4
 80021a4:	20000008 	.word	0x20000008
 80021a8:	2000000c 	.word	0x2000000c

080021ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021b0:	b090      	sub	sp, #64	@ 0x40
 80021b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80021b8:	2300      	movs	r3, #0
 80021ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021bc:	2300      	movs	r3, #0
 80021be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c4:	4b59      	ldr	r3, [pc, #356]	@ (800232c <HAL_RCC_GetSysClockFreq+0x180>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d00d      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x40>
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	f200 80a1 	bhi.w	8002318 <HAL_RCC_GetSysClockFreq+0x16c>
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x34>
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d003      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021de:	e09b      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021e0:	4b53      	ldr	r3, [pc, #332]	@ (8002330 <HAL_RCC_GetSysClockFreq+0x184>)
 80021e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021e4:	e09b      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021e6:	4b53      	ldr	r3, [pc, #332]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x188>)
 80021e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021ea:	e098      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021ec:	4b4f      	ldr	r3, [pc, #316]	@ (800232c <HAL_RCC_GetSysClockFreq+0x180>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021f6:	4b4d      	ldr	r3, [pc, #308]	@ (800232c <HAL_RCC_GetSysClockFreq+0x180>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d028      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002202:	4b4a      	ldr	r3, [pc, #296]	@ (800232c <HAL_RCC_GetSysClockFreq+0x180>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	099b      	lsrs	r3, r3, #6
 8002208:	2200      	movs	r2, #0
 800220a:	623b      	str	r3, [r7, #32]
 800220c:	627a      	str	r2, [r7, #36]	@ 0x24
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002214:	2100      	movs	r1, #0
 8002216:	4b47      	ldr	r3, [pc, #284]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x188>)
 8002218:	fb03 f201 	mul.w	r2, r3, r1
 800221c:	2300      	movs	r3, #0
 800221e:	fb00 f303 	mul.w	r3, r0, r3
 8002222:	4413      	add	r3, r2
 8002224:	4a43      	ldr	r2, [pc, #268]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x188>)
 8002226:	fba0 1202 	umull	r1, r2, r0, r2
 800222a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800222c:	460a      	mov	r2, r1
 800222e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002232:	4413      	add	r3, r2
 8002234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002238:	2200      	movs	r2, #0
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	61fa      	str	r2, [r7, #28]
 800223e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002242:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002246:	f7fd ffdf 	bl	8000208 <__aeabi_uldivmod>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4613      	mov	r3, r2
 8002250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002252:	e053      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002254:	4b35      	ldr	r3, [pc, #212]	@ (800232c <HAL_RCC_GetSysClockFreq+0x180>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	2200      	movs	r2, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	617a      	str	r2, [r7, #20]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002266:	f04f 0b00 	mov.w	fp, #0
 800226a:	4652      	mov	r2, sl
 800226c:	465b      	mov	r3, fp
 800226e:	f04f 0000 	mov.w	r0, #0
 8002272:	f04f 0100 	mov.w	r1, #0
 8002276:	0159      	lsls	r1, r3, #5
 8002278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800227c:	0150      	lsls	r0, r2, #5
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	ebb2 080a 	subs.w	r8, r2, sl
 8002286:	eb63 090b 	sbc.w	r9, r3, fp
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002296:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800229a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800229e:	ebb2 0408 	subs.w	r4, r2, r8
 80022a2:	eb63 0509 	sbc.w	r5, r3, r9
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	00eb      	lsls	r3, r5, #3
 80022b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022b4:	00e2      	lsls	r2, r4, #3
 80022b6:	4614      	mov	r4, r2
 80022b8:	461d      	mov	r5, r3
 80022ba:	eb14 030a 	adds.w	r3, r4, sl
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	eb45 030b 	adc.w	r3, r5, fp
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022d2:	4629      	mov	r1, r5
 80022d4:	028b      	lsls	r3, r1, #10
 80022d6:	4621      	mov	r1, r4
 80022d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022dc:	4621      	mov	r1, r4
 80022de:	028a      	lsls	r2, r1, #10
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e6:	2200      	movs	r2, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	60fa      	str	r2, [r7, #12]
 80022ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022f0:	f7fd ff8a 	bl	8000208 <__aeabi_uldivmod>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4613      	mov	r3, r2
 80022fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_RCC_GetSysClockFreq+0x180>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	3301      	adds	r3, #1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800230c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800230e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002316:	e002      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <HAL_RCC_GetSysClockFreq+0x184>)
 800231a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800231c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002320:	4618      	mov	r0, r3
 8002322:	3740      	adds	r7, #64	@ 0x40
 8002324:	46bd      	mov	sp, r7
 8002326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	00f42400 	.word	0x00f42400
 8002334:	017d7840 	.word	0x017d7840

08002338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d012      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002360:	4b69      	ldr	r3, [pc, #420]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a68      	ldr	r2, [pc, #416]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002366:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800236a:	6093      	str	r3, [r2, #8]
 800236c:	4b66      	ldr	r3, [pc, #408]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002374:	4964      	ldr	r1, [pc, #400]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002382:	2301      	movs	r3, #1
 8002384:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d017      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002392:	4b5d      	ldr	r3, [pc, #372]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002398:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a0:	4959      	ldr	r1, [pc, #356]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023b0:	d101      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023b2:	2301      	movs	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023be:	2301      	movs	r3, #1
 80023c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d017      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	494a      	ldr	r1, [pc, #296]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ec:	d101      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800240a:	2301      	movs	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 808b 	beq.w	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	4b3a      	ldr	r3, [pc, #232]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	4a39      	ldr	r2, [pc, #228]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002426:	6413      	str	r3, [r2, #64]	@ 0x40
 8002428:	4b37      	ldr	r3, [pc, #220]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002434:	4b35      	ldr	r3, [pc, #212]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a34      	ldr	r2, [pc, #208]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800243a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002440:	f7fe ffd0 	bl	80013e4 <HAL_GetTick>
 8002444:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002448:	f7fe ffcc 	bl	80013e4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	@ 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e357      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800245a:	4b2c      	ldr	r3, [pc, #176]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002466:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800246e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d035      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d02e      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002484:	4b20      	ldr	r3, [pc, #128]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800248c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800248e:	4b1e      	ldr	r3, [pc, #120]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002492:	4a1d      	ldr	r2, [pc, #116]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002498:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800249a:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249e:	4a1a      	ldr	r2, [pc, #104]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80024a6:	4a18      	ldr	r2, [pc, #96]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024ac:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d114      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7fe ff94 	bl	80013e4 <HAL_GetTick>
 80024bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024be:	e00a      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c0:	f7fe ff90 	bl	80013e4 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e319      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0ee      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024ee:	d111      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024fc:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024fe:	400b      	ands	r3, r1
 8002500:	4901      	ldr	r1, [pc, #4]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
 8002506:	e00b      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002508:	40023800 	.word	0x40023800
 800250c:	40007000 	.word	0x40007000
 8002510:	0ffffcff 	.word	0x0ffffcff
 8002514:	4baa      	ldr	r3, [pc, #680]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4aa9      	ldr	r2, [pc, #676]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800251a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800251e:	6093      	str	r3, [r2, #8]
 8002520:	4ba7      	ldr	r3, [pc, #668]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002522:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252c:	49a4      	ldr	r1, [pc, #656]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800252e:	4313      	orrs	r3, r2
 8002530:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	d010      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800253e:	4ba0      	ldr	r3, [pc, #640]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002544:	4a9e      	ldr	r2, [pc, #632]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002546:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800254a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800254e:	4b9c      	ldr	r3, [pc, #624]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002550:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002558:	4999      	ldr	r1, [pc, #612]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800256c:	4b94      	ldr	r3, [pc, #592]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002572:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800257a:	4991      	ldr	r1, [pc, #580]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800258e:	4b8c      	ldr	r3, [pc, #560]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002594:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800259c:	4988      	ldr	r1, [pc, #544]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025b0:	4b83      	ldr	r3, [pc, #524]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025be:	4980      	ldr	r1, [pc, #512]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025d2:	4b7b      	ldr	r3, [pc, #492]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e0:	4977      	ldr	r1, [pc, #476]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025f4:	4b72      	ldr	r3, [pc, #456]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fa:	f023 0203 	bic.w	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	496f      	ldr	r1, [pc, #444]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002616:	4b6a      	ldr	r3, [pc, #424]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261c:	f023 020c 	bic.w	r2, r3, #12
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002624:	4966      	ldr	r1, [pc, #408]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002638:	4b61      	ldr	r3, [pc, #388]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002646:	495e      	ldr	r1, [pc, #376]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800265a:	4b59      	ldr	r3, [pc, #356]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002660:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002668:	4955      	ldr	r1, [pc, #340]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800267c:	4b50      	ldr	r3, [pc, #320]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002682:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268a:	494d      	ldr	r1, [pc, #308]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800269e:	4b48      	ldr	r3, [pc, #288]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ac:	4944      	ldr	r1, [pc, #272]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026c0:	4b3f      	ldr	r3, [pc, #252]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ce:	493c      	ldr	r1, [pc, #240]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80026e2:	4b37      	ldr	r3, [pc, #220]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f0:	4933      	ldr	r1, [pc, #204]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002704:	4b2e      	ldr	r3, [pc, #184]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002712:	492b      	ldr	r1, [pc, #172]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d011      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002726:	4b26      	ldr	r3, [pc, #152]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002734:	4922      	ldr	r1, [pc, #136]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002740:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002744:	d101      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002746:	2301      	movs	r3, #1
 8002748:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002756:	2301      	movs	r3, #1
 8002758:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002766:	4b16      	ldr	r3, [pc, #88]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002774:	4912      	ldr	r1, [pc, #72]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00b      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002788:	4b0d      	ldr	r3, [pc, #52]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002798:	4909      	ldr	r1, [pc, #36]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d006      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80d9 	beq.w	8002966 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027b4:	4b02      	ldr	r3, [pc, #8]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a01      	ldr	r2, [pc, #4]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027be:	e001      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80027c0:	40023800 	.word	0x40023800
 80027c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c6:	f7fe fe0d 	bl	80013e4 <HAL_GetTick>
 80027ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027ce:	f7fe fe09 	bl	80013e4 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	@ 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e194      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d021      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d11d      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002800:	4b64      	ldr	r3, [pc, #400]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002806:	0c1b      	lsrs	r3, r3, #16
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800280e:	4b61      	ldr	r3, [pc, #388]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002814:	0e1b      	lsrs	r3, r3, #24
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	019a      	lsls	r2, r3, #6
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	041b      	lsls	r3, r3, #16
 8002826:	431a      	orrs	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	061b      	lsls	r3, r3, #24
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	071b      	lsls	r3, r3, #28
 8002834:	4957      	ldr	r1, [pc, #348]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d004      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800285a:	2b00      	cmp	r3, #0
 800285c:	d02e      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002866:	d129      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002868:	4b4a      	ldr	r3, [pc, #296]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800286a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800286e:	0c1b      	lsrs	r3, r3, #16
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002876:	4b47      	ldr	r3, [pc, #284]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800287c:	0f1b      	lsrs	r3, r3, #28
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	019a      	lsls	r2, r3, #6
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	431a      	orrs	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	071b      	lsls	r3, r3, #28
 800289c:	493d      	ldr	r1, [pc, #244]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80028a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028aa:	f023 021f 	bic.w	r2, r3, #31
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	3b01      	subs	r3, #1
 80028b4:	4937      	ldr	r1, [pc, #220]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01d      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028c8:	4b32      	ldr	r3, [pc, #200]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ce:	0e1b      	lsrs	r3, r3, #24
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028dc:	0f1b      	lsrs	r3, r3, #28
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	019a      	lsls	r2, r3, #6
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	041b      	lsls	r3, r3, #16
 80028f0:	431a      	orrs	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	431a      	orrs	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	071b      	lsls	r3, r3, #28
 80028fc:	4925      	ldr	r1, [pc, #148]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d011      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	019a      	lsls	r2, r3, #6
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	041b      	lsls	r3, r3, #16
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	061b      	lsls	r3, r3, #24
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	071b      	lsls	r3, r3, #28
 800292c:	4919      	ldr	r1, [pc, #100]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002934:	4b17      	ldr	r3, [pc, #92]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a16      	ldr	r2, [pc, #88]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800293a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800293e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002940:	f7fe fd50 	bl	80013e4 <HAL_GetTick>
 8002944:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002948:	f7fe fd4c 	bl	80013e4 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	@ 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0d7      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800295a:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b01      	cmp	r3, #1
 800296a:	f040 80cd 	bne.w	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800296e:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a08      	ldr	r2, [pc, #32]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800297a:	f7fe fd33 	bl	80013e4 <HAL_GetTick>
 800297e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002982:	f7fe fd2f 	bl	80013e4 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b64      	cmp	r3, #100	@ 0x64
 800298e:	d903      	bls.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e0ba      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002994:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002998:	4b5e      	ldr	r3, [pc, #376]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029a4:	d0ed      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d02e      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d12a      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029ce:	4b51      	ldr	r3, [pc, #324]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e2:	0f1b      	lsrs	r3, r3, #28
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	019a      	lsls	r2, r3, #6
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	061b      	lsls	r3, r3, #24
 80029fc:	431a      	orrs	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	071b      	lsls	r3, r3, #28
 8002a02:	4944      	ldr	r1, [pc, #272]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a0a:	4b42      	ldr	r3, [pc, #264]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a10:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	021b      	lsls	r3, r3, #8
 8002a1c:	493d      	ldr	r1, [pc, #244]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d022      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a38:	d11d      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a3a:	4b36      	ldr	r3, [pc, #216]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a40:	0e1b      	lsrs	r3, r3, #24
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a48:	4b32      	ldr	r3, [pc, #200]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	0f1b      	lsrs	r3, r3, #28
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	019a      	lsls	r2, r3, #6
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	431a      	orrs	r2, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	061b      	lsls	r3, r3, #24
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	071b      	lsls	r3, r3, #28
 8002a6e:	4929      	ldr	r1, [pc, #164]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a82:	4b24      	ldr	r3, [pc, #144]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a88:	0e1b      	lsrs	r3, r3, #24
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a90:	4b20      	ldr	r3, [pc, #128]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a96:	0c1b      	lsrs	r3, r3, #16
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	019a      	lsls	r2, r3, #6
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	041b      	lsls	r3, r3, #16
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	071b      	lsls	r3, r3, #28
 8002ab6:	4917      	ldr	r1, [pc, #92]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002abe:	4b15      	ldr	r3, [pc, #84]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ac4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	4911      	ldr	r1, [pc, #68]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae0:	f7fe fc80 	bl	80013e4 <HAL_GetTick>
 8002ae4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ae8:	f7fe fc7c 	bl	80013e4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	@ 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e007      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002afa:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b06:	d1ef      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800

08002b18 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e022      	b.n	8002b70 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d105      	bne.n	8002b42 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7fe faa5 	bl	800108c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2203      	movs	r2, #3
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f814 	bl	8002b78 <HAL_SD_InitCard>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00a      	b.n	8002b70 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002b78:	b5b0      	push	{r4, r5, r7, lr}
 8002b7a:	b08e      	sub	sp, #56	@ 0x38
 8002b7c:	af04      	add	r7, sp, #16
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002b94:	2376      	movs	r3, #118	@ 0x76
 8002b96:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681d      	ldr	r5, [r3, #0]
 8002b9c:	466c      	mov	r4, sp
 8002b9e:	f107 0314 	add.w	r3, r7, #20
 8002ba2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002baa:	f107 0308 	add.w	r3, r7, #8
 8002bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f001 f933 	bl	8003e1c <SDMMC_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e059      	b.n	8002c7c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bd6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 f949 	bl	8003e74 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bf0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	f7fe fc02 	bl	80013fc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fab7 	bl	800316c <SD_PowerON>
 8002bfe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e02e      	b.n	8002c7c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f9d6 	bl	8002fd0 <SD_InitCard>
 8002c24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00b      	beq.n	8002c44 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e01b      	b.n	8002c7c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 f977 	bl	8003f40 <SDMMC_CmdBlockLength>
 8002c52:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00f      	beq.n	8002c7a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a09      	ldr	r2, [pc, #36]	@ (8002c84 <HAL_SD_InitCard+0x10c>)
 8002c60:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3728      	adds	r7, #40	@ 0x28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bdb0      	pop	{r4, r5, r7, pc}
 8002c84:	004005ff 	.word	0x004005ff

08002c88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c96:	0f9b      	lsrs	r3, r3, #30
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ca2:	0e9b      	lsrs	r3, r3, #26
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cb4:	0e1b      	lsrs	r3, r3, #24
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cc6:	0c1b      	lsrs	r3, r3, #16
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ce8:	0d1b      	lsrs	r3, r3, #20
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d06:	0bdb      	lsrs	r3, r3, #15
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d18:	0b9b      	lsrs	r3, r3, #14
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d2a:	0b5b      	lsrs	r3, r3, #13
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d3c:	0b1b      	lsrs	r3, r3, #12
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d163      	bne.n	8002e20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d5c:	009a      	lsls	r2, r3, #2
 8002d5e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d62:	4013      	ands	r3, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002d68:	0f92      	lsrs	r2, r2, #30
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d74:	0edb      	lsrs	r3, r3, #27
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d86:	0e1b      	lsrs	r3, r3, #24
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d98:	0d5b      	lsrs	r3, r3, #21
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002daa:	0c9b      	lsrs	r3, r3, #18
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dbc:	0bdb      	lsrs	r3, r3, #15
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	7e1b      	ldrb	r3, [r3, #24]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	3302      	adds	r3, #2
 8002de0:	2201      	movs	r2, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002dea:	fb03 f202 	mul.w	r2, r3, r2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	7a1b      	ldrb	r3, [r3, #8]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002e0c:	0a52      	lsrs	r2, r2, #9
 8002e0e:	fb03 f202 	mul.w	r2, r3, r2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e1c:	661a      	str	r2, [r3, #96]	@ 0x60
 8002e1e:	e031      	b.n	8002e84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d11d      	bne.n	8002e64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	3301      	adds	r3, #1
 8002e44:	029a      	lsls	r2, r3, #10
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e58:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	661a      	str	r2, [r3, #96]	@ 0x60
 8002e62:	e00f      	b.n	8002e84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a58      	ldr	r2, [pc, #352]	@ (8002fcc <HAL_SD_GetCardCSD+0x344>)
 8002e6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e09d      	b.n	8002fc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e88:	0b9b      	lsrs	r3, r3, #14
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e9a:	09db      	lsrs	r3, r3, #7
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebc:	0fdb      	lsrs	r3, r3, #31
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	0f5b      	lsrs	r3, r3, #29
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eda:	0e9b      	lsrs	r3, r3, #26
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eec:	0d9b      	lsrs	r3, r3, #22
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efe:	0d5b      	lsrs	r3, r3, #21
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1a:	0c1b      	lsrs	r3, r3, #16
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2e:	0bdb      	lsrs	r3, r3, #15
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f42:	0b9b      	lsrs	r3, r3, #14
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f56:	0b5b      	lsrs	r3, r3, #13
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6a:	0b1b      	lsrs	r3, r3, #12
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7e:	0a9b      	lsrs	r3, r3, #10
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	004005ff 	.word	0x004005ff

08002fd0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002fd0:	b5b0      	push	{r4, r5, r7, lr}
 8002fd2:	b094      	sub	sp, #80	@ 0x50
 8002fd4:	af04      	add	r7, sp, #16
 8002fd6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 ff55 	bl	8003e90 <SDMMC_GetPowerState>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d102      	bne.n	8002ff2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002fec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ff0:	e0b8      	b.n	8003164 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d02f      	beq.n	800305a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f001 f866 	bl	80040d0 <SDMMC_CmdSendCID>
 8003004:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <SD_InitCard+0x40>
    {
      return errorstate;
 800300c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800300e:	e0a9      	b.n	8003164 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f000 ff7f 	bl	8003f1a <SDMMC_GetResponse>
 800301c:	4602      	mov	r2, r0
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2104      	movs	r1, #4
 8003028:	4618      	mov	r0, r3
 800302a:	f000 ff76 	bl	8003f1a <SDMMC_GetResponse>
 800302e:	4602      	mov	r2, r0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2108      	movs	r1, #8
 800303a:	4618      	mov	r0, r3
 800303c:	f000 ff6d 	bl	8003f1a <SDMMC_GetResponse>
 8003040:	4602      	mov	r2, r0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	210c      	movs	r1, #12
 800304c:	4618      	mov	r0, r3
 800304e:	f000 ff64 	bl	8003f1a <SDMMC_GetResponse>
 8003052:	4602      	mov	r2, r0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305e:	2b03      	cmp	r3, #3
 8003060:	d00d      	beq.n	800307e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f107 020e 	add.w	r2, r7, #14
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f001 f86c 	bl	800414a <SDMMC_CmdSetRelAdd>
 8003072:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <SD_InitCard+0xae>
    {
      return errorstate;
 800307a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800307c:	e072      	b.n	8003164 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	2b03      	cmp	r3, #3
 8003084:	d036      	beq.n	80030f4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003086:	89fb      	ldrh	r3, [r7, #14]
 8003088:	461a      	mov	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003096:	041b      	lsls	r3, r3, #16
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f001 f836 	bl	800410c <SDMMC_CmdSendCSD>
 80030a0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80030a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <SD_InitCard+0xdc>
    {
      return errorstate;
 80030a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030aa:	e05b      	b.n	8003164 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 ff31 	bl	8003f1a <SDMMC_GetResponse>
 80030b8:	4602      	mov	r2, r0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2104      	movs	r1, #4
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 ff28 	bl	8003f1a <SDMMC_GetResponse>
 80030ca:	4602      	mov	r2, r0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2108      	movs	r1, #8
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 ff1f 	bl	8003f1a <SDMMC_GetResponse>
 80030dc:	4602      	mov	r2, r0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	210c      	movs	r1, #12
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 ff16 	bl	8003f1a <SDMMC_GetResponse>
 80030ee:	4602      	mov	r2, r0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2104      	movs	r1, #4
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 ff0d 	bl	8003f1a <SDMMC_GetResponse>
 8003100:	4603      	mov	r3, r0
 8003102:	0d1a      	lsrs	r2, r3, #20
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003108:	f107 0310 	add.w	r3, r7, #16
 800310c:	4619      	mov	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fdba 	bl	8002c88 <HAL_SD_GetCardCSD>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800311a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800311e:	e021      	b.n	8003164 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6819      	ldr	r1, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	2200      	movs	r2, #0
 800312c:	461c      	mov	r4, r3
 800312e:	4615      	mov	r5, r2
 8003130:	4622      	mov	r2, r4
 8003132:	462b      	mov	r3, r5
 8003134:	4608      	mov	r0, r1
 8003136:	f000 ff25 	bl	8003f84 <SDMMC_CmdSelDesel>
 800313a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800313c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <SD_InitCard+0x176>
  {
    return errorstate;
 8003142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003144:	e00e      	b.n	8003164 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681d      	ldr	r5, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	466c      	mov	r4, sp
 800314e:	f103 0210 	add.w	r2, r3, #16
 8003152:	ca07      	ldmia	r2, {r0, r1, r2}
 8003154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003158:	3304      	adds	r3, #4
 800315a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800315c:	4628      	mov	r0, r5
 800315e:	f000 fe5d 	bl	8003e1c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3740      	adds	r7, #64	@ 0x40
 8003168:	46bd      	mov	sp, r7
 800316a:	bdb0      	pop	{r4, r5, r7, pc}

0800316c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	2300      	movs	r3, #0
 800317e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 ff20 	bl	8003fca <SDMMC_CmdGoIdleState>
 800318a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	e072      	b.n	800327c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f000 ff33 	bl	8004006 <SDMMC_CmdOperCond>
 80031a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 ff09 	bl	8003fca <SDMMC_CmdGoIdleState>
 80031b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d004      	beq.n	80031ca <SD_PowerON+0x5e>
    {
      return errorstate;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	e05b      	b.n	800327c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d137      	bne.n	8003242 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2100      	movs	r1, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 ff33 	bl	8004044 <SDMMC_CmdAppCommand>
 80031de:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d02d      	beq.n	8003242 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80031ea:	e047      	b.n	800327c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 ff26 	bl	8004044 <SDMMC_CmdAppCommand>
 80031f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <SD_PowerON+0x98>
    {
      return errorstate;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	e03b      	b.n	800327c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	491e      	ldr	r1, [pc, #120]	@ (8003284 <SD_PowerON+0x118>)
 800320a:	4618      	mov	r0, r3
 800320c:	f000 ff3c 	bl	8004088 <SDMMC_CmdAppOperCommand>
 8003210:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003218:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800321c:	e02e      	b.n	800327c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fe78 	bl	8003f1a <SDMMC_GetResponse>
 800322a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	0fdb      	lsrs	r3, r3, #31
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <SD_PowerON+0xcc>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <SD_PowerON+0xce>
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]

    count++;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	3301      	adds	r3, #1
 8003240:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003248:	4293      	cmp	r3, r2
 800324a:	d802      	bhi.n	8003252 <SD_PowerON+0xe6>
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0cc      	beq.n	80031ec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003258:	4293      	cmp	r3, r2
 800325a:	d902      	bls.n	8003262 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800325c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003260:	e00c      	b.n	800327c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	645a      	str	r2, [r3, #68]	@ 0x44
 8003272:	e002      	b.n	800327a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	c1100000 	.word	0xc1100000

08003288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e09d      	b.n	80033d6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d108      	bne.n	80032b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032aa:	d009      	beq.n	80032c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	61da      	str	r2, [r3, #28]
 80032b2:	e005      	b.n	80032c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd ff5c 	bl	8001198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003300:	d902      	bls.n	8003308 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e002      	b.n	800330e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003308:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800330c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003316:	d007      	beq.n	8003328 <HAL_SPI_Init+0xa0>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003320:	d002      	beq.n	8003328 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336a:	ea42 0103 	orr.w	r1, r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	0c1b      	lsrs	r3, r3, #16
 8003384:	f003 0204 	and.w	r2, r3, #4
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80033a4:	ea42 0103 	orr.w	r1, r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b088      	sub	sp, #32
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_SPI_Transmit+0x22>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e15f      	b.n	80036c0 <HAL_SPI_Transmit+0x2e2>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003408:	f7fd ffec 	bl	80013e4 <HAL_GetTick>
 800340c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d002      	beq.n	8003424 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800341e:	2302      	movs	r3, #2
 8003420:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003422:	e148      	b.n	80036b6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_SPI_Transmit+0x52>
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003434:	e13f      	b.n	80036b6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2203      	movs	r2, #3
 800343a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	88fa      	ldrh	r2, [r7, #6]
 800344e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	88fa      	ldrh	r2, [r7, #6]
 8003454:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003480:	d10f      	bne.n	80034a2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003490:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ac:	2b40      	cmp	r3, #64	@ 0x40
 80034ae:	d007      	beq.n	80034c0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034c8:	d94f      	bls.n	800356a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_SPI_Transmit+0xfa>
 80034d2:	8afb      	ldrh	r3, [r7, #22]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d142      	bne.n	800355e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	1c9a      	adds	r2, r3, #2
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034fc:	e02f      	b.n	800355e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d112      	bne.n	8003532 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	881a      	ldrh	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351c:	1c9a      	adds	r2, r3, #2
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003530:	e015      	b.n	800355e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003532:	f7fd ff57 	bl	80013e4 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d803      	bhi.n	800354a <HAL_SPI_Transmit+0x16c>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d102      	bne.n	8003550 <HAL_SPI_Transmit+0x172>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d106      	bne.n	800355e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800355c:	e0ab      	b.n	80036b6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ca      	bne.n	80034fe <HAL_SPI_Transmit+0x120>
 8003568:	e080      	b.n	800366c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_SPI_Transmit+0x19a>
 8003572:	8afb      	ldrh	r3, [r7, #22]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d174      	bne.n	8003662 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b01      	cmp	r3, #1
 8003580:	d912      	bls.n	80035a8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003586:	881a      	ldrh	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003592:	1c9a      	adds	r2, r3, #2
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b02      	subs	r3, #2
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035a6:	e05c      	b.n	8003662 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	330c      	adds	r3, #12
 80035b2:	7812      	ldrb	r2, [r2, #0]
 80035b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80035ce:	e048      	b.n	8003662 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d12b      	bne.n	8003636 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d912      	bls.n	800360e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	881a      	ldrh	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f8:	1c9a      	adds	r2, r3, #2
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b02      	subs	r3, #2
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800360c:	e029      	b.n	8003662 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	330c      	adds	r3, #12
 8003618:	7812      	ldrb	r2, [r2, #0]
 800361a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003634:	e015      	b.n	8003662 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003636:	f7fd fed5 	bl	80013e4 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d803      	bhi.n	800364e <HAL_SPI_Transmit+0x270>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d102      	bne.n	8003654 <HAL_SPI_Transmit+0x276>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003660:	e029      	b.n	80036b6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1b1      	bne.n	80035d0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fb69 	bl	8003d48 <SPI_EndRxTxTransaction>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	77fb      	strb	r3, [r7, #31]
 80036ac:	e003      	b.n	80036b6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80036be:	7ffb      	ldrb	r3, [r7, #31]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	@ 0x28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036d6:	2301      	movs	r3, #1
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x26>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e20a      	b.n	8003b04 <HAL_SPI_TransmitReceive+0x43c>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036f6:	f7fd fe75 	bl	80013e4 <HAL_GetTick>
 80036fa:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003702:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800370a:	887b      	ldrh	r3, [r7, #2]
 800370c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003712:	7efb      	ldrb	r3, [r7, #27]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d00e      	beq.n	8003736 <HAL_SPI_TransmitReceive+0x6e>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800371e:	d106      	bne.n	800372e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <HAL_SPI_TransmitReceive+0x66>
 8003728:	7efb      	ldrb	r3, [r7, #27]
 800372a:	2b04      	cmp	r3, #4
 800372c:	d003      	beq.n	8003736 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800372e:	2302      	movs	r3, #2
 8003730:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003734:	e1e0      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_SPI_TransmitReceive+0x80>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_SPI_TransmitReceive+0x80>
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d103      	bne.n	8003750 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800374e:	e1d3      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b04      	cmp	r3, #4
 800375a:	d003      	beq.n	8003764 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2205      	movs	r2, #5
 8003760:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	887a      	ldrh	r2, [r7, #2]
 8003774:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	887a      	ldrh	r2, [r7, #2]
 800378a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	887a      	ldrh	r2, [r7, #2]
 8003790:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037a6:	d802      	bhi.n	80037ae <HAL_SPI_TransmitReceive+0xe6>
 80037a8:	8a3b      	ldrh	r3, [r7, #16]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d908      	bls.n	80037c0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	e007      	b.n	80037d0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037ce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037da:	2b40      	cmp	r3, #64	@ 0x40
 80037dc:	d007      	beq.n	80037ee <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037f6:	f240 8081 	bls.w	80038fc <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_SPI_TransmitReceive+0x140>
 8003802:	8a7b      	ldrh	r3, [r7, #18]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d16d      	bne.n	80038e4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380c:	881a      	ldrh	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003818:	1c9a      	adds	r2, r3, #2
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800382c:	e05a      	b.n	80038e4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b02      	cmp	r3, #2
 800383a:	d11b      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x1ac>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_SPI_TransmitReceive+0x1ac>
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	2b01      	cmp	r3, #1
 800384a:	d113      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003850:	881a      	ldrh	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385c:	1c9a      	adds	r2, r3, #2
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d11c      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x1f4>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d016      	beq.n	80038bc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	b292      	uxth	r2, r2
 800389a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a0:	1c9a      	adds	r2, r3, #2
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038b8:	2301      	movs	r3, #1
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038bc:	f7fd fd92 	bl	80013e4 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d80b      	bhi.n	80038e4 <HAL_SPI_TransmitReceive+0x21c>
 80038cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d2:	d007      	beq.n	80038e4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80038e2:	e109      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d19f      	bne.n	800382e <HAL_SPI_TransmitReceive+0x166>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d199      	bne.n	800382e <HAL_SPI_TransmitReceive+0x166>
 80038fa:	e0e3      	b.n	8003ac4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_SPI_TransmitReceive+0x244>
 8003904:	8a7b      	ldrh	r3, [r7, #18]
 8003906:	2b01      	cmp	r3, #1
 8003908:	f040 80cf 	bne.w	8003aaa <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d912      	bls.n	800393c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391a:	881a      	ldrh	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003926:	1c9a      	adds	r2, r3, #2
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b02      	subs	r3, #2
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800393a:	e0b6      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	7812      	ldrb	r2, [r2, #0]
 8003948:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003962:	e0a2      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b02      	cmp	r3, #2
 8003970:	d134      	bne.n	80039dc <HAL_SPI_TransmitReceive+0x314>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d02f      	beq.n	80039dc <HAL_SPI_TransmitReceive+0x314>
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	2b01      	cmp	r3, #1
 8003980:	d12c      	bne.n	80039dc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d912      	bls.n	80039b2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	881a      	ldrh	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399c:	1c9a      	adds	r2, r3, #2
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b02      	subs	r3, #2
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039b0:	e012      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	330c      	adds	r3, #12
 80039bc:	7812      	ldrb	r2, [r2, #0]
 80039be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d148      	bne.n	8003a7c <HAL_SPI_TransmitReceive+0x3b4>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d042      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d923      	bls.n	8003a4a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	b292      	uxth	r2, r2
 8003a0e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a14:	1c9a      	adds	r2, r3, #2
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b02      	subs	r3, #2
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d81f      	bhi.n	8003a78 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	e016      	b.n	8003a78 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f103 020c 	add.w	r2, r3, #12
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	7812      	ldrb	r2, [r2, #0]
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a7c:	f7fd fcb2 	bl	80013e4 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d803      	bhi.n	8003a94 <HAL_SPI_TransmitReceive+0x3cc>
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d102      	bne.n	8003a9a <HAL_SPI_TransmitReceive+0x3d2>
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d107      	bne.n	8003aaa <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003aa8:	e026      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f47f af57 	bne.w	8003964 <HAL_SPI_TransmitReceive+0x29c>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f47f af50 	bne.w	8003964 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f93d 	bl	8003d48 <SPI_EndRxTxTransaction>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aee:	e003      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003b00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3728      	adds	r7, #40	@ 0x28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b1c:	f7fd fc62 	bl	80013e4 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	4413      	add	r3, r2
 8003b2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b2c:	f7fd fc5a 	bl	80013e4 <HAL_GetTick>
 8003b30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b32:	4b39      	ldr	r3, [pc, #228]	@ (8003c18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	015b      	lsls	r3, r3, #5
 8003b38:	0d1b      	lsrs	r3, r3, #20
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	fb02 f303 	mul.w	r3, r2, r3
 8003b40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b42:	e054      	b.n	8003bee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d050      	beq.n	8003bee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b4c:	f7fd fc4a 	bl	80013e4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d902      	bls.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d13d      	bne.n	8003bde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b7a:	d111      	bne.n	8003ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b84:	d004      	beq.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b8e:	d107      	bne.n	8003ba0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba8:	d10f      	bne.n	8003bca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e017      	b.n	8003c0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	bf0c      	ite	eq
 8003bfe:	2301      	moveq	r3, #1
 8003c00:	2300      	movne	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d19b      	bne.n	8003b44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000008 	.word	0x20000008

08003c1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	@ 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c2e:	f7fd fbd9 	bl	80013e4 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003c3e:	f7fd fbd1 	bl	80013e4 <HAL_GetTick>
 8003c42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	00da      	lsls	r2, r3, #3
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	0d1b      	lsrs	r3, r3, #20
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c64:	e060      	b.n	8003d28 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c6c:	d107      	bne.n	8003c7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d104      	bne.n	8003c7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d050      	beq.n	8003d28 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c86:	f7fd fbad 	bl	80013e4 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d902      	bls.n	8003c9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d13d      	bne.n	8003d18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003caa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cb4:	d111      	bne.n	8003cda <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cbe:	d004      	beq.n	8003cca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc8:	d107      	bne.n	8003cda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce2:	d10f      	bne.n	8003d04 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e010      	b.n	8003d3a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4013      	ands	r3, r2
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d196      	bne.n	8003c66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3728      	adds	r7, #40	@ 0x28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000008 	.word	0x20000008

08003d48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff ff5b 	bl	8003c1c <SPI_WaitFifoStateUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d70:	f043 0220 	orr.w	r2, r3, #32
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e046      	b.n	8003e0a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d7c:	4b25      	ldr	r3, [pc, #148]	@ (8003e14 <SPI_EndRxTxTransaction+0xcc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a25      	ldr	r2, [pc, #148]	@ (8003e18 <SPI_EndRxTxTransaction+0xd0>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	0d5b      	lsrs	r3, r3, #21
 8003d88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d9a:	d112      	bne.n	8003dc2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2200      	movs	r2, #0
 8003da4:	2180      	movs	r1, #128	@ 0x80
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7ff feb0 	bl	8003b0c <SPI_WaitFlagStateUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d016      	beq.n	8003de0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db6:	f043 0220 	orr.w	r2, r3, #32
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e023      	b.n	8003e0a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd8:	2b80      	cmp	r3, #128	@ 0x80
 8003dda:	d0f2      	beq.n	8003dc2 <SPI_EndRxTxTransaction+0x7a>
 8003ddc:	e000      	b.n	8003de0 <SPI_EndRxTxTransaction+0x98>
        break;
 8003dde:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7ff ff15 	bl	8003c1c <SPI_WaitFifoStateUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d007      	beq.n	8003e08 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfc:	f043 0220 	orr.w	r2, r3, #32
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e000      	b.n	8003e0a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000008 	.word	0x20000008
 8003e18:	165e9f81 	.word	0x165e9f81

08003e1c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	f107 001c 	add.w	r0, r7, #28
 8003e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003e32:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003e34:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003e36:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8003e3a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8003e3e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003e42:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8003e46:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	4b07      	ldr	r3, [pc, #28]	@ (8003e70 <SDMMC_Init+0x54>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	b004      	add	sp, #16
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	ffff8100 	.word	0xffff8100

08003e74 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2203      	movs	r2, #3
 8003e80:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003eca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003ed0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003ed6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <SDMMC_SendCommand+0x50>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	fffff000 	.word	0xfffff000

08003f00 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	b2db      	uxtb	r3, r3
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b085      	sub	sp, #20
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3314      	adds	r3, #20
 8003f28:	461a      	mov	r2, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
}  
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003f4e:	2310      	movs	r3, #16
 8003f50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003f52:	2340      	movs	r3, #64	@ 0x40
 8003f54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003f5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003f60:	f107 0308 	add.w	r3, r7, #8
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ffa0 	bl	8003eac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8003f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f70:	2110      	movs	r1, #16
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f90a 	bl	800418c <SDMMC_GetCmdResp1>
 8003f78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	@ 0x28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003f94:	2307      	movs	r3, #7
 8003f96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003f98:	2340      	movs	r3, #64	@ 0x40
 8003f9a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003fa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fa4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003fa6:	f107 0310 	add.w	r3, r7, #16
 8003faa:	4619      	mov	r1, r3
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7ff ff7d 	bl	8003eac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8003fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb6:	2107      	movs	r1, #7
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f8e7 	bl	800418c <SDMMC_GetCmdResp1>
 8003fbe:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3728      	adds	r7, #40	@ 0x28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b088      	sub	sp, #32
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003fe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003fe8:	f107 0308 	add.w	r3, r7, #8
 8003fec:	4619      	mov	r1, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff ff5c 	bl	8003eac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fb01 	bl	80045fc <SDMMC_GetCmdError>
 8003ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b088      	sub	sp, #32
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800400e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004014:	2308      	movs	r3, #8
 8004016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004018:	2340      	movs	r3, #64	@ 0x40
 800401a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004020:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004024:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004026:	f107 0308 	add.w	r3, r7, #8
 800402a:	4619      	mov	r1, r3
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff ff3d 	bl	8003eac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fa94 	bl	8004560 <SDMMC_GetCmdResp7>
 8004038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800403a:	69fb      	ldr	r3, [r7, #28]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004052:	2337      	movs	r3, #55	@ 0x37
 8004054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004056:	2340      	movs	r3, #64	@ 0x40
 8004058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800405e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004062:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004064:	f107 0308 	add.w	r3, r7, #8
 8004068:	4619      	mov	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ff1e 	bl	8003eac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004074:	2137      	movs	r1, #55	@ 0x37
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f888 	bl	800418c <SDMMC_GetCmdResp1>
 800407c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800407e:	69fb      	ldr	r3, [r7, #28]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3720      	adds	r7, #32
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	4b0d      	ldr	r3, [pc, #52]	@ (80040cc <SDMMC_CmdAppOperCommand+0x44>)
 8004096:	4313      	orrs	r3, r2
 8004098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800409a:	2329      	movs	r3, #41	@ 0x29
 800409c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800409e:	2340      	movs	r3, #64	@ 0x40
 80040a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80040a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80040ac:	f107 0308 	add.w	r3, r7, #8
 80040b0:	4619      	mov	r1, r3
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff fefa 	bl	8003eac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f99d 	bl	80043f8 <SDMMC_GetCmdResp3>
 80040be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040c0:	69fb      	ldr	r3, [r7, #28]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	80100000 	.word	0x80100000

080040d0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80040dc:	2302      	movs	r3, #2
 80040de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80040e0:	23c0      	movs	r3, #192	@ 0xc0
 80040e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80040e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80040ee:	f107 0308 	add.w	r3, r7, #8
 80040f2:	4619      	mov	r1, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fed9 	bl	8003eac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f934 	bl	8004368 <SDMMC_GetCmdResp2>
 8004100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004102:	69fb      	ldr	r3, [r7, #28]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800411a:	2309      	movs	r3, #9
 800411c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800411e:	23c0      	movs	r3, #192	@ 0xc0
 8004120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800412a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800412c:	f107 0308 	add.w	r3, r7, #8
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff feba 	bl	8003eac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f915 	bl	8004368 <SDMMC_GetCmdResp2>
 800413e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004140:	69fb      	ldr	r3, [r7, #28]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b088      	sub	sp, #32
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004158:	2303      	movs	r3, #3
 800415a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800415c:	2340      	movs	r3, #64	@ 0x40
 800415e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004168:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800416a:	f107 0308 	add.w	r3, r7, #8
 800416e:	4619      	mov	r1, r3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fe9b 	bl	8003eac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	2103      	movs	r1, #3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f97a 	bl	8004474 <SDMMC_GetCmdResp6>
 8004180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004182:	69fb      	ldr	r3, [r7, #28]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3720      	adds	r7, #32
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	460b      	mov	r3, r1
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800419a:	4b70      	ldr	r3, [pc, #448]	@ (800435c <SDMMC_GetCmdResp1+0x1d0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a70      	ldr	r2, [pc, #448]	@ (8004360 <SDMMC_GetCmdResp1+0x1d4>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	0a5a      	lsrs	r2, r3, #9
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	fb02 f303 	mul.w	r3, r2, r3
 80041ac:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	1e5a      	subs	r2, r3, #1
 80041b2:	61fa      	str	r2, [r7, #28]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80041b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80041bc:	e0c9      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0ef      	beq.n	80041ae <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ea      	bne.n	80041ae <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d004      	beq.n	80041ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2204      	movs	r2, #4
 80041e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041ea:	2304      	movs	r3, #4
 80041ec:	e0b1      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d004      	beq.n	8004204 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004200:	2301      	movs	r3, #1
 8004202:	e0a6      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	22c5      	movs	r2, #197	@ 0xc5
 8004208:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f7ff fe78 	bl	8003f00 <SDMMC_GetCommandResponse>
 8004210:	4603      	mov	r3, r0
 8004212:	461a      	mov	r2, r3
 8004214:	7afb      	ldrb	r3, [r7, #11]
 8004216:	4293      	cmp	r3, r2
 8004218:	d001      	beq.n	800421e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800421a:	2301      	movs	r3, #1
 800421c:	e099      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800421e:	2100      	movs	r1, #0
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff fe7a 	bl	8003f1a <SDMMC_GetResponse>
 8004226:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4b4e      	ldr	r3, [pc, #312]	@ (8004364 <SDMMC_GetCmdResp1+0x1d8>)
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004232:	2300      	movs	r3, #0
 8004234:	e08d      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	da02      	bge.n	8004242 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800423c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004240:	e087      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800424c:	2340      	movs	r3, #64	@ 0x40
 800424e:	e080      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	e079      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004268:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800426c:	e071      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004278:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800427c:	e069      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800428c:	e061      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004298:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800429c:	e059      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80042a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042ac:	e051      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80042b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042bc:	e049      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80042c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80042cc:	e041      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80042d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042dc:	e039      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80042e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042ec:	e031      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80042f8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80042fc:	e029      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004308:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800430c:	e021      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004318:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800431c:	e019      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004328:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800432c:	e011      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004338:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800433c:	e009      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004348:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800434c:	e001      	b.n	8004352 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800434e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004352:	4618      	mov	r0, r3
 8004354:	3720      	adds	r7, #32
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000008 	.word	0x20000008
 8004360:	10624dd3 	.word	0x10624dd3
 8004364:	fdffe008 	.word	0xfdffe008

08004368 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004370:	4b1f      	ldr	r3, [pc, #124]	@ (80043f0 <SDMMC_GetCmdResp2+0x88>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1f      	ldr	r2, [pc, #124]	@ (80043f4 <SDMMC_GetCmdResp2+0x8c>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	0a5b      	lsrs	r3, r3, #9
 800437c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004380:	fb02 f303 	mul.w	r3, r2, r3
 8004384:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	60fa      	str	r2, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004390:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004394:	e026      	b.n	80043e4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0ef      	beq.n	8004386 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ea      	bne.n	8004386 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2204      	movs	r2, #4
 80043c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043c2:	2304      	movs	r3, #4
 80043c4:	e00e      	b.n	80043e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043d8:	2301      	movs	r3, #1
 80043da:	e003      	b.n	80043e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	22c5      	movs	r2, #197	@ 0xc5
 80043e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	20000008 	.word	0x20000008
 80043f4:	10624dd3 	.word	0x10624dd3

080043f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004400:	4b1a      	ldr	r3, [pc, #104]	@ (800446c <SDMMC_GetCmdResp3+0x74>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1a      	ldr	r2, [pc, #104]	@ (8004470 <SDMMC_GetCmdResp3+0x78>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	0a5b      	lsrs	r3, r3, #9
 800440c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004410:	fb02 f303 	mul.w	r3, r2, r3
 8004414:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1e5a      	subs	r2, r3, #1
 800441a:	60fa      	str	r2, [r7, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004420:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004424:	e01b      	b.n	800445e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800442a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0ef      	beq.n	8004416 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1ea      	bne.n	8004416 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d004      	beq.n	8004456 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2204      	movs	r2, #4
 8004450:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004452:	2304      	movs	r3, #4
 8004454:	e003      	b.n	800445e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	22c5      	movs	r2, #197	@ 0xc5
 800445a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000008 	.word	0x20000008
 8004470:	10624dd3 	.word	0x10624dd3

08004474 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	460b      	mov	r3, r1
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004482:	4b35      	ldr	r3, [pc, #212]	@ (8004558 <SDMMC_GetCmdResp6+0xe4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a35      	ldr	r2, [pc, #212]	@ (800455c <SDMMC_GetCmdResp6+0xe8>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	0a5b      	lsrs	r3, r3, #9
 800448e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004492:	fb02 f303 	mul.w	r3, r2, r3
 8004496:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	1e5a      	subs	r2, r3, #1
 800449c:	61fa      	str	r2, [r7, #28]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80044a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80044a6:	e052      	b.n	800454e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ef      	beq.n	8004498 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1ea      	bne.n	8004498 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d004      	beq.n	80044d8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2204      	movs	r2, #4
 80044d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80044d4:	2304      	movs	r3, #4
 80044d6:	e03a      	b.n	800454e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e02f      	b.n	800454e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff fd06 	bl	8003f00 <SDMMC_GetCommandResponse>
 80044f4:	4603      	mov	r3, r0
 80044f6:	461a      	mov	r2, r3
 80044f8:	7afb      	ldrb	r3, [r7, #11]
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d001      	beq.n	8004502 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044fe:	2301      	movs	r3, #1
 8004500:	e025      	b.n	800454e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	22c5      	movs	r2, #197	@ 0xc5
 8004506:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004508:	2100      	movs	r1, #0
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff fd05 	bl	8003f1a <SDMMC_GetResponse>
 8004510:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	0c1b      	lsrs	r3, r3, #16
 8004520:	b29a      	uxth	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004526:	2300      	movs	r3, #0
 8004528:	e011      	b.n	800454e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004534:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004538:	e009      	b.n	800454e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004544:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004548:	e001      	b.n	800454e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800454a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800454e:	4618      	mov	r0, r3
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000008 	.word	0x20000008
 800455c:	10624dd3 	.word	0x10624dd3

08004560 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004568:	4b22      	ldr	r3, [pc, #136]	@ (80045f4 <SDMMC_GetCmdResp7+0x94>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a22      	ldr	r2, [pc, #136]	@ (80045f8 <SDMMC_GetCmdResp7+0x98>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	0a5b      	lsrs	r3, r3, #9
 8004574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004578:	fb02 f303 	mul.w	r3, r2, r3
 800457c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1e5a      	subs	r2, r3, #1
 8004582:	60fa      	str	r2, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d102      	bne.n	800458e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004588:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800458c:	e02c      	b.n	80045e8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004592:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0ef      	beq.n	800457e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ea      	bne.n	800457e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d004      	beq.n	80045be <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2204      	movs	r2, #4
 80045b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045ba:	2304      	movs	r3, #4
 80045bc:	e014      	b.n	80045e8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d004      	beq.n	80045d4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e009      	b.n	80045e8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2240      	movs	r2, #64	@ 0x40
 80045e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80045e6:	2300      	movs	r3, #0
  
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	20000008 	.word	0x20000008
 80045f8:	10624dd3 	.word	0x10624dd3

080045fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004604:	4b11      	ldr	r3, [pc, #68]	@ (800464c <SDMMC_GetCmdError+0x50>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a11      	ldr	r2, [pc, #68]	@ (8004650 <SDMMC_GetCmdError+0x54>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	0a5b      	lsrs	r3, r3, #9
 8004610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004614:	fb02 f303 	mul.w	r3, r2, r3
 8004618:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1e5a      	subs	r2, r3, #1
 800461e:	60fa      	str	r2, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004624:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004628:	e009      	b.n	800463e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f1      	beq.n	800461a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	22c5      	movs	r2, #197	@ 0xc5
 800463a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000008 	.word	0x20000008
 8004650:	10624dd3 	.word	0x10624dd3

08004654 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS
disk_status(BYTE pdrv /* Physical drive nmuber to identify the drive */
)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
  if (pdrv)
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <disk_status+0x14>
  {
    return STA_NOINIT;
 8004664:	2301      	movs	r3, #1
 8004666:	e002      	b.n	800466e <disk_status+0x1a>
  }
  return Stat;
 8004668:	4b04      	ldr	r3, [pc, #16]	@ (800467c <disk_status+0x28>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	b2db      	uxtb	r3, r3
}
 800466e:	4618      	mov	r0, r3
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20000011 	.word	0x20000011

08004680 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS
disk_initialize(BYTE pdrv /* Physical drive nmuber to identify the drive */
)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800468a:	4b0b      	ldr	r3, [pc, #44]	@ (80046b8 <disk_initialize+0x38>)
 800468c:	2201      	movs	r2, #1
 800468e:	701a      	strb	r2, [r3, #0]
  if (BSP_SD_SPI_Init() == MSD_OK)
 8004690:	f7fc f904 	bl	800089c <BSP_SD_SPI_Init>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d107      	bne.n	80046aa <disk_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800469a:	4b07      	ldr	r3, [pc, #28]	@ (80046b8 <disk_initialize+0x38>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	4b04      	ldr	r3, [pc, #16]	@ (80046b8 <disk_initialize+0x38>)
 80046a8:	701a      	strb	r2, [r3, #0]
  }
  return Stat;
 80046aa:	4b03      	ldr	r3, [pc, #12]	@ (80046b8 <disk_initialize+0x38>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	b2db      	uxtb	r3, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000011 	.word	0x20000011

080046bc <disk_read>:
disk_read(BYTE  pdrv,   /* Physical drive nmuber to identify the drive */
          BYTE *buff,   /* Data buffer to store read data */
          LBA_t sector, /* Start sector in LBA */
          UINT  count   /* Number of sectors to read */
)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	4603      	mov	r3, r0
 80046ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	75fb      	strb	r3, [r7, #23]

  if (BSP_SD_SPI_ReadBlocks(
 80046d0:	f247 5330 	movw	r3, #30000	@ 0x7530
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	68b8      	ldr	r0, [r7, #8]
 80046da:	f7fc fa19 	bl	8000b10 <BSP_SD_SPI_ReadBlocks>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <disk_read+0x2c>
          (uint32_t *)buff, (uint32_t)(sector), count, SD_TIMEOUT)
      == MSD_OK)
  {
    res = RES_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <disk_write>:
 * @retval DRESULT: Operation result
 */

DRESULT
disk_write(BYTE pdrv, const BYTE *buff, LBA_t sector, UINT count)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b086      	sub	sp, #24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	4603      	mov	r3, r0
 8004700:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	75fb      	strb	r3, [r7, #23]

  if (BSP_SD_SPI_WriteBlocks(
 8004706:	f247 5330 	movw	r3, #30000	@ 0x7530
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	68b8      	ldr	r0, [r7, #8]
 8004710:	f7fc fa52 	bl	8000bb8 <BSP_SD_SPI_WriteBlocks>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <disk_write+0x2c>
          (uint32_t *)buff, (uint32_t)(sector), count, SD_TIMEOUT)
      == MSD_OK)
  {
    res = RES_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800471e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <disk_ioctl>:
DRESULT
disk_ioctl(BYTE  pdrv, /* Physical drive nmuber (0..) */
           BYTE  cmd,  /* Control code */
           void *buff  /* Buffer to send/receive control data */
)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	603a      	str	r2, [r7, #0]
 8004732:	71fb      	strb	r3, [r7, #7]
 8004734:	460b      	mov	r3, r1
 8004736:	71bb      	strb	r3, [r7, #6]
  DRESULT               res = RES_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	75fb      	strb	r3, [r7, #23]
  BSP_SD_SPI_CardInfo CardInfo;

  if (Stat & STA_NOINIT)
 800473c:	4b22      	ldr	r3, [pc, #136]	@ (80047c8 <disk_ioctl+0xa0>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <disk_ioctl+0x26>
  {
    return RES_NOTRDY;
 800474a:	2303      	movs	r3, #3
 800474c:	e037      	b.n	80047be <disk_ioctl+0x96>
  }

  switch (cmd)
 800474e:	79bb      	ldrb	r3, [r7, #6]
 8004750:	2b03      	cmp	r3, #3
 8004752:	d831      	bhi.n	80047b8 <disk_ioctl+0x90>
 8004754:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <disk_ioctl+0x34>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	0800476d 	.word	0x0800476d
 8004760:	08004773 	.word	0x08004773
 8004764:	08004789 	.word	0x08004789
 8004768:	080047a1 	.word	0x080047a1
  {
    /* Make sure that no pending write process */
    case CTRL_SYNC:
      res = RES_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	75fb      	strb	r3, [r7, #23]
      break;
 8004770:	e024      	b.n	80047bc <disk_ioctl+0x94>

    /* Get number of sectors on the disk (DWORD) */
    case GET_SECTOR_COUNT:
      BSP_SD_SPI_GetCardInfo(&CardInfo);
 8004772:	f107 0308 	add.w	r3, r7, #8
 8004776:	4618      	mov	r0, r3
 8004778:	f7fc fa94 	bl	8000ca4 <BSP_SD_SPI_GetCardInfo>
      *(DWORD *)buff = CardInfo.LogBlockNbr;
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	601a      	str	r2, [r3, #0]
      res            = RES_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	75fb      	strb	r3, [r7, #23]
      break;
 8004786:	e019      	b.n	80047bc <disk_ioctl+0x94>

    /* Get R/W sector size (WORD) */
    case GET_SECTOR_SIZE:
      BSP_SD_SPI_GetCardInfo(&CardInfo);
 8004788:	f107 0308 	add.w	r3, r7, #8
 800478c:	4618      	mov	r0, r3
 800478e:	f7fc fa89 	bl	8000ca4 <BSP_SD_SPI_GetCardInfo>
      *(WORD *)buff = CardInfo.LogBlockSize;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	b29a      	uxth	r2, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	801a      	strh	r2, [r3, #0]
      res           = RES_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	75fb      	strb	r3, [r7, #23]
      break;
 800479e:	e00d      	b.n	80047bc <disk_ioctl+0x94>

    /* Get erase block size in unit of sector (DWORD) */
    case GET_BLOCK_SIZE:
      BSP_SD_SPI_GetCardInfo(&CardInfo);
 80047a0:	f107 0308 	add.w	r3, r7, #8
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fc fa7d 	bl	8000ca4 <BSP_SD_SPI_GetCardInfo>
      *(DWORD *)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	0a5a      	lsrs	r2, r3, #9
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	601a      	str	r2, [r3, #0]
      res            = RES_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	75fb      	strb	r3, [r7, #23]
      break;
 80047b6:	e001      	b.n	80047bc <disk_ioctl+0x94>

    default:
      res = RES_PARERR;
 80047b8:	2304      	movs	r3, #4
 80047ba:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000011 	.word	0x20000011

080047cc <get_fattime>:
 * @param  None
 * @retval Time in DWORD
 */
__weak DWORD
get_fattime (void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return 0;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3301      	adds	r3, #1
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80047ec:	89fb      	ldrh	r3, [r7, #14]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	b21a      	sxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	b21b      	sxth	r3, r3
 80047f8:	4313      	orrs	r3, r2
 80047fa:	b21b      	sxth	r3, r3
 80047fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80047fe:	89fb      	ldrh	r3, [r7, #14]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3303      	adds	r3, #3
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	3202      	adds	r2, #2
 8004824:	7812      	ldrb	r2, [r2, #0]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	3201      	adds	r2, #1
 8004832:	7812      	ldrb	r2, [r2, #0]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	7812      	ldrb	r2, [r2, #0]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
	return rv;
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	460b      	mov	r3, r1
 800485c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	887a      	ldrh	r2, [r7, #2]
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	887b      	ldrh	r3, [r7, #2]
 800486c:	0a1b      	lsrs	r3, r3, #8
 800486e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	887a      	ldrh	r2, [r7, #2]
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	0a1b      	lsrs	r3, r3, #8
 80048b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	0a1b      	lsrs	r3, r3, #8
 80048c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	701a      	strb	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <dbc_1st+0x14>
 80048f0:	2300      	movs	r3, #0
 80048f2:	e000      	b.n	80048f6 <dbc_1st+0x16>
#endif
	return 0;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	4603      	mov	r3, r0
 800490a:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <dbc_2nd+0x14>
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <dbc_2nd+0x16>
#endif
	return 0;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	617a      	str	r2, [r7, #20]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 800493c:	8a7b      	ldrh	r3, [r7, #18]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff ffcd 	bl	80048e0 <dbc_1st>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d015      	beq.n	8004978 <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	617a      	str	r2, [r7, #20]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 8004956:	7c7b      	ldrb	r3, [r7, #17]
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff ffd2 	bl	8004902 <dbc_2nd>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <tchar2uni+0x46>
 8004964:	f04f 33ff 	mov.w	r3, #4294967295
 8004968:	e01d      	b.n	80049a6 <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 800496a:	8a7b      	ldrh	r3, [r7, #18]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	b29a      	uxth	r2, r3
 8004970:	7c7b      	ldrb	r3, [r7, #17]
 8004972:	b29b      	uxth	r3, r3
 8004974:	4413      	add	r3, r2
 8004976:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 8004978:	8a7b      	ldrh	r3, [r7, #18]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00d      	beq.n	800499a <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 800497e:	8a7b      	ldrh	r3, [r7, #18]
 8004980:	f240 3152 	movw	r1, #850	@ 0x352
 8004984:	4618      	mov	r0, r3
 8004986:	f002 fb57 	bl	8007038 <ff_oem2uni>
 800498a:	4603      	mov	r3, r0
 800498c:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 800498e:	8a7b      	ldrh	r3, [r7, #18]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d102      	bne.n	800499a <tchar2uni+0x76>
 8004994:	f04f 33ff 	mov.w	r3, #4294967295
 8004998:	e005      	b.n	80049a6 <tchar2uni+0x82>
	}
	uc = wc;
 800499a:	8a7b      	ldrh	r3, [r7, #18]
 800499c:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	601a      	str	r2, [r3, #0]
	return uc;
 80049a4:	68fb      	ldr	r3, [r7, #12]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	791b      	ldrb	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d02c      	beq.n	8004a1c <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	7858      	ldrb	r0, [r3, #1]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049d0:	2301      	movs	r3, #1
 80049d2:	f7ff fe8e 	bl	80046f2 <disk_write>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d11d      	bne.n	8004a18 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ea:	1ad2      	subs	r2, r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d213      	bcs.n	8004a1c <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	78db      	ldrb	r3, [r3, #3]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d10f      	bne.n	8004a1c <sync_window+0x6e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	7858      	ldrb	r0, [r3, #1]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	441a      	add	r2, r3
 8004a10:	2301      	movs	r3, #1
 8004a12:	f7ff fe6e 	bl	80046f2 <disk_write>
 8004a16:	e001      	b.n	8004a1c <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d01b      	beq.n	8004a76 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff ffb5 	bl	80049ae <sync_window>
 8004a44:	4603      	mov	r3, r0
 8004a46:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d113      	bne.n	8004a76 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	7858      	ldrb	r0, [r3, #1]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004a58:	2301      	movs	r3, #1
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	f7ff fe2e 	bl	80046bc <disk_read>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8004a66:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff ff90 	bl	80049ae <sync_window>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d158      	bne.n	8004b4a <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d148      	bne.n	8004b32 <sync_fs+0xb2>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	795b      	ldrb	r3, [r3, #5]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d144      	bne.n	8004b32 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3338      	adds	r3, #56	@ 0x38
 8004aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f002 fb90 	bl	80071d8 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3338      	adds	r3, #56	@ 0x38
 8004abc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004ac0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fec4 	bl	8004852 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3338      	adds	r3, #56	@ 0x38
 8004ace:	4921      	ldr	r1, [pc, #132]	@ (8004b54 <sync_fs+0xd4>)
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fed9 	bl	8004888 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3338      	adds	r3, #56	@ 0x38
 8004ada:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004ade:	491e      	ldr	r1, [pc, #120]	@ (8004b58 <sync_fs+0xd8>)
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fed1 	bl	8004888 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3338      	adds	r3, #56	@ 0x38
 8004aea:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	4619      	mov	r1, r3
 8004af4:	4610      	mov	r0, r2
 8004af6:	f7ff fec7 	bl	8004888 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3338      	adds	r3, #56	@ 0x38
 8004afe:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	4619      	mov	r1, r3
 8004b08:	4610      	mov	r0, r2
 8004b0a:	f7ff febd 	bl	8004888 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	7858      	ldrb	r0, [r3, #1]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b26:	2301      	movs	r3, #1
 8004b28:	f7ff fde3 	bl	80046f2 <disk_write>
			fs->fsi_flag = 0;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	2200      	movs	r2, #0
 8004b38:	2100      	movs	r1, #0
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fdf4 	bl	8004728 <disk_ioctl>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <sync_fs+0xca>
 8004b46:	2301      	movs	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	41615252 	.word	0x41615252
 8004b58:	61417272 	.word	0x61417272

08004b5c <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	3b02      	subs	r3, #2
 8004b6a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	3b02      	subs	r3, #2
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d301      	bcc.n	8004b7c <clst2sect+0x20>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e008      	b.n	8004b8e <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	895b      	ldrh	r3, [r3, #10]
 8004b84:	4619      	mov	r1, r3
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	4413      	add	r3, r2
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d904      	bls.n	8004bba <get_fat+0x20>
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d302      	bcc.n	8004bc0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004bba:	2301      	movs	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	e08e      	b.n	8004cde <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d061      	beq.n	8004c92 <get_fat+0xf8>
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	dc7b      	bgt.n	8004cca <get_fat+0x130>
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d002      	beq.n	8004bdc <get_fat+0x42>
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d041      	beq.n	8004c5e <get_fat+0xc4>
 8004bda:	e076      	b.n	8004cca <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	085b      	lsrs	r3, r3, #1
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	0a5b      	lsrs	r3, r3, #9
 8004bf2:	4413      	add	r3, r2
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6938      	ldr	r0, [r7, #16]
 8004bf8:	f7ff ff15 	bl	8004a26 <move_window>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d166      	bne.n	8004cd0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	60fa      	str	r2, [r7, #12]
 8004c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c14:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	0a5b      	lsrs	r3, r3, #9
 8004c1e:	4413      	add	r3, r2
 8004c20:	4619      	mov	r1, r3
 8004c22:	6938      	ldr	r0, [r7, #16]
 8004c24:	f7ff feff 	bl	8004a26 <move_window>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d152      	bne.n	8004cd4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4413      	add	r3, r2
 8004c38:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <get_fat+0xba>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	e002      	b.n	8004c5a <get_fat+0xc0>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c5a:	617b      	str	r3, [r7, #20]
			break;
 8004c5c:	e03f      	b.n	8004cde <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	0a1b      	lsrs	r3, r3, #8
 8004c66:	4413      	add	r3, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6938      	ldr	r0, [r7, #16]
 8004c6c:	f7ff fedb 	bl	8004a26 <move_window>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d130      	bne.n	8004cd8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004c84:	4413      	add	r3, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fda8 	bl	80047dc <ld_word>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	617b      	str	r3, [r7, #20]
			break;
 8004c90:	e025      	b.n	8004cde <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	09db      	lsrs	r3, r3, #7
 8004c9a:	4413      	add	r3, r2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6938      	ldr	r0, [r7, #16]
 8004ca0:	f7ff fec1 	bl	8004a26 <move_window>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d118      	bne.n	8004cdc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004cb8:	4413      	add	r3, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fda6 	bl	800480c <ld_dword>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004cc6:	617b      	str	r3, [r7, #20]
			break;
 8004cc8:	e009      	b.n	8004cde <get_fat+0x144>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 8004cca:	2301      	movs	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e006      	b.n	8004cde <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cd0:	bf00      	nop
 8004cd2:	e004      	b.n	8004cde <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cd4:	bf00      	nop
 8004cd6:	e002      	b.n	8004cde <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004cd8:	bf00      	nop
 8004cda:	e000      	b.n	8004cde <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004cdc:	bf00      	nop
		}
	}

	return val;
 8004cde:	697b      	ldr	r3, [r7, #20]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004ce8:	b590      	push	{r4, r7, lr}
 8004cea:	b089      	sub	sp, #36	@ 0x24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	f240 80d9 	bls.w	8004eb2 <put_fat+0x1ca>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	f080 80d3 	bcs.w	8004eb2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	f000 8096 	beq.w	8004e42 <put_fat+0x15a>
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	f300 80cb 	bgt.w	8004eb2 <put_fat+0x1ca>
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d002      	beq.n	8004d26 <put_fat+0x3e>
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d06e      	beq.n	8004e02 <put_fat+0x11a>
 8004d24:	e0c5      	b.n	8004eb2 <put_fat+0x1ca>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	085b      	lsrs	r3, r3, #1
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4413      	add	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	0a5b      	lsrs	r3, r3, #9
 8004d3c:	4413      	add	r3, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff fe70 	bl	8004a26 <move_window>
 8004d46:	4603      	mov	r3, r0
 8004d48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d4a:	7ffb      	ldrb	r3, [r7, #31]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f040 80a9 	bne.w	8004ea4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	1c59      	adds	r1, r3, #1
 8004d5c:	61b9      	str	r1, [r7, #24]
 8004d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d62:	4413      	add	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00d      	beq.n	8004d8c <put_fat+0xa4>
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	b25b      	sxtb	r3, r3
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	b25a      	sxtb	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	b25b      	sxtb	r3, r3
 8004d84:	4313      	orrs	r3, r2
 8004d86:	b25b      	sxtb	r3, r3
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	e001      	b.n	8004d90 <put_fat+0xa8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	0a5b      	lsrs	r3, r3, #9
 8004da2:	4413      	add	r3, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f7ff fe3d 	bl	8004a26 <move_window>
 8004dac:	4603      	mov	r3, r0
 8004dae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004db0:	7ffb      	ldrb	r3, [r7, #31]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d178      	bne.n	8004ea8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc2:	4413      	add	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <put_fat+0xf0>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	091b      	lsrs	r3, r3, #4
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e00e      	b.n	8004df6 <put_fat+0x10e>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	b25b      	sxtb	r3, r3
 8004dde:	f023 030f 	bic.w	r3, r3, #15
 8004de2:	b25a      	sxtb	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	0a1b      	lsrs	r3, r3, #8
 8004de8:	b25b      	sxtb	r3, r3
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	b25b      	sxtb	r3, r3
 8004df0:	4313      	orrs	r3, r2
 8004df2:	b25b      	sxtb	r3, r3
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	711a      	strb	r2, [r3, #4]
			break;
 8004e00:	e057      	b.n	8004eb2 <put_fat+0x1ca>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	0a1b      	lsrs	r3, r3, #8
 8004e0a:	4413      	add	r3, r2
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7ff fe09 	bl	8004a26 <move_window>
 8004e14:	4603      	mov	r3, r0
 8004e16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e18:	7ffb      	ldrb	r3, [r7, #31]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d146      	bne.n	8004eac <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004e2c:	4413      	add	r3, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	b292      	uxth	r2, r2
 8004e32:	4611      	mov	r1, r2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fd0c 	bl	8004852 <st_word>
			fs->wflag = 1;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	711a      	strb	r2, [r3, #4]
			break;
 8004e40:	e037      	b.n	8004eb2 <put_fat+0x1ca>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	09db      	lsrs	r3, r3, #7
 8004e4a:	4413      	add	r3, r2
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f7ff fde9 	bl	8004a26 <move_window>
 8004e54:	4603      	mov	r3, r0
 8004e56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e58:	7ffb      	ldrb	r3, [r7, #31]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d128      	bne.n	8004eb0 <put_fat+0x1c8>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004e72:	4413      	add	r3, r2
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff fcc9 	bl	800480c <ld_dword>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004e80:	4323      	orrs	r3, r4
 8004e82:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004e92:	4413      	add	r3, r2
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fcf6 	bl	8004888 <st_dword>
			fs->wflag = 1;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	711a      	strb	r2, [r3, #4]
			break;
 8004ea2:	e006      	b.n	8004eb2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004ea4:	bf00      	nop
 8004ea6:	e004      	b.n	8004eb2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004ea8:	bf00      	nop
 8004eaa:	e002      	b.n	8004eb2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004eac:	bf00      	nop
 8004eae:	e000      	b.n	8004eb2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004eb0:	bf00      	nop
		}
	}
	return res;
 8004eb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3724      	adds	r7, #36	@ 0x24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd90      	pop	{r4, r7, pc}

08004ebc <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d904      	bls.n	8004ee2 <remove_chain+0x26>
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d301      	bcc.n	8004ee6 <remove_chain+0x2a>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e04b      	b.n	8004f7e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00c      	beq.n	8004f06 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	69b8      	ldr	r0, [r7, #24]
 8004ef4:	f7ff fef8 	bl	8004ce8 <put_fat>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004efc:	7ffb      	ldrb	r3, [r7, #31]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <remove_chain+0x4a>
 8004f02:	7ffb      	ldrb	r3, [r7, #31]
 8004f04:	e03b      	b.n	8004f7e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f7ff fe46 	bl	8004b9a <get_fat>
 8004f0e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d031      	beq.n	8004f7a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <remove_chain+0x64>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e02e      	b.n	8004f7e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f26:	d101      	bne.n	8004f2c <remove_chain+0x70>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e028      	b.n	8004f7e <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	69b8      	ldr	r0, [r7, #24]
 8004f32:	f7ff fed9 	bl	8004ce8 <put_fat>
 8004f36:	4603      	mov	r3, r0
 8004f38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004f3a:	7ffb      	ldrb	r3, [r7, #31]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <remove_chain+0x88>
 8004f40:	7ffb      	ldrb	r3, [r7, #31]
 8004f42:	e01c      	b.n	8004f7e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	3b02      	subs	r3, #2
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d20b      	bcs.n	8004f6a <remove_chain+0xae>
			fs->free_clst++;
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	795b      	ldrb	r3, [r3, #5]
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d3c6      	bcc.n	8004f06 <remove_chain+0x4a>
 8004f78:	e000      	b.n	8004f7c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004f7a:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3720      	adds	r7, #32
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b088      	sub	sp, #32
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10d      	bne.n	8004fb8 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d004      	beq.n	8004fb2 <create_chain+0x2c>
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d31b      	bcc.n	8004fea <create_chain+0x64>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	e018      	b.n	8004fea <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004fb8:	6839      	ldr	r1, [r7, #0]
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff fded 	bl	8004b9a <get_fat>
 8004fc0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d801      	bhi.n	8004fcc <create_chain+0x46>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0a9      	b.n	8005120 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d101      	bne.n	8004fd8 <create_chain+0x52>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	e0a3      	b.n	8005120 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d201      	bcs.n	8004fe6 <create_chain+0x60>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	e09c      	b.n	8005120 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <create_chain+0x70>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e094      	b.n	8005120 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d129      	bne.n	8005056 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	3301      	adds	r3, #1
 8005006:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	429a      	cmp	r2, r3
 8005010:	d301      	bcc.n	8005016 <create_chain+0x90>
 8005012:	2302      	movs	r3, #2
 8005014:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8005016:	69f9      	ldr	r1, [r7, #28]
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff fdbe 	bl	8004b9a <get_fat>
 800501e:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d003      	beq.n	800502e <create_chain+0xa8>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d101      	bne.n	8005032 <create_chain+0xac>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	e076      	b.n	8005120 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00e      	beq.n	8005056 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d906      	bls.n	8005052 <create_chain+0xcc>
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	429a      	cmp	r2, r3
 800504c:	d201      	bcs.n	8005052 <create_chain+0xcc>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d129      	bne.n	80050b0 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	3301      	adds	r3, #1
 8005064:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	429a      	cmp	r2, r3
 800506e:	d307      	bcc.n	8005080 <create_chain+0xfa>
					ncl = 2;
 8005070:	2302      	movs	r3, #2
 8005072:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	429a      	cmp	r2, r3
 800507a:	d901      	bls.n	8005080 <create_chain+0xfa>
 800507c:	2300      	movs	r3, #0
 800507e:	e04f      	b.n	8005120 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005080:	69f9      	ldr	r1, [r7, #28]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fd89 	bl	8004b9a <get_fat>
 8005088:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00e      	beq.n	80050ae <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d003      	beq.n	800509e <create_chain+0x118>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d101      	bne.n	80050a2 <create_chain+0x11c>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	e03e      	b.n	8005120 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d1da      	bne.n	8005060 <create_chain+0xda>
 80050aa:	2300      	movs	r3, #0
 80050ac:	e038      	b.n	8005120 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 80050ae:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80050b0:	f04f 32ff 	mov.w	r2, #4294967295
 80050b4:	69f9      	ldr	r1, [r7, #28]
 80050b6:	6938      	ldr	r0, [r7, #16]
 80050b8:	f7ff fe16 	bl	8004ce8 <put_fat>
 80050bc:	4603      	mov	r3, r0
 80050be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <create_chain+0x154>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d006      	beq.n	80050da <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	6938      	ldr	r0, [r7, #16]
 80050d2:	f7ff fe09 	bl	8004ce8 <put_fat>
 80050d6:	4603      	mov	r3, r0
 80050d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80050da:	7dfb      	ldrb	r3, [r7, #23]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d116      	bne.n	800510e <create_chain+0x188>
		fs->last_clst = ncl;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	3b02      	subs	r3, #2
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d804      	bhi.n	80050fe <create_chain+0x178>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	1e5a      	subs	r2, r3, #1
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	795b      	ldrb	r3, [r3, #5]
 8005102:	f043 0301 	orr.w	r3, r3, #1
 8005106:	b2da      	uxtb	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	715a      	strb	r2, [r3, #5]
 800510c:	e007      	b.n	800511e <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800510e:	7dfb      	ldrb	r3, [r7, #23]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d102      	bne.n	800511a <create_chain+0x194>
 8005114:	f04f 33ff 	mov.w	r3, #4294967295
 8005118:	e000      	b.n	800511c <create_chain+0x196>
 800511a:	2301      	movs	r3, #1
 800511c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800511e:	69fb      	ldr	r3, [r7, #28]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3720      	adds	r7, #32
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff fc3b 	bl	80049ae <sync_window>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <dir_clear+0x1a>
 800513e:	2301      	movs	r3, #1
 8005140:	e036      	b.n	80051b0 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff fd09 	bl	8004b5c <clst2sect>
 800514a:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	635a      	str	r2, [r3, #52]	@ 0x34
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3338      	adds	r3, #56	@ 0x38
 8005156:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800515a:	2100      	movs	r1, #0
 800515c:	4618      	mov	r0, r3
 800515e:	f002 f83b 	bl	80071d8 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3338      	adds	r3, #56	@ 0x38
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	2301      	movs	r3, #1
 800516a:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	e003      	b.n	800517a <dir_clear+0x52>
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4413      	add	r3, r2
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	895b      	ldrh	r3, [r3, #10]
 800517e:	461a      	mov	r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4293      	cmp	r3, r2
 8005184:	d20b      	bcs.n	800519e <dir_clear+0x76>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	7858      	ldrb	r0, [r3, #1]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	441a      	add	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	68f9      	ldr	r1, [r7, #12]
 8005194:	f7ff faad 	bl	80046f2 <disk_write>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0e9      	beq.n	8005172 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	895b      	ldrh	r3, [r3, #10]
 80051a2:	461a      	mov	r2, r3
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4293      	cmp	r3, r2
 80051a8:	bf14      	ite	ne
 80051aa:	2301      	movne	r3, #1
 80051ac:	2300      	moveq	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051ce:	d204      	bcs.n	80051da <dir_sdi+0x22>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <dir_sdi+0x26>
		return FR_INT_ERR;
 80051da:	2302      	movs	r3, #2
 80051dc:	e063      	b.n	80052a6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <dir_sdi+0x46>
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d902      	bls.n	80051fe <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fc:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10c      	bne.n	800521e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	8912      	ldrh	r2, [r2, #8]
 800520c:	4293      	cmp	r3, r2
 800520e:	d301      	bcc.n	8005214 <dir_sdi+0x5c>
 8005210:	2302      	movs	r3, #2
 8005212:	e048      	b.n	80052a6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	619a      	str	r2, [r3, #24]
 800521c:	e029      	b.n	8005272 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	895b      	ldrh	r3, [r3, #10]
 8005222:	025b      	lsls	r3, r3, #9
 8005224:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005226:	e019      	b.n	800525c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6979      	ldr	r1, [r7, #20]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff fcb4 	bl	8004b9a <get_fat>
 8005232:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d101      	bne.n	8005240 <dir_sdi+0x88>
 800523c:	2301      	movs	r3, #1
 800523e:	e032      	b.n	80052a6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d904      	bls.n	8005250 <dir_sdi+0x98>
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	429a      	cmp	r2, r3
 800524e:	d301      	bcc.n	8005254 <dir_sdi+0x9c>
 8005250:	2302      	movs	r3, #2
 8005252:	e028      	b.n	80052a6 <dir_sdi+0xee>
			ofs -= csz;
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	429a      	cmp	r2, r3
 8005262:	d2e1      	bcs.n	8005228 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 8005264:	6979      	ldr	r1, [r7, #20]
 8005266:	6938      	ldr	r0, [r7, #16]
 8005268:	f7ff fc78 	bl	8004b5c <clst2sect>
 800526c:	4602      	mov	r2, r0
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <dir_sdi+0xcc>
 8005280:	2302      	movs	r3, #2
 8005282:	e010      	b.n	80052a6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	0a5b      	lsrs	r3, r3, #9
 800528c:	441a      	add	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529e:	441a      	add	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	3320      	adds	r3, #32
 80052c4:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052cc:	d302      	bcc.n	80052d4 <dir_next+0x26>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <dir_next+0x32>
 80052dc:	2304      	movs	r3, #4
 80052de:	e078      	b.n	80053d2 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d166      	bne.n	80053b8 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	8912      	ldrh	r2, [r2, #8]
 8005304:	4293      	cmp	r3, r2
 8005306:	d357      	bcc.n	80053b8 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	619a      	str	r2, [r3, #24]
 800530e:	2304      	movs	r3, #4
 8005310:	e05f      	b.n	80053d2 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	0a5b      	lsrs	r3, r3, #9
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	8952      	ldrh	r2, [r2, #10]
 800531a:	3a01      	subs	r2, #1
 800531c:	4013      	ands	r3, r2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d14a      	bne.n	80053b8 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f7ff fc35 	bl	8004b9a <get_fat>
 8005330:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d801      	bhi.n	800533c <dir_next+0x8e>
 8005338:	2302      	movs	r3, #2
 800533a:	e04a      	b.n	80053d2 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	d101      	bne.n	8005348 <dir_next+0x9a>
 8005344:	2301      	movs	r3, #1
 8005346:	e044      	b.n	80053d2 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	429a      	cmp	r2, r3
 8005350:	d328      	bcc.n	80053a4 <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	619a      	str	r2, [r3, #24]
 800535e:	2304      	movs	r3, #4
 8005360:	e037      	b.n	80053d2 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f7ff fe0b 	bl	8004f86 <create_chain>
 8005370:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <dir_next+0xce>
 8005378:	2307      	movs	r3, #7
 800537a:	e02a      	b.n	80053d2 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <dir_next+0xd8>
 8005382:	2302      	movs	r3, #2
 8005384:	e025      	b.n	80053d2 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d101      	bne.n	8005392 <dir_next+0xe4>
 800538e:	2301      	movs	r3, #1
 8005390:	e01f      	b.n	80053d2 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8005392:	6979      	ldr	r1, [r7, #20]
 8005394:	6938      	ldr	r0, [r7, #16]
 8005396:	f7ff fec7 	bl	8005128 <dir_clear>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <dir_next+0xf6>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e016      	b.n	80053d2 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 80053aa:	6979      	ldr	r1, [r7, #20]
 80053ac:	6938      	ldr	r0, [r7, #16]
 80053ae:	f7ff fbd5 	bl	8004b5c <clst2sect>
 80053b2:	4602      	mov	r2, r0
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ca:	441a      	add	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80053ea:	2100      	movs	r1, #0
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff fee3 	bl	80051b8 <dir_sdi>
 80053f2:	4603      	mov	r3, r0
 80053f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d12b      	bne.n	8005454 <dir_alloc+0x7a>
		n = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	4619      	mov	r1, r3
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7ff fb0d 	bl	8004a26 <move_window>
 800540c:	4603      	mov	r3, r0
 800540e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005410:	7dfb      	ldrb	r3, [r7, #23]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d11d      	bne.n	8005452 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2be5      	cmp	r3, #229	@ 0xe5
 800541e:	d004      	beq.n	800542a <dir_alloc+0x50>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d107      	bne.n	800543a <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	3301      	adds	r3, #1
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d102      	bne.n	800543e <dir_alloc+0x64>
 8005438:	e00c      	b.n	8005454 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800543a:	2300      	movs	r3, #0
 800543c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 800543e:	2101      	movs	r1, #1
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff ff34 	bl	80052ae <dir_next>
 8005446:	4603      	mov	r3, r0
 8005448:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0d7      	beq.n	8005400 <dir_alloc+0x26>
 8005450:	e000      	b.n	8005454 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005452:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005454:	7dfb      	ldrb	r3, [r7, #23]
 8005456:	2b04      	cmp	r3, #4
 8005458:	d101      	bne.n	800545e <dir_alloc+0x84>
 800545a:	2307      	movs	r3, #7
 800545c:	75fb      	strb	r3, [r7, #23]
	return res;
 800545e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	331a      	adds	r3, #26
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff f9b0 	bl	80047dc <ld_word>
 800547c:	4603      	mov	r3, r0
 800547e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b03      	cmp	r3, #3
 8005486:	d109      	bne.n	800549c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	3314      	adds	r3, #20
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff f9a5 	bl	80047dc <ld_word>
 8005492:	4603      	mov	r3, r0
 8005494:	041b      	lsls	r3, r3, #16
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800549c:	68fb      	ldr	r3, [r7, #12]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	331a      	adds	r3, #26
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	b292      	uxth	r2, r2
 80054ba:	4611      	mov	r1, r2
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff f9c8 	bl	8004852 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d109      	bne.n	80054de <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f103 0214 	add.w	r2, r3, #20
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f7ff f9ba 	bl	8004852 <st_word>
	}
}
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80054e8:	b590      	push	{r4, r7, lr}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	331a      	adds	r3, #26
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff f970 	bl	80047dc <ld_word>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <cmp_lfn+0x1e>
 8005502:	2300      	movs	r3, #0
 8005504:	e058      	b.n	80055b8 <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800550e:	1e5a      	subs	r2, r3, #1
 8005510:	4613      	mov	r3, r2
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800551c:	2301      	movs	r3, #1
 800551e:	81fb      	strh	r3, [r7, #14]
 8005520:	2300      	movs	r3, #0
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	e032      	b.n	800558c <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005526:	4a26      	ldr	r2, [pc, #152]	@ (80055c0 <cmp_lfn+0xd8>)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4413      	add	r3, r2
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	4413      	add	r3, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff f951 	bl	80047dc <ld_word>
 800553a:	4603      	mov	r3, r0
 800553c:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 800553e:	89fb      	ldrh	r3, [r7, #14]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d019      	beq.n	8005578 <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2bff      	cmp	r3, #255	@ 0xff
 8005548:	d811      	bhi.n	800556e <cmp_lfn+0x86>
 800554a:	89bb      	ldrh	r3, [r7, #12]
 800554c:	4618      	mov	r0, r3
 800554e:	f001 fda1 	bl	8007094 <ff_wtoupper>
 8005552:	4604      	mov	r4, r0
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	617a      	str	r2, [r7, #20]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	4413      	add	r3, r2
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f001 fd96 	bl	8007094 <ff_wtoupper>
 8005568:	4603      	mov	r3, r0
 800556a:	429c      	cmp	r4, r3
 800556c:	d001      	beq.n	8005572 <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 800556e:	2300      	movs	r3, #0
 8005570:	e022      	b.n	80055b8 <cmp_lfn+0xd0>
			}
			wc = uc;
 8005572:	89bb      	ldrh	r3, [r7, #12]
 8005574:	81fb      	strh	r3, [r7, #14]
 8005576:	e006      	b.n	8005586 <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005578:	89bb      	ldrh	r3, [r7, #12]
 800557a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800557e:	4293      	cmp	r3, r2
 8005580:	d001      	beq.n	8005586 <cmp_lfn+0x9e>
 8005582:	2300      	movs	r3, #0
 8005584:	e018      	b.n	80055b8 <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	3301      	adds	r3, #1
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	2b0c      	cmp	r3, #12
 8005590:	d9c9      	bls.n	8005526 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <cmp_lfn+0xce>
 800559e:	89fb      	ldrh	r3, [r7, #14]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <cmp_lfn+0xce>
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	4413      	add	r3, r2
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <cmp_lfn+0xce>
 80055b2:	2300      	movs	r3, #0
 80055b4:	e000      	b.n	80055b8 <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 80055b6:	2301      	movs	r3, #1
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd90      	pop	{r4, r7, pc}
 80055c0:	080072f4 	.word	0x080072f4

080055c4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4611      	mov	r1, r2
 80055d0:	461a      	mov	r2, r3
 80055d2:	460b      	mov	r3, r1
 80055d4:	71fb      	strb	r3, [r7, #7]
 80055d6:	4613      	mov	r3, r2
 80055d8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	330d      	adds	r3, #13
 80055de:	79ba      	ldrb	r2, [r7, #6]
 80055e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	330b      	adds	r3, #11
 80055e6:	220f      	movs	r2, #15
 80055e8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	330c      	adds	r3, #12
 80055ee:	2200      	movs	r2, #0
 80055f0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	331a      	adds	r3, #26
 80055f6:	2100      	movs	r1, #0
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff f92a 	bl	8004852 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	1e5a      	subs	r2, r3, #1
 8005602:	4613      	mov	r3, r2
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	82fb      	strh	r3, [r7, #22]
 8005612:	2300      	movs	r3, #0
 8005614:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005616:	8afb      	ldrh	r3, [r7, #22]
 8005618:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800561c:	4293      	cmp	r3, r2
 800561e:	d007      	beq.n	8005630 <put_lfn+0x6c>
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	61fa      	str	r2, [r7, #28]
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005630:	4a17      	ldr	r2, [pc, #92]	@ (8005690 <put_lfn+0xcc>)
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	4413      	add	r3, r2
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4413      	add	r3, r2
 800563e:	8afa      	ldrh	r2, [r7, #22]
 8005640:	4611      	mov	r1, r2
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff f905 	bl	8004852 <st_word>
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
 8005648:	8afb      	ldrh	r3, [r7, #22]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d102      	bne.n	8005654 <put_lfn+0x90>
 800564e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005652:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	3301      	adds	r3, #1
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b0c      	cmp	r3, #12
 800565e:	d9da      	bls.n	8005616 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005660:	8afb      	ldrh	r3, [r7, #22]
 8005662:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005666:	4293      	cmp	r3, r2
 8005668:	d006      	beq.n	8005678 <put_lfn+0xb4>
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <put_lfn+0xbc>
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800567e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	79fa      	ldrb	r2, [r7, #7]
 8005684:	701a      	strb	r2, [r3, #0]
}
 8005686:	bf00      	nop
 8005688:	3720      	adds	r7, #32
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	080072f4 	.word	0x080072f4

08005694 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN in directory form */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08c      	sub	sp, #48	@ 0x30
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sreg;


	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 80056a2:	220b      	movs	r2, #11
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f001 fdd0 	bl	800724c <memcpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	d929      	bls.n	8005706 <gen_numname+0x72>
		sreg = seq;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 80056b6:	e020      	b.n	80056fa <gen_numname+0x66>
			wc = *lfn++;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	1c9a      	adds	r2, r3, #2
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80056c2:	2300      	movs	r3, #0
 80056c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056c6:	e015      	b.n	80056f4 <gen_numname+0x60>
				sreg = (sreg << 1) + (wc & 1);
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	005a      	lsls	r2, r3, #1
 80056cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	4413      	add	r3, r2
 80056d4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80056d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80056d8:	085b      	lsrs	r3, r3, #1
 80056da:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sreg & 0x10000) sreg ^= 0x11021;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <gen_numname+0x5a>
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	4b3c      	ldr	r3, [pc, #240]	@ (80057dc <gen_numname+0x148>)
 80056ea:	4053      	eors	r3, r2
 80056ec:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80056ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f0:	3301      	adds	r3, #1
 80056f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	2b0f      	cmp	r3, #15
 80056f8:	d9e6      	bls.n	80056c8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1da      	bne.n	80056b8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sreg;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	603b      	str	r3, [r7, #0]
	}

	/* Make suffix (~ + hexadecimal) */
	i = 7;
 8005706:	2307      	movs	r3, #7
 8005708:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	b2db      	uxtb	r3, r3
 8005714:	3330      	adds	r3, #48	@ 0x30
 8005716:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	603b      	str	r3, [r7, #0]
		if (c > '9') c += 7;
 8005720:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005724:	2b39      	cmp	r3, #57	@ 0x39
 8005726:	d904      	bls.n	8005732 <gen_numname+0x9e>
 8005728:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800572c:	3307      	adds	r3, #7
 800572e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005734:	1e5a      	subs	r2, r3, #1
 8005736:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005738:	3330      	adds	r3, #48	@ 0x30
 800573a:	443b      	add	r3, r7
 800573c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005740:	f803 2c1c 	strb.w	r2, [r3, #-28]
	} while (i && seq);
 8005744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <gen_numname+0xbc>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1dc      	bne.n	800570a <gen_numname+0x76>
	ns[i] = '~';
 8005750:	f107 0214 	add.w	r2, r7, #20
 8005754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005756:	4413      	add	r3, r2
 8005758:	227e      	movs	r2, #126	@ 0x7e
 800575a:	701a      	strb	r2, [r3, #0]

	/* Append the suffix to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800575c:	2300      	movs	r3, #0
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005760:	e014      	b.n	800578c <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	4413      	add	r3, r2
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff f8b8 	bl	80048e0 <dbc_1st>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <gen_numname+0xf2>
			if (j == i - 1) break;
 8005776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005778:	3b01      	subs	r3, #1
 800577a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800577c:	429a      	cmp	r2, r3
 800577e:	d010      	beq.n	80057a2 <gen_numname+0x10e>
			j++;
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	3301      	adds	r3, #1
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	3301      	adds	r3, #1
 800578a:	627b      	str	r3, [r7, #36]	@ 0x24
 800578c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800578e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005790:	429a      	cmp	r2, r3
 8005792:	d207      	bcs.n	80057a4 <gen_numname+0x110>
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	4413      	add	r3, r2
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b20      	cmp	r3, #32
 800579e:	d1e0      	bne.n	8005762 <gen_numname+0xce>
 80057a0:	e000      	b.n	80057a4 <gen_numname+0x110>
			if (j == i - 1) break;
 80057a2:	bf00      	nop
		}
	}
	do {	/* Append the suffix */
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80057a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a6:	2b07      	cmp	r3, #7
 80057a8:	d807      	bhi.n	80057ba <gen_numname+0x126>
 80057aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 80057b0:	3330      	adds	r3, #48	@ 0x30
 80057b2:	443b      	add	r3, r7
 80057b4:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80057b8:	e000      	b.n	80057bc <gen_numname+0x128>
 80057ba:	2120      	movs	r1, #32
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4413      	add	r3, r2
 80057c6:	460a      	mov	r2, r1
 80057c8:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	2b07      	cmp	r3, #7
 80057ce:	d9e9      	bls.n	80057a4 <gen_numname+0x110>
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	3730      	adds	r7, #48	@ 0x30
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	00011021 	.word	0x00011021

080057e0 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80057ec:	230b      	movs	r3, #11
 80057ee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	0852      	lsrs	r2, r2, #1
 80057f6:	01db      	lsls	r3, r3, #7
 80057f8:	4313      	orrs	r3, r2
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	1c59      	adds	r1, r3, #1
 8005800:	6079      	str	r1, [r7, #4]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	4413      	add	r3, r2
 8005806:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	3b01      	subs	r3, #1
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1ed      	bne.n	80057f0 <sum_sfn+0x10>
	return sum;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b086      	sub	sp, #24
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005830:	2100      	movs	r1, #0
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff fcc0 	bl	80051b8 <dir_sdi>
 8005838:	4603      	mov	r3, r0
 800583a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800583c:	7dfb      	ldrb	r3, [r7, #23]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <dir_find+0x24>
 8005842:	7dfb      	ldrb	r3, [r7, #23]
 8005844:	e0a9      	b.n	800599a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005846:	23ff      	movs	r3, #255	@ 0xff
 8005848:	753b      	strb	r3, [r7, #20]
 800584a:	7d3b      	ldrb	r3, [r7, #20]
 800584c:	757b      	strb	r3, [r7, #21]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f04f 32ff 	mov.w	r2, #4294967295
 8005854:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	4619      	mov	r1, r3
 800585c:	6938      	ldr	r0, [r7, #16]
 800585e:	f7ff f8e2 	bl	8004a26 <move_window>
 8005862:	4603      	mov	r3, r0
 8005864:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	2b00      	cmp	r3, #0
 800586a:	f040 8090 	bne.w	800598e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005876:	7dbb      	ldrb	r3, [r7, #22]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <dir_find+0x60>
 800587c:	2304      	movs	r3, #4
 800587e:	75fb      	strb	r3, [r7, #23]
 8005880:	e08a      	b.n	8005998 <dir_find+0x176>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	330b      	adds	r3, #11
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800588e:	73fb      	strb	r3, [r7, #15]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	7bfa      	ldrb	r2, [r7, #15]
 8005894:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005896:	7dbb      	ldrb	r3, [r7, #22]
 8005898:	2be5      	cmp	r3, #229	@ 0xe5
 800589a:	d007      	beq.n	80058ac <dir_find+0x8a>
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <dir_find+0x98>
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	2b0f      	cmp	r3, #15
 80058aa:	d006      	beq.n	80058ba <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80058ac:	23ff      	movs	r3, #255	@ 0xff
 80058ae:	757b      	strb	r3, [r7, #21]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f04f 32ff 	mov.w	r2, #4294967295
 80058b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80058b8:	e05e      	b.n	8005978 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	2b0f      	cmp	r3, #15
 80058be:	d136      	bne.n	800592e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80058c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d154      	bne.n	8005978 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80058ce:	7dbb      	ldrb	r3, [r7, #22]
 80058d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00d      	beq.n	80058f4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	7b5b      	ldrb	r3, [r3, #13]
 80058de:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80058e0:	7dbb      	ldrb	r3, [r7, #22]
 80058e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e6:	75bb      	strb	r3, [r7, #22]
 80058e8:	7dbb      	ldrb	r3, [r7, #22]
 80058ea:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	62da      	str	r2, [r3, #44]	@ 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80058f4:	7dba      	ldrb	r2, [r7, #22]
 80058f6:	7d7b      	ldrb	r3, [r7, #21]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d115      	bne.n	8005928 <dir_find+0x106>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	330d      	adds	r3, #13
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	7d3a      	ldrb	r2, [r7, #20]
 8005906:	429a      	cmp	r2, r3
 8005908:	d10e      	bne.n	8005928 <dir_find+0x106>
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	4619      	mov	r1, r3
 8005914:	4610      	mov	r0, r2
 8005916:	f7ff fde7 	bl	80054e8 <cmp_lfn>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <dir_find+0x106>
 8005920:	7d7b      	ldrb	r3, [r7, #21]
 8005922:	3b01      	subs	r3, #1
 8005924:	b2db      	uxtb	r3, r3
 8005926:	e000      	b.n	800592a <dir_find+0x108>
 8005928:	23ff      	movs	r3, #255	@ 0xff
 800592a:	757b      	strb	r3, [r7, #21]
 800592c:	e024      	b.n	8005978 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800592e:	7d7b      	ldrb	r3, [r7, #21]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d109      	bne.n	8005948 <dir_find+0x126>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff ff51 	bl	80057e0 <sum_sfn>
 800593e:	4603      	mov	r3, r0
 8005940:	461a      	mov	r2, r3
 8005942:	7d3b      	ldrb	r3, [r7, #20]
 8005944:	4293      	cmp	r3, r2
 8005946:	d024      	beq.n	8005992 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10a      	bne.n	800596c <dir_find+0x14a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69d8      	ldr	r0, [r3, #28]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3320      	adds	r3, #32
 800595e:	220b      	movs	r2, #11
 8005960:	4619      	mov	r1, r3
 8005962:	f001 fc29 	bl	80071b8 <memcmp>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d014      	beq.n	8005996 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800596c:	23ff      	movs	r3, #255	@ 0xff
 800596e:	757b      	strb	r3, [r7, #21]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f04f 32ff 	mov.w	r2, #4294967295
 8005976:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005978:	2100      	movs	r1, #0
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff fc97 	bl	80052ae <dir_next>
 8005980:	4603      	mov	r3, r0
 8005982:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005984:	7dfb      	ldrb	r3, [r7, #23]
 8005986:	2b00      	cmp	r3, #0
 8005988:	f43f af65 	beq.w	8005856 <dir_find+0x34>
 800598c:	e004      	b.n	8005998 <dir_find+0x176>
		if (res != FR_OK) break;
 800598e:	bf00      	nop
 8005990:	e002      	b.n	8005998 <dir_find+0x176>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005992:	bf00      	nop
 8005994:	e000      	b.n	8005998 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005996:	bf00      	nop

	return res;
 8005998:	7dfb      	ldrb	r3, [r7, #23]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08c      	sub	sp, #48	@ 0x30
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	61fb      	str	r3, [r7, #28]
#if FF_USE_LFN		/* LFN configuration */
	UINT n, len, n_ent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80059b8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <dir_register+0x20>
 80059c0:	2306      	movs	r3, #6
 80059c2:	e0e0      	b.n	8005b86 <dir_register+0x1e2>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 80059c4:	2300      	movs	r3, #0
 80059c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c8:	e002      	b.n	80059d0 <dir_register+0x2c>
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	3301      	adds	r3, #1
 80059ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	4413      	add	r3, r2
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1f4      	bne.n	80059ca <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT/FAT32 volume */
	memcpy(sn, dp->fn, 12);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f103 0220 	add.w	r2, r3, #32
 80059e6:	f107 030c 	add.w	r3, r7, #12
 80059ea:	6810      	ldr	r0, [r2, #0]
 80059ec:	6851      	ldr	r1, [r2, #4]
 80059ee:	6892      	ldr	r2, [r2, #8]
 80059f0:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d032      	beq.n	8005a62 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2240      	movs	r2, #64	@ 0x40
 8005a00:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		for (n = 1; n < 100; n++) {
 8005a04:	2301      	movs	r3, #1
 8005a06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a08:	e016      	b.n	8005a38 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f103 0020 	add.w	r0, r3, #32
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	f107 010c 	add.w	r1, r7, #12
 8005a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1a:	f7ff fe3b 	bl	8005694 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff feff 	bl	8005822 <dir_find>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a34:	3301      	adds	r3, #1
 8005a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3a:	2b63      	cmp	r3, #99	@ 0x63
 8005a3c:	d9e5      	bls.n	8005a0a <dir_register+0x66>
 8005a3e:	e000      	b.n	8005a42 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005a40:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a44:	2b64      	cmp	r3, #100	@ 0x64
 8005a46:	d101      	bne.n	8005a4c <dir_register+0xa8>
 8005a48:	2307      	movs	r3, #7
 8005a4a:	e09c      	b.n	8005b86 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d002      	beq.n	8005a5a <dir_register+0xb6>
 8005a54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a58:	e095      	b.n	8005b86 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005a5a:	7dfa      	ldrb	r2, [r7, #23]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	}

	/* Create an SFN with/without LFNs. */
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <dir_register+0xd8>
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	330c      	adds	r3, #12
 8005a70:	4a47      	ldr	r2, [pc, #284]	@ (8005b90 <dir_register+0x1ec>)
 8005a72:	fba2 2303 	umull	r2, r3, r2, r3
 8005a76:	089b      	lsrs	r3, r3, #2
 8005a78:	3301      	adds	r3, #1
 8005a7a:	e000      	b.n	8005a7e <dir_register+0xda>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 8005a80:	6a39      	ldr	r1, [r7, #32]
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff fca9 	bl	80053da <dir_alloc>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 8005a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d148      	bne.n	8005b28 <dir_register+0x184>
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	623b      	str	r3, [r7, #32]
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d042      	beq.n	8005b28 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	015b      	lsls	r3, r3, #5
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff fb82 	bl	80051b8 <dir_sdi>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005aba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d132      	bne.n	8005b28 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3320      	adds	r3, #32
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7ff fe8a 	bl	80057e0 <sum_sfn>
 8005acc:	4603      	mov	r3, r0
 8005ace:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	69f8      	ldr	r0, [r7, #28]
 8005ad8:	f7fe ffa5 	bl	8004a26 <move_window>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d11d      	bne.n	8005b26 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	68d8      	ldr	r0, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69d9      	ldr	r1, [r3, #28]
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	7efb      	ldrb	r3, [r7, #27]
 8005af8:	f7ff fd64 	bl	80055c4 <put_lfn>
				fs->wflag = 1;
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	2201      	movs	r2, #1
 8005b00:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8005b02:	2100      	movs	r1, #0
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff fbd2 	bl	80052ae <dir_next>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --n_ent);
 8005b10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d107      	bne.n	8005b28 <dir_register+0x184>
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	623b      	str	r3, [r7, #32]
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1d5      	bne.n	8005ad0 <dir_register+0x12c>
 8005b24:	e000      	b.n	8005b28 <dir_register+0x184>
				if (res != FR_OK) break;
 8005b26:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005b28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d128      	bne.n	8005b82 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	4619      	mov	r1, r3
 8005b36:	69f8      	ldr	r0, [r7, #28]
 8005b38:	f7fe ff75 	bl	8004a26 <move_window>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005b42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d11b      	bne.n	8005b82 <dir_register+0x1de>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	2100      	movs	r1, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 fb40 	bl	80071d8 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69d8      	ldr	r0, [r3, #28]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3320      	adds	r3, #32
 8005b60:	220b      	movs	r2, #11
 8005b62:	4619      	mov	r1, r3
 8005b64:	f001 fb72 	bl	800724c <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	330c      	adds	r3, #12
 8005b74:	f002 0218 	and.w	r2, r2, #24
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8005b82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3730      	adds	r7, #48	@ 0x30
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	4ec4ec4f 	.word	0x4ec4ec4f

08005b94 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	@ 0x28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
	DWORD uc;
	UINT i, ni, si, di;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	613b      	str	r3, [r7, #16]
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8005bb0:	f107 0308 	add.w	r3, r7, #8
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fe feb5 	bl	8004924 <tchar2uni>
 8005bba:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d101      	bne.n	8005bc8 <create_name+0x34>
 8005bc4:	2306      	movs	r3, #6
 8005bc6:	e209      	b.n	8005fdc <create_name+0x448>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bce:	d309      	bcc.n	8005be4 <create_name+0x50>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	0c19      	lsrs	r1, r3, #16
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	617a      	str	r2, [r7, #20]
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4413      	add	r3, r2
 8005be0:	b28a      	uxth	r2, r1
 8005be2:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 8005be8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bea:	2b1f      	cmp	r3, #31
 8005bec:	d920      	bls.n	8005c30 <create_name+0x9c>
 8005bee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bf0:	2b2f      	cmp	r3, #47	@ 0x2f
 8005bf2:	d01d      	beq.n	8005c30 <create_name+0x9c>
 8005bf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bf6:	2b5c      	cmp	r3, #92	@ 0x5c
 8005bf8:	d01a      	beq.n	8005c30 <create_name+0x9c>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005bfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bfe:	d809      	bhi.n	8005c14 <create_name+0x80>
 8005c00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c02:	4619      	mov	r1, r3
 8005c04:	4894      	ldr	r0, [pc, #592]	@ (8005e58 <create_name+0x2c4>)
 8005c06:	f001 faef 	bl	80071e8 <strchr>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <create_name+0x80>
 8005c10:	2306      	movs	r3, #6
 8005c12:	e1e3      	b.n	8005fdc <create_name+0x448>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2bfe      	cmp	r3, #254	@ 0xfe
 8005c18:	d901      	bls.n	8005c1e <create_name+0x8a>
 8005c1a:	2306      	movs	r3, #6
 8005c1c:	e1de      	b.n	8005fdc <create_name+0x448>
		lfn[di++] = wc;				/* Store the Unicode character */
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	617a      	str	r2, [r7, #20]
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4413      	add	r3, r2
 8005c2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005c2c:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 8005c2e:	e7bf      	b.n	8005bb0 <create_name+0x1c>
	}
	if (wc < ' ') {				/* Stopped at end of the path? */
 8005c30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c32:	2b1f      	cmp	r3, #31
 8005c34:	d806      	bhi.n	8005c44 <create_name+0xb0>
		cf = NS_LAST;			/* Last segment */
 8005c36:	2304      	movs	r3, #4
 8005c38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005c3c:	e014      	b.n	8005c68 <create_name+0xd4>
	} else {					/* Stopped at a separator */
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	3301      	adds	r3, #1
 8005c42:	60bb      	str	r3, [r7, #8]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c4a:	d0f8      	beq.n	8005c3e <create_name+0xaa>
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b5c      	cmp	r3, #92	@ 0x5c
 8005c52:	d0f4      	beq.n	8005c3e <create_name+0xaa>
		cf = 0;					/* Next segment may follow */
 8005c54:	2300      	movs	r3, #0
 8005c56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b1f      	cmp	r3, #31
 8005c60:	d802      	bhi.n	8005c68 <create_name+0xd4>
 8005c62:	2304      	movs	r3, #4
 8005c64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}
	*path = p;					/* Return pointer to the next segment */
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	601a      	str	r2, [r3, #0]

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d109      	bne.n	8005c88 <create_name+0xf4>
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005c7a:	4413      	add	r3, r2
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4413      	add	r3, r2
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c86:	d015      	beq.n	8005cb4 <create_name+0x120>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d14d      	bne.n	8005d2a <create_name+0x196>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005c94:	4413      	add	r3, r2
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ca0:	d143      	bne.n	8005d2a <create_name+0x196>
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4b6d      	ldr	r3, [pc, #436]	@ (8005e5c <create_name+0x2c8>)
 8005ca6:	4413      	add	r3, r2
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	4413      	add	r3, r2
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cb2:	d13a      	bne.n	8005d2a <create_name+0x196>
		lfn[di] = 0;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4413      	add	r3, r2
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	623b      	str	r3, [r7, #32]
 8005cc4:	e00f      	b.n	8005ce6 <create_name+0x152>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8005cc6:	6a3a      	ldr	r2, [r7, #32]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d201      	bcs.n	8005cd2 <create_name+0x13e>
 8005cce:	212e      	movs	r1, #46	@ 0x2e
 8005cd0:	e000      	b.n	8005cd4 <create_name+0x140>
 8005cd2:	2120      	movs	r1, #32
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	4413      	add	r3, r2
 8005cda:	3320      	adds	r3, #32
 8005cdc:	460a      	mov	r2, r1
 8005cde:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	623b      	str	r3, [r7, #32]
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	2b0a      	cmp	r3, #10
 8005cea:	d9ec      	bls.n	8005cc6 <create_name+0x132>
		}
		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
 8005cec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005cf0:	f043 0320 	orr.w	r3, r3, #32
 8005cf4:	b2d9      	uxtb	r1, r3
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3320      	adds	r3, #32
 8005cfe:	460a      	mov	r2, r1
 8005d00:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e16a      	b.n	8005fdc <create_name+0x448>
	}
#endif
	while (di) {					/* Snip off trailing spaces and dots if exist */
		wc = lfn[di - 1];
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005d0c:	4413      	add	r3, r2
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4413      	add	r3, r2
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc != ' ' && wc != '.') break;
 8005d18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d002      	beq.n	8005d24 <create_name+0x190>
 8005d1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d20:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d22:	d106      	bne.n	8005d32 <create_name+0x19e>
		di--;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	617b      	str	r3, [r7, #20]
	while (di) {					/* Snip off trailing spaces and dots if exist */
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1ea      	bne.n	8005d06 <create_name+0x172>
 8005d30:	e000      	b.n	8005d34 <create_name+0x1a0>
		if (wc != ' ' && wc != '.') break;
 8005d32:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <create_name+0x1b6>
 8005d46:	2306      	movs	r3, #6
 8005d48:	e148      	b.n	8005fdc <create_name+0x448>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	e002      	b.n	8005d56 <create_name+0x1c2>
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	3301      	adds	r3, #1
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d0f5      	beq.n	8005d50 <create_name+0x1bc>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <create_name+0x1e4>
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4413      	add	r3, r2
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d76:	d109      	bne.n	8005d8c <create_name+0x1f8>
 8005d78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d7c:	f043 0303 	orr.w	r3, r3, #3
 8005d80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8005d84:	e002      	b.n	8005d8c <create_name+0x1f8>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <create_name+0x212>
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005d98:	4413      	add	r3, r2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4413      	add	r3, r2
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005da4:	d1ef      	bne.n	8005d86 <create_name+0x1f2>

	memset(dp->fn, ' ', 11);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3320      	adds	r3, #32
 8005daa:	220b      	movs	r2, #11
 8005dac:	2120      	movs	r1, #32
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 fa12 	bl	80071d8 <memset>
	i = b = 0; ni = 8;
 8005db4:	2300      	movs	r3, #0
 8005db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005dba:	2300      	movs	r3, #0
 8005dbc:	623b      	str	r3, [r7, #32]
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	61ba      	str	r2, [r7, #24]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4413      	add	r3, r2
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 8005dd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80b7 	beq.w	8005f48 <create_name+0x3b4>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8005dda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ddc:	2b20      	cmp	r3, #32
 8005dde:	d006      	beq.n	8005dee <create_name+0x25a>
 8005de0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005de2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005de4:	d10a      	bne.n	8005dfc <create_name+0x268>
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d006      	beq.n	8005dfc <create_name+0x268>
			cf |= NS_LOSS | NS_LFN;
 8005dee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005df2:	f043 0303 	orr.w	r3, r3, #3
 8005df6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			continue;
 8005dfa:	e0a4      	b.n	8005f46 <create_name+0x3b2>
		}

		if (i >= ni || si == di) {		/* End of field? */
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d203      	bcs.n	8005e0c <create_name+0x278>
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d129      	bne.n	8005e60 <create_name+0x2cc>
			if (ni == 11) {				/* Name extension overflow? */
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	2b0b      	cmp	r3, #11
 8005e10:	d106      	bne.n	8005e20 <create_name+0x28c>
				cf |= NS_LOSS | NS_LFN;
 8005e12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e16:	f043 0303 	orr.w	r3, r3, #3
 8005e1a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 8005e1e:	e096      	b.n	8005f4e <create_name+0x3ba>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d005      	beq.n	8005e34 <create_name+0x2a0>
 8005e28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e2c:	f043 0303 	orr.w	r3, r3, #3
 8005e30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;						/* No name extension? */
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	f200 8087 	bhi.w	8005f4c <create_name+0x3b8>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	2308      	movs	r3, #8
 8005e44:	623b      	str	r3, [r7, #32]
 8005e46:	230b      	movs	r3, #11
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			continue;
 8005e54:	e077      	b.n	8005f46 <create_name+0x3b2>
 8005e56:	bf00      	nop
 8005e58:	08007290 	.word	0x08007290
 8005e5c:	7ffffffe 	.word	0x7ffffffe
		}

		if (wc >= 0x80) {	/* Is this an extended character? */
 8005e60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e62:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e64:	d918      	bls.n	8005e98 <create_name+0x304>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8005e66:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e6a:	f043 0302 	orr.w	r3, r3, #2
 8005e6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* In DBCS cfg */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* In SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8005e72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e74:	f240 3152 	movw	r1, #850	@ 0x352
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f001 f8a3 	bl	8006fc4 <ff_uni2oem>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8005e82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d005      	beq.n	8005e98 <create_name+0x304>
 8005e8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e92:	4a54      	ldr	r2, [pc, #336]	@ (8005fe4 <create_name+0x450>)
 8005e94:	5cd3      	ldrb	r3, [r2, r3]
 8005e96:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else						/* In DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 8005e98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e9a:	2bff      	cmp	r3, #255	@ 0xff
 8005e9c:	d91a      	bls.n	8005ed4 <create_name+0x340>
			if (i >= ni - 1) {			/* Field overflow? */
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	6a3a      	ldr	r2, [r7, #32]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d308      	bcc.n	8005eba <create_name+0x326>
				cf |= NS_LOSS | NS_LFN;
 8005ea8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005eac:	f043 0303 	orr.w	r3, r3, #3
 8005eb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				i = ni; continue;		/* Next field */
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	623b      	str	r3, [r7, #32]
 8005eb8:	e045      	b.n	8005f46 <create_name+0x3b2>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8005eba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	b299      	uxth	r1, r3
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	623a      	str	r2, [r7, #32]
 8005ec6:	b2c9      	uxtb	r1, r1
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	4413      	add	r3, r2
 8005ecc:	460a      	mov	r2, r1
 8005ece:	f883 2020 	strb.w	r2, [r3, #32]
 8005ed2:	e02e      	b.n	8005f32 <create_name+0x39e>
		} else {						/* SBC */
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 8005ed4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <create_name+0x356>
 8005eda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005edc:	4619      	mov	r1, r3
 8005ede:	4842      	ldr	r0, [pc, #264]	@ (8005fe8 <create_name+0x454>)
 8005ee0:	f001 f982 	bl	80071e8 <strchr>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d008      	beq.n	8005efc <create_name+0x368>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005eea:	235f      	movs	r3, #95	@ 0x5f
 8005eec:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005eee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ef2:	f043 0303 	orr.w	r3, r3, #3
 8005ef6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005efa:	e01a      	b.n	8005f32 <create_name+0x39e>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8005efc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005efe:	2b40      	cmp	r3, #64	@ 0x40
 8005f00:	d908      	bls.n	8005f14 <create_name+0x380>
 8005f02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f04:	2b5a      	cmp	r3, #90	@ 0x5a
 8005f06:	d805      	bhi.n	8005f14 <create_name+0x380>
					b |= 2;
 8005f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f0c:	f043 0302 	orr.w	r3, r3, #2
 8005f10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 8005f14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f16:	2b60      	cmp	r3, #96	@ 0x60
 8005f18:	d90b      	bls.n	8005f32 <create_name+0x39e>
 8005f1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f1c:	2b7a      	cmp	r3, #122	@ 0x7a
 8005f1e:	d808      	bhi.n	8005f32 <create_name+0x39e>
					b |= 1; wc -= 0x20;
 8005f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005f2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f2e:	3b20      	subs	r3, #32
 8005f30:	84bb      	strh	r3, [r7, #36]	@ 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	623a      	str	r2, [r7, #32]
 8005f38:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f3a:	b2d1      	uxtb	r1, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	4413      	add	r3, r2
 8005f40:	460a      	mov	r2, r1
 8005f42:	f883 2020 	strb.w	r2, [r3, #32]
		wc = lfn[si++];					/* Get an LFN character */
 8005f46:	e73c      	b.n	8005dc2 <create_name+0x22e>
		if (wc == 0) break;				/* Break on end of the LFN */
 8005f48:	bf00      	nop
 8005f4a:	e000      	b.n	8005f4e <create_name+0x3ba>
			if (si > di) break;						/* No name extension? */
 8005f4c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f54:	2be5      	cmp	r3, #229	@ 0xe5
 8005f56:	d103      	bne.n	8005f60 <create_name+0x3cc>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2205      	movs	r2, #5
 8005f5c:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d104      	bne.n	8005f70 <create_name+0x3dc>
 8005f66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8005f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f74:	f003 030c 	and.w	r3, r3, #12
 8005f78:	2b0c      	cmp	r3, #12
 8005f7a:	d005      	beq.n	8005f88 <create_name+0x3f4>
 8005f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d105      	bne.n	8005f94 <create_name+0x400>
 8005f88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f8c:	f043 0302 	orr.w	r3, r3, #2
 8005f90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005f94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d117      	bne.n	8005fd0 <create_name+0x43c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8005fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <create_name+0x424>
 8005fac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fb0:	f043 0310 	orr.w	r3, r3, #16
 8005fb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8005fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <create_name+0x43c>
 8005fc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fc8:	f043 0308 	orr.w	r3, r3, #8
 8005fcc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005fd6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	return FR_OK;
 8005fda:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3728      	adds	r7, #40	@ 0x28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	08007304 	.word	0x08007304
 8005fe8:	0800729c 	.word	0x0800729c

08005fec <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	613b      	str	r3, [r7, #16]


#if FF_FS_RPATH != 0
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b2f      	cmp	r3, #47	@ 0x2f
 8006002:	d00b      	beq.n	800601c <follow_path+0x30>
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b5c      	cmp	r3, #92	@ 0x5c
 800600a:	d007      	beq.n	800601c <follow_path+0x30>
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	699a      	ldr	r2, [r3, #24]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	609a      	str	r2, [r3, #8]
 8006014:	e00d      	b.n	8006032 <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	3301      	adds	r3, #1
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b2f      	cmp	r3, #47	@ 0x2f
 8006022:	d0f8      	beq.n	8006016 <follow_path+0x2a>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b5c      	cmp	r3, #92	@ 0x5c
 800602a:	d0f4      	beq.n	8006016 <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b1f      	cmp	r3, #31
 8006038:	d80a      	bhi.n	8006050 <follow_path+0x64>
		dp->fn[NSFLAG] = NS_NONAME;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2280      	movs	r2, #128	@ 0x80
 800603e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8006042:	2100      	movs	r1, #0
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff f8b7 	bl	80051b8 <dir_sdi>
 800604a:	4603      	mov	r3, r0
 800604c:	75fb      	strb	r3, [r7, #23]
 800604e:	e056      	b.n	80060fe <follow_path+0x112>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006050:	463b      	mov	r3, r7
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff fd9d 	bl	8005b94 <create_name>
 800605a:	4603      	mov	r3, r0
 800605c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d147      	bne.n	80060f4 <follow_path+0x108>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fbdc 	bl	8005822 <dir_find>
 800606a:	4603      	mov	r3, r0
 800606c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8006074:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8006076:	7dfb      	ldrb	r3, [r7, #23]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01b      	beq.n	80060b4 <follow_path+0xc8>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800607c:	7dfb      	ldrb	r3, [r7, #23]
 800607e:	2b04      	cmp	r3, #4
 8006080:	d13a      	bne.n	80060f8 <follow_path+0x10c>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00b      	beq.n	80060a4 <follow_path+0xb8>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	d02c      	beq.n	80060f0 <follow_path+0x104>
						dp->fn[NSFLAG] = NS_NONAME;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2280      	movs	r2, #128	@ 0x80
 800609a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
						res = FR_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80060a2:	e029      	b.n	80060f8 <follow_path+0x10c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d124      	bne.n	80060f8 <follow_path+0x10c>
 80060ae:	2305      	movs	r3, #5
 80060b0:	75fb      	strb	r3, [r7, #23]
				break;
 80060b2:	e021      	b.n	80060f8 <follow_path+0x10c>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	f003 0304 	and.w	r3, r3, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d11e      	bne.n	80060fc <follow_path+0x110>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	799b      	ldrb	r3, [r3, #6]
 80060c2:	f003 0310 	and.w	r3, r3, #16
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <follow_path+0xe4>
				res = FR_NO_PATH; break;
 80060ca:	2305      	movs	r3, #5
 80060cc:	75fb      	strb	r3, [r7, #23]
 80060ce:	e016      	b.n	80060fe <follow_path+0x112>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060de:	4413      	add	r3, r2
 80060e0:	4619      	mov	r1, r3
 80060e2:	6938      	ldr	r0, [r7, #16]
 80060e4:	f7ff f9c0 	bl	8005468 <ld_clust>
 80060e8:	4602      	mov	r2, r0
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	609a      	str	r2, [r3, #8]
 80060ee:	e7af      	b.n	8006050 <follow_path+0x64>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80060f0:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80060f2:	e7ad      	b.n	8006050 <follow_path+0x64>
			if (res != FR_OK) break;
 80060f4:	bf00      	nop
 80060f6:	e002      	b.n	80060fe <follow_path+0x112>
				break;
 80060f8:	bf00      	nop
 80060fa:	e000      	b.n	80060fe <follow_path+0x112>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 80060fc:	bf00      	nop
			}
		}
	}

	return res;
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8006108:	b480      	push	{r7}
 800610a:	b089      	sub	sp, #36	@ 0x24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8006110:	f04f 33ff 	mov.w	r3, #4294967295
 8006114:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <get_ldnumber+0x22>
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	e02e      	b.n	8006188 <get_ldnumber+0x80>
	do {					/* Find a colon in the path */
		tc = *tt++;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	61fa      	str	r2, [r7, #28]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	2b1f      	cmp	r3, #31
 8006138:	d902      	bls.n	8006140 <get_ldnumber+0x38>
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	2b3a      	cmp	r3, #58	@ 0x3a
 800613e:	d1f4      	bne.n	800612a <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	2b3a      	cmp	r3, #58	@ 0x3a
 8006144:	d11c      	bne.n	8006180 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8006146:	2301      	movs	r3, #1
 8006148:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b2f      	cmp	r3, #47	@ 0x2f
 8006150:	d90c      	bls.n	800616c <get_ldnumber+0x64>
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b39      	cmp	r3, #57	@ 0x39
 8006158:	d808      	bhi.n	800616c <get_ldnumber+0x64>
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	3302      	adds	r3, #2
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	429a      	cmp	r2, r3
 8006162:	d103      	bne.n	800616c <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	3b30      	subs	r3, #48	@ 0x30
 800616a:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	dc04      	bgt.n	800617c <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	e003      	b.n	8006188 <get_ldnumber+0x80>
		return vol;
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 8006180:	4b04      	ldr	r3, [pc, #16]	@ (8006194 <get_ldnumber+0x8c>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 8006186:	697b      	ldr	r3, [r7, #20]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3724      	adds	r7, #36	@ 0x24
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	200205a2 	.word	0x200205a2

08006198 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	711a      	strb	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f04f 32ff 	mov.w	r2, #4294967295
 80061ae:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fe fc37 	bl	8004a26 <move_window>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <check_fs+0x2a>
 80061be:	2304      	movs	r3, #4
 80061c0:	e088      	b.n	80062d4 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3338      	adds	r3, #56	@ 0x38
 80061c6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fb06 	bl	80047dc <ld_word>
 80061d0:	4603      	mov	r3, r0
 80061d2:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80061da:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 80061dc:	7b7b      	ldrb	r3, [r7, #13]
 80061de:	2beb      	cmp	r3, #235	@ 0xeb
 80061e0:	d005      	beq.n	80061ee <check_fs+0x56>
 80061e2:	7b7b      	ldrb	r3, [r7, #13]
 80061e4:	2be9      	cmp	r3, #233	@ 0xe9
 80061e6:	d002      	beq.n	80061ee <check_fs+0x56>
 80061e8:	7b7b      	ldrb	r3, [r7, #13]
 80061ea:	2be8      	cmp	r3, #232	@ 0xe8
 80061ec:	d16a      	bne.n	80062c4 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80061ee:	89fb      	ldrh	r3, [r7, #14]
 80061f0:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d10c      	bne.n	8006212 <check_fs+0x7a>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3338      	adds	r3, #56	@ 0x38
 80061fc:	3352      	adds	r3, #82	@ 0x52
 80061fe:	2208      	movs	r2, #8
 8006200:	4936      	ldr	r1, [pc, #216]	@ (80062dc <check_fs+0x144>)
 8006202:	4618      	mov	r0, r3
 8006204:	f000 ffd8 	bl	80071b8 <memcmp>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 800620e:	2300      	movs	r3, #0
 8006210:	e060      	b.n	80062d4 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3338      	adds	r3, #56	@ 0x38
 8006216:	330b      	adds	r3, #11
 8006218:	4618      	mov	r0, r3
 800621a:	f7fe fadf 	bl	80047dc <ld_word>
 800621e:	4603      	mov	r3, r0
 8006220:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006228:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800622a:	897a      	ldrh	r2, [r7, #10]
 800622c:	897b      	ldrh	r3, [r7, #10]
 800622e:	3b01      	subs	r3, #1
 8006230:	4013      	ands	r3, r2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d146      	bne.n	80062c4 <check_fs+0x12c>
 8006236:	897b      	ldrh	r3, [r7, #10]
 8006238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800623c:	d342      	bcc.n	80062c4 <check_fs+0x12c>
 800623e:	897b      	ldrh	r3, [r7, #10]
 8006240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006244:	d83e      	bhi.n	80062c4 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8006246:	7b7b      	ldrb	r3, [r7, #13]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d03b      	beq.n	80062c4 <check_fs+0x12c>
 800624c:	7b7a      	ldrb	r2, [r7, #13]
 800624e:	7b7b      	ldrb	r3, [r7, #13]
 8006250:	3b01      	subs	r3, #1
 8006252:	4013      	ands	r3, r2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d135      	bne.n	80062c4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3338      	adds	r3, #56	@ 0x38
 800625c:	330e      	adds	r3, #14
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe fabc 	bl	80047dc <ld_word>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d02c      	beq.n	80062c4 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8006270:	3b01      	subs	r3, #1
 8006272:	2b01      	cmp	r3, #1
 8006274:	d826      	bhi.n	80062c4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3338      	adds	r3, #56	@ 0x38
 800627a:	3311      	adds	r3, #17
 800627c:	4618      	mov	r0, r3
 800627e:	f7fe faad 	bl	80047dc <ld_word>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01d      	beq.n	80062c4 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3338      	adds	r3, #56	@ 0x38
 800628c:	3313      	adds	r3, #19
 800628e:	4618      	mov	r0, r3
 8006290:	f7fe faa4 	bl	80047dc <ld_word>
 8006294:	4603      	mov	r3, r0
 8006296:	2b7f      	cmp	r3, #127	@ 0x7f
 8006298:	d809      	bhi.n	80062ae <check_fs+0x116>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	3338      	adds	r3, #56	@ 0x38
 800629e:	3320      	adds	r3, #32
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fe fab3 	bl	800480c <ld_dword>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ac:	d30a      	bcc.n	80062c4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3338      	adds	r3, #56	@ 0x38
 80062b2:	3316      	adds	r3, #22
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fe fa91 	bl	80047dc <ld_word>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 80062c0:	2300      	movs	r3, #0
 80062c2:	e007      	b.n	80062d4 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 80062c4:	89fb      	ldrh	r3, [r7, #14]
 80062c6:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d101      	bne.n	80062d2 <check_fs+0x13a>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e000      	b.n	80062d4 <check_fs+0x13c>
 80062d2:	2303      	movs	r3, #3
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	080072a4 	.word	0x080072a4

080062e0 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80062ea:	2100      	movs	r1, #0
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff ff53 	bl	8006198 <check_fs>
 80062f2:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d007      	beq.n	800630a <find_volume+0x2a>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d802      	bhi.n	8006306 <find_volume+0x26>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <find_volume+0x2a>
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	e045      	b.n	8006396 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800630a:	2300      	movs	r3, #0
 800630c:	61fb      	str	r3, [r7, #28]
 800630e:	e014      	b.n	800633a <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 800631e:	4413      	add	r3, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f7fe fa73 	bl	800480c <ld_dword>
 8006326:	4602      	mov	r2, r0
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	3320      	adds	r3, #32
 800632e:	443b      	add	r3, r7
 8006330:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	3301      	adds	r3, #1
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2b03      	cmp	r3, #3
 800633e:	d9e7      	bls.n	8006310 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <find_volume+0x6c>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	3b01      	subs	r3, #1
 800634a:	e000      	b.n	800634e <find_volume+0x6e>
 800634c:	2300      	movs	r3, #0
 800634e:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	3320      	adds	r3, #32
 8006356:	443b      	add	r3, r7
 8006358:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00b      	beq.n	8006378 <find_volume+0x98>
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	3320      	adds	r3, #32
 8006366:	443b      	add	r3, r7
 8006368:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff ff12 	bl	8006198 <check_fs>
 8006374:	4603      	mov	r3, r0
 8006376:	e000      	b.n	800637a <find_volume+0x9a>
 8006378:	2303      	movs	r3, #3
 800637a:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d108      	bne.n	8006394 <find_volume+0xb4>
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d905      	bls.n	8006394 <find_volume+0xb4>
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	3301      	adds	r3, #1
 800638c:	61fb      	str	r3, [r7, #28]
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d9dd      	bls.n	8006350 <find_volume+0x70>
	return fmt;
 8006394:	69bb      	ldr	r3, [r7, #24]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3720      	adds	r7, #32
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b090      	sub	sp, #64	@ 0x40
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2200      	movs	r2, #0
 80063b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7ff fea7 	bl	8006108 <get_ldnumber>
 80063ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 80063bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	da01      	bge.n	80063c6 <mount_volume+0x26>
 80063c2:	230b      	movs	r3, #11
 80063c4:	e1e2      	b.n	800678c <mount_volume+0x3ec>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80063c6:	4a9d      	ldr	r2, [pc, #628]	@ (800663c <mount_volume+0x29c>)
 80063c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80063d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <mount_volume+0x3a>
 80063d6:	230c      	movs	r3, #12
 80063d8:	e1d8      	b.n	800678c <mount_volume+0x3ec>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	f023 0301 	bic.w	r3, r3, #1
 80063e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80063e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01a      	beq.n	8006426 <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 80063f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fe f92d 	bl	8004654 <disk_status>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10c      	bne.n	8006426 <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d007      	beq.n	8006422 <mount_volume+0x82>
 8006412:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006416:	f003 0304 	and.w	r3, r3, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 800641e:	230a      	movs	r3, #10
 8006420:	e1b4      	b.n	800678c <mount_volume+0x3ec>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8006422:	2300      	movs	r3, #0
 8006424:	e1b2      	b.n	800678c <mount_volume+0x3ec>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	2200      	movs	r2, #0
 800642a:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800642c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642e:	785b      	ldrb	r3, [r3, #1]
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe f925 	bl	8004680 <disk_initialize>
 8006436:	4603      	mov	r3, r0
 8006438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800643c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006448:	2303      	movs	r3, #3
 800644a:	e19f      	b.n	800678c <mount_volume+0x3ec>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <mount_volume+0xc2>
 8006452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 800645e:	230a      	movs	r3, #10
 8006460:	e194      	b.n	800678c <mount_volume+0x3ec>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 8006462:	2100      	movs	r1, #0
 8006464:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006466:	f7ff ff3b 	bl	80062e0 <find_volume>
 800646a:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646e:	2b04      	cmp	r3, #4
 8006470:	d101      	bne.n	8006476 <mount_volume+0xd6>
 8006472:	2301      	movs	r3, #1
 8006474:	e18a      	b.n	800678c <mount_volume+0x3ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	2b01      	cmp	r3, #1
 800647a:	d901      	bls.n	8006480 <mount_volume+0xe0>
 800647c:	230d      	movs	r3, #13
 800647e:	e185      	b.n	800678c <mount_volume+0x3ec>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8006480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006484:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006488:	3338      	adds	r3, #56	@ 0x38
 800648a:	330b      	adds	r3, #11
 800648c:	4618      	mov	r0, r3
 800648e:	f7fe f9a5 	bl	80047dc <ld_word>
 8006492:	4603      	mov	r3, r0
 8006494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006498:	d001      	beq.n	800649e <mount_volume+0xfe>
 800649a:	230d      	movs	r3, #13
 800649c:	e176      	b.n	800678c <mount_volume+0x3ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800649e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a0:	3338      	adds	r3, #56	@ 0x38
 80064a2:	3316      	adds	r3, #22
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fe f999 	bl	80047dc <ld_word>
 80064aa:	4603      	mov	r3, r0
 80064ac:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80064ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d106      	bne.n	80064c2 <mount_volume+0x122>
 80064b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b6:	3338      	adds	r3, #56	@ 0x38
 80064b8:	3324      	adds	r3, #36	@ 0x24
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe f9a6 	bl	800480c <ld_dword>
 80064c0:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 80064c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064c6:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80064c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ca:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80064ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d0:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80064d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d4:	78db      	ldrb	r3, [r3, #3]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d005      	beq.n	80064e6 <mount_volume+0x146>
 80064da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064dc:	78db      	ldrb	r3, [r3, #3]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d001      	beq.n	80064e6 <mount_volume+0x146>
 80064e2:	230d      	movs	r3, #13
 80064e4:	e152      	b.n	800678c <mount_volume+0x3ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	78db      	ldrb	r3, [r3, #3]
 80064ea:	461a      	mov	r2, r3
 80064ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ee:	fb02 f303 	mul.w	r3, r2, r3
 80064f2:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064fa:	461a      	mov	r2, r3
 80064fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fe:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006502:	895b      	ldrh	r3, [r3, #10]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d008      	beq.n	800651a <mount_volume+0x17a>
 8006508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650a:	895b      	ldrh	r3, [r3, #10]
 800650c:	461a      	mov	r2, r3
 800650e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006510:	895b      	ldrh	r3, [r3, #10]
 8006512:	3b01      	subs	r3, #1
 8006514:	4013      	ands	r3, r2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <mount_volume+0x17e>
 800651a:	230d      	movs	r3, #13
 800651c:	e136      	b.n	800678c <mount_volume+0x3ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	3338      	adds	r3, #56	@ 0x38
 8006522:	3311      	adds	r3, #17
 8006524:	4618      	mov	r0, r3
 8006526:	f7fe f959 	bl	80047dc <ld_word>
 800652a:	4603      	mov	r3, r0
 800652c:	461a      	mov	r2, r3
 800652e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006530:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006534:	891b      	ldrh	r3, [r3, #8]
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <mount_volume+0x1a4>
 8006540:	230d      	movs	r3, #13
 8006542:	e123      	b.n	800678c <mount_volume+0x3ec>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006546:	3338      	adds	r3, #56	@ 0x38
 8006548:	3313      	adds	r3, #19
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe f946 	bl	80047dc <ld_word>
 8006550:	4603      	mov	r3, r0
 8006552:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <mount_volume+0x1c8>
 800655a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655c:	3338      	adds	r3, #56	@ 0x38
 800655e:	3320      	adds	r3, #32
 8006560:	4618      	mov	r0, r3
 8006562:	f7fe f953 	bl	800480c <ld_dword>
 8006566:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656a:	3338      	adds	r3, #56	@ 0x38
 800656c:	330e      	adds	r3, #14
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe f934 	bl	80047dc <ld_word>
 8006574:	4603      	mov	r3, r0
 8006576:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006578:	8bfb      	ldrh	r3, [r7, #30]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <mount_volume+0x1e2>
 800657e:	230d      	movs	r3, #13
 8006580:	e104      	b.n	800678c <mount_volume+0x3ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006582:	8bfa      	ldrh	r2, [r7, #30]
 8006584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006586:	4413      	add	r3, r2
 8006588:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800658a:	8912      	ldrh	r2, [r2, #8]
 800658c:	0912      	lsrs	r2, r2, #4
 800658e:	b292      	uxth	r2, r2
 8006590:	4413      	add	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006594:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	429a      	cmp	r2, r3
 800659a:	d201      	bcs.n	80065a0 <mount_volume+0x200>
 800659c:	230d      	movs	r3, #13
 800659e:	e0f5      	b.n	800678c <mount_volume+0x3ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80065a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065a8:	8952      	ldrh	r2, [r2, #10]
 80065aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80065ae:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <mount_volume+0x21a>
 80065b6:	230d      	movs	r3, #13
 80065b8:	e0e8      	b.n	800678c <mount_volume+0x3ec>
		fmt = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	4a1f      	ldr	r2, [pc, #124]	@ (8006640 <mount_volume+0x2a0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d801      	bhi.n	80065ca <mount_volume+0x22a>
 80065c6:	2303      	movs	r3, #3
 80065c8:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d801      	bhi.n	80065d8 <mount_volume+0x238>
 80065d4:	2302      	movs	r3, #2
 80065d6:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80065de:	4293      	cmp	r3, r2
 80065e0:	d801      	bhi.n	80065e6 <mount_volume+0x246>
 80065e2:	2301      	movs	r3, #1
 80065e4:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 80065e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <mount_volume+0x250>
 80065ec:	230d      	movs	r3, #13
 80065ee:	e0cd      	b.n	800678c <mount_volume+0x3ec>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	1c9a      	adds	r2, r3, #2
 80065f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	6a3a      	ldr	r2, [r7, #32]
 80065fc:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80065fe:	8bfa      	ldrh	r2, [r7, #30]
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	441a      	add	r2, r3
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006608:	6a3a      	ldr	r2, [r7, #32]
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	441a      	add	r2, r3
 800660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006610:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	2b03      	cmp	r3, #3
 8006616:	d123      	bne.n	8006660 <mount_volume+0x2c0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661a:	3338      	adds	r3, #56	@ 0x38
 800661c:	332a      	adds	r3, #42	@ 0x2a
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe f8dc 	bl	80047dc <ld_word>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <mount_volume+0x28e>
 800662a:	230d      	movs	r3, #13
 800662c:	e0ae      	b.n	800678c <mount_volume+0x3ec>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800662e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006630:	891b      	ldrh	r3, [r3, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d006      	beq.n	8006644 <mount_volume+0x2a4>
 8006636:	230d      	movs	r3, #13
 8006638:	e0a8      	b.n	800678c <mount_volume+0x3ec>
 800663a:	bf00      	nop
 800663c:	2002059c 	.word	0x2002059c
 8006640:	0ffffff5 	.word	0x0ffffff5
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006646:	3338      	adds	r3, #56	@ 0x38
 8006648:	332c      	adds	r3, #44	@ 0x2c
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe f8de 	bl	800480c <ld_dword>
 8006650:	4602      	mov	r2, r0
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	637b      	str	r3, [r7, #52]	@ 0x34
 800665e:	e01e      	b.n	800669e <mount_volume+0x2fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006662:	891b      	ldrh	r3, [r3, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <mount_volume+0x2cc>
 8006668:	230d      	movs	r3, #13
 800666a:	e08f      	b.n	800678c <mount_volume+0x3ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006672:	441a      	add	r2, r3
 8006674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006676:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667a:	2b02      	cmp	r3, #2
 800667c:	d103      	bne.n	8006686 <mount_volume+0x2e6>
 800667e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	e00a      	b.n	800669c <mount_volume+0x2fc>
 8006686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006688:	69da      	ldr	r2, [r3, #28]
 800668a:	4613      	mov	r3, r2
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	4413      	add	r3, r2
 8006690:	085a      	lsrs	r2, r3, #1
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800669c:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	6a1a      	ldr	r2, [r3, #32]
 80066a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80066a8:	0a5b      	lsrs	r3, r3, #9
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d201      	bcs.n	80066b2 <mount_volume+0x312>
 80066ae:	230d      	movs	r3, #13
 80066b0:	e06c      	b.n	800678c <mount_volume+0x3ec>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	f04f 32ff 	mov.w	r2, #4294967295
 80066b8:	615a      	str	r2, [r3, #20]
 80066ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066bc:	695a      	ldr	r2, [r3, #20]
 80066be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	2280      	movs	r2, #128	@ 0x80
 80066c6:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 80066c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d149      	bne.n	8006762 <mount_volume+0x3c2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80066ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d0:	3338      	adds	r3, #56	@ 0x38
 80066d2:	3330      	adds	r3, #48	@ 0x30
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe f881 	bl	80047dc <ld_word>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d140      	bne.n	8006762 <mount_volume+0x3c2>
			&& move_window(fs, bsect + 1) == FR_OK)
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	3301      	adds	r3, #1
 80066e4:	4619      	mov	r1, r3
 80066e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066e8:	f7fe f99d 	bl	8004a26 <move_window>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d137      	bne.n	8006762 <mount_volume+0x3c2>
		{
			fs->fsi_flag = 0;
 80066f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f4:	2200      	movs	r2, #0
 80066f6:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 80066f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fa:	3338      	adds	r3, #56	@ 0x38
 80066fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe f86b 	bl	80047dc <ld_word>
 8006706:	4603      	mov	r3, r0
 8006708:	461a      	mov	r2, r3
 800670a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800670e:	429a      	cmp	r2, r3
 8006710:	d127      	bne.n	8006762 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006714:	3338      	adds	r3, #56	@ 0x38
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe f878 	bl	800480c <ld_dword>
 800671c:	4603      	mov	r3, r0
 800671e:	4a1d      	ldr	r2, [pc, #116]	@ (8006794 <mount_volume+0x3f4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d11e      	bne.n	8006762 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	3338      	adds	r3, #56	@ 0x38
 8006728:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe f86d 	bl	800480c <ld_dword>
 8006732:	4603      	mov	r3, r0
 8006734:	4a18      	ldr	r2, [pc, #96]	@ (8006798 <mount_volume+0x3f8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d113      	bne.n	8006762 <mount_volume+0x3c2>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673c:	3338      	adds	r3, #56	@ 0x38
 800673e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe f862 	bl	800480c <ld_dword>
 8006748:	4602      	mov	r2, r0
 800674a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674c:	615a      	str	r2, [r3, #20]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800674e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006750:	3338      	adds	r3, #56	@ 0x38
 8006752:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006756:	4618      	mov	r0, r3
 8006758:	f7fe f858 	bl	800480c <ld_dword>
 800675c:	4602      	mov	r2, r0
 800675e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006760:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	b2da      	uxtb	r2, r3
 8006766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006768:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800676a:	4b0c      	ldr	r3, [pc, #48]	@ (800679c <mount_volume+0x3fc>)
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	3301      	adds	r3, #1
 8006770:	b29a      	uxth	r2, r3
 8006772:	4b0a      	ldr	r3, [pc, #40]	@ (800679c <mount_volume+0x3fc>)
 8006774:	801a      	strh	r2, [r3, #0]
 8006776:	4b09      	ldr	r3, [pc, #36]	@ (800679c <mount_volume+0x3fc>)
 8006778:	881a      	ldrh	r2, [r3, #0]
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006780:	4a07      	ldr	r2, [pc, #28]	@ (80067a0 <mount_volume+0x400>)
 8006782:	60da      	str	r2, [r3, #12]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8006784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006786:	2200      	movs	r2, #0
 8006788:	619a      	str	r2, [r3, #24]
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3740      	adds	r7, #64	@ 0x40
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	41615252 	.word	0x41615252
 8006798:	61417272 	.word	0x61417272
 800679c:	200205a0 	.word	0x200205a0
 80067a0:	200205a4 	.word	0x200205a4

080067a4 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80067ae:	2309      	movs	r3, #9
 80067b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01c      	beq.n	80067f2 <validate+0x4e>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d018      	beq.n	80067f2 <validate+0x4e>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d013      	beq.n	80067f2 <validate+0x4e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	889a      	ldrh	r2, [r3, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	88db      	ldrh	r3, [r3, #6]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d10c      	bne.n	80067f2 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fd ff38 	bl	8004654 <disk_status>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <validate+0x4e>
			res = FR_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <validate+0x5a>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	e000      	b.n	8006800 <validate+0x5c>
 80067fe:	2300      	movs	r3, #0
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	6013      	str	r3, [r2, #0]
	return res;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	4613      	mov	r3, r2
 800681c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8006822:	f107 0310 	add.w	r3, r7, #16
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff fc6e 	bl	8006108 <get_ldnumber>
 800682c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	2b00      	cmp	r3, #0
 8006832:	da01      	bge.n	8006838 <f_mount+0x28>
 8006834:	230b      	movs	r3, #11
 8006836:	e02e      	b.n	8006896 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8006838:	4a19      	ldr	r2, [pc, #100]	@ (80068a0 <f_mount+0x90>)
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006840:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d007      	beq.n	8006858 <f_mount+0x48>
		FatFs[vol] = 0;
 8006848:	4a15      	ldr	r2, [pc, #84]	@ (80068a0 <f_mount+0x90>)
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	2100      	movs	r1, #0
 800684e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	2200      	movs	r2, #0
 8006856:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00b      	beq.n	8006876 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	490c      	ldr	r1, [pc, #48]	@ (80068a0 <f_mount+0x90>)
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <f_mount+0x70>
 800687c:	2300      	movs	r3, #0
 800687e:	e00a      	b.n	8006896 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006880:	f107 010c 	add.w	r1, r7, #12
 8006884:	f107 0308 	add.w	r3, r7, #8
 8006888:	2200      	movs	r2, #0
 800688a:	4618      	mov	r0, r3
 800688c:	f7ff fd88 	bl	80063a0 <mount_volume>
 8006890:	4603      	mov	r3, r0
 8006892:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006894:	7dfb      	ldrb	r3, [r7, #23]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3720      	adds	r7, #32
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	2002059c 	.word	0x2002059c

080068a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b098      	sub	sp, #96	@ 0x60
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	4613      	mov	r3, r2
 80068b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <f_open+0x18>
 80068b8:	2309      	movs	r3, #9
 80068ba:	e177      	b.n	8006bac <f_open+0x308>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80068bc:	79fb      	ldrb	r3, [r7, #7]
 80068be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068c2:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 80068c4:	79fa      	ldrb	r2, [r7, #7]
 80068c6:	f107 0110 	add.w	r1, r7, #16
 80068ca:	f107 0308 	add.w	r3, r7, #8
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff fd66 	bl	80063a0 <mount_volume>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80068da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f040 815b 	bne.w	8006b9a <f_open+0x2f6>
		dj.obj.fs = fs;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	f107 0314 	add.w	r3, r7, #20
 80068ee:	4611      	mov	r1, r2
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff fb7b 	bl	8005fec <follow_path>
 80068f6:	4603      	mov	r3, r0
 80068f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 80068fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006900:	2b00      	cmp	r3, #0
 8006902:	d107      	bne.n	8006914 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006904:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006908:	b25b      	sxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	da02      	bge.n	8006914 <f_open+0x70>
				res = FR_INVALID_NAME;
 800690e:	2306      	movs	r3, #6
 8006910:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	f003 031c 	and.w	r3, r3, #28
 800691a:	2b00      	cmp	r3, #0
 800691c:	d078      	beq.n	8006a10 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 800691e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006922:	2b00      	cmp	r3, #0
 8006924:	d010      	beq.n	8006948 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006926:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800692a:	2b04      	cmp	r3, #4
 800692c:	d107      	bne.n	800693e <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800692e:	f107 0314 	add.w	r3, r7, #20
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff f836 	bl	80059a4 <dir_register>
 8006938:	4603      	mov	r3, r0
 800693a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	f043 0308 	orr.w	r3, r3, #8
 8006944:	71fb      	strb	r3, [r7, #7]
 8006946:	e010      	b.n	800696a <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006948:	7ebb      	ldrb	r3, [r7, #26]
 800694a:	f003 0311 	and.w	r3, r3, #17
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <f_open+0xb6>
					res = FR_DENIED;
 8006952:	2307      	movs	r3, #7
 8006954:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006958:	e007      	b.n	800696a <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800695a:	79fb      	ldrb	r3, [r7, #7]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <f_open+0xc6>
 8006964:	2308      	movs	r3, #8
 8006966:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800696a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800696e:	2b00      	cmp	r3, #0
 8006970:	d168      	bne.n	8006a44 <f_open+0x1a0>
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d063      	beq.n	8006a44 <f_open+0x1a0>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 800697c:	f7fd ff26 	bl	80047cc <get_fattime>
 8006980:	6538      	str	r0, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	330e      	adds	r3, #14
 8006986:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006988:	4618      	mov	r0, r3
 800698a:	f7fd ff7d 	bl	8004888 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	3316      	adds	r3, #22
 8006992:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006994:	4618      	mov	r0, r3
 8006996:	f7fd ff77 	bl	8004888 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800699e:	4611      	mov	r1, r2
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe fd61 	bl	8005468 <ld_clust>
 80069a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80069a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069aa:	330b      	adds	r3, #11
 80069ac:	2220      	movs	r2, #32
 80069ae:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069b4:	2200      	movs	r2, #0
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fe fd75 	bl	80054a6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80069bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069be:	331c      	adds	r3, #28
 80069c0:	2100      	movs	r1, #0
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fd ff60 	bl	8004888 <st_dword>
					fs->wflag = 1;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	2201      	movs	r2, #1
 80069cc:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 80069ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d037      	beq.n	8006a44 <f_open+0x1a0>
						sc = fs->winsect;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d8:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 80069da:	f107 0314 	add.w	r3, r7, #20
 80069de:	2200      	movs	r2, #0
 80069e0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe fa6a 	bl	8004ebc <remove_chain>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80069ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d126      	bne.n	8006a44 <f_open+0x1a0>
							res = move_window(fs, sc);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe f813 	bl	8004a26 <move_window>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a0a:	3a01      	subs	r2, #1
 8006a0c:	611a      	str	r2, [r3, #16]
 8006a0e:	e019      	b.n	8006a44 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8006a10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d115      	bne.n	8006a44 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8006a18:	7ebb      	ldrb	r3, [r7, #26]
 8006a1a:	f003 0310 	and.w	r3, r3, #16
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <f_open+0x186>
					res = FR_NO_FILE;
 8006a22:	2304      	movs	r3, #4
 8006a24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006a28:	e00c      	b.n	8006a44 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d007      	beq.n	8006a44 <f_open+0x1a0>
 8006a34:	7ebb      	ldrb	r3, [r7, #26]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <f_open+0x1a0>
						res = FR_DENIED;
 8006a3e:	2307      	movs	r3, #7
 8006a40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006a44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10f      	bne.n	8006a6c <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8006a4c:	79fb      	ldrb	r3, [r7, #7]
 8006a4e:	f003 0308 	and.w	r3, r3, #8
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <f_open+0x1ba>
 8006a56:	79fb      	ldrb	r3, [r7, #7]
 8006a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a5c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8006a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f040 8092 	bne.w	8006b9a <f_open+0x2f6>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fe fcf3 	bl	8005468 <ld_clust>
 8006a82:	4602      	mov	r2, r0
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8a:	331c      	adds	r3, #28
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fd febd 	bl	800480c <ld_dword>
 8006a92:	4602      	mov	r2, r0
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	88da      	ldrh	r2, [r3, #6]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	79fa      	ldrb	r2, [r7, #7]
 8006aaa:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3328      	adds	r3, #40	@ 0x28
 8006ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fb85 	bl	80071d8 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d060      	beq.n	8006b9a <f_open+0x2f6>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d05c      	beq.n	8006b9a <f_open+0x2f6>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	895b      	ldrh	r3, [r3, #10]
 8006aec:	025b      	lsls	r3, r3, #9
 8006aee:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	657b      	str	r3, [r7, #84]	@ 0x54
 8006afc:	e016      	b.n	8006b2c <f_open+0x288>
					clst = get_fat(&fp->obj, clst);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe f849 	bl	8004b9a <get_fat>
 8006b08:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006b0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d802      	bhi.n	8006b16 <f_open+0x272>
 8006b10:	2302      	movs	r3, #2
 8006b12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006b16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d102      	bne.n	8006b24 <f_open+0x280>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006b24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <f_open+0x298>
 8006b34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d8e0      	bhi.n	8006afe <f_open+0x25a>
				}
				fp->clust = clst;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b40:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006b42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d127      	bne.n	8006b9a <f_open+0x2f6>
 8006b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d022      	beq.n	8006b9a <f_open+0x2f6>
					sc = clst2sect(fs, clst);
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fd ffff 	bl	8004b5c <clst2sect>
 8006b5e:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 8006b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d103      	bne.n	8006b6e <f_open+0x2ca>
						res = FR_INT_ERR;
 8006b66:	2302      	movs	r3, #2
 8006b68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006b6c:	e015      	b.n	8006b9a <f_open+0x2f6>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b70:	0a5a      	lsrs	r2, r3, #9
 8006b72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b74:	441a      	add	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	7858      	ldrb	r0, [r3, #1]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	69da      	ldr	r2, [r3, #28]
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f7fd fd97 	bl	80046bc <disk_read>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <f_open+0x2f6>
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <f_open+0x304>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006ba8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3760      	adds	r7, #96	@ 0x60
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08c      	sub	sp, #48	@ 0x30
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f107 0210 	add.w	r2, r7, #16
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff fde5 	bl	80067a4 <validate>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006be0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d107      	bne.n	8006bf8 <f_write+0x44>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	7c5b      	ldrb	r3, [r3, #17]
 8006bec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <f_write+0x4a>
 8006bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bfc:	e13f      	b.n	8006e7e <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	7c1b      	ldrb	r3, [r3, #16]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <f_write+0x5a>
 8006c0a:	2307      	movs	r3, #7
 8006c0c:	e137      	b.n	8006e7e <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	695a      	ldr	r2, [r3, #20]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	441a      	add	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	f080 8121 	bcs.w	8006e62 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	43db      	mvns	r3, r3
 8006c26:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8006c28:	e11b      	b.n	8006e62 <f_write+0x2ae>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f040 80d7 	bne.w	8006de6 <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	0a5b      	lsrs	r3, r3, #9
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	8952      	ldrh	r2, [r2, #10]
 8006c42:	3a01      	subs	r2, #1
 8006c44:	4013      	ands	r3, r2
 8006c46:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d137      	bne.n	8006cbe <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10c      	bne.n	8006c70 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10e      	bne.n	8006c80 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2100      	movs	r1, #0
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe f98d 	bl	8004f86 <create_chain>
 8006c6c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006c6e:	e007      	b.n	8006c80 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	4619      	mov	r1, r3
 8006c78:	4610      	mov	r0, r2
 8006c7a:	f7fe f984 	bl	8004f86 <create_chain>
 8006c7e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80f2 	beq.w	8006e6c <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d104      	bne.n	8006c98 <f_write+0xe4>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2202      	movs	r2, #2
 8006c92:	745a      	strb	r2, [r3, #17]
 8006c94:	2302      	movs	r3, #2
 8006c96:	e0f2      	b.n	8006e7e <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9e:	d104      	bne.n	8006caa <f_write+0xf6>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	745a      	strb	r2, [r3, #17]
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e0e9      	b.n	8006e7e <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cae:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d102      	bne.n	8006cbe <f_write+0x10a>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cbc:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	7c1b      	ldrb	r3, [r3, #16]
 8006cc2:	b25b      	sxtb	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	da18      	bge.n	8006cfa <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	7858      	ldrb	r0, [r3, #1]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	69da      	ldr	r2, [r3, #28]
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f7fd fd0b 	bl	80046f2 <disk_write>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <f_write+0x138>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	745a      	strb	r2, [r3, #17]
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e0c8      	b.n	8006e7e <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	7c1b      	ldrb	r3, [r3, #16]
 8006cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	4619      	mov	r1, r3
 8006d02:	4610      	mov	r0, r2
 8006d04:	f7fd ff2a 	bl	8004b5c <clst2sect>
 8006d08:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d104      	bne.n	8006d1a <f_write+0x166>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2202      	movs	r2, #2
 8006d14:	745a      	strb	r2, [r3, #17]
 8006d16:	2302      	movs	r3, #2
 8006d18:	e0b1      	b.n	8006e7e <f_write+0x2ca>
			sect += csect;
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	4413      	add	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	0a5b      	lsrs	r3, r3, #9
 8006d26:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d03c      	beq.n	8006da8 <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	4413      	add	r3, r2
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	8952      	ldrh	r2, [r2, #10]
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d905      	bls.n	8006d48 <f_write+0x194>
					cc = fs->csize - csect;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	895b      	ldrh	r3, [r3, #10]
 8006d40:	461a      	mov	r2, r3
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	7858      	ldrb	r0, [r3, #1]
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	69f9      	ldr	r1, [r7, #28]
 8006d52:	f7fd fcce 	bl	80046f2 <disk_write>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <f_write+0x1b2>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	745a      	strb	r2, [r3, #17]
 8006d62:	2301      	movs	r3, #1
 8006d64:	e08b      	b.n	8006e7e <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	69da      	ldr	r2, [r3, #28]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	6a3a      	ldr	r2, [r7, #32]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d915      	bls.n	8006da0 <f_write+0x1ec>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	69da      	ldr	r2, [r3, #28]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	025b      	lsls	r3, r3, #9
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	4413      	add	r3, r2
 8006d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	f000 fa5d 	bl	800724c <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	7c1b      	ldrb	r3, [r3, #16]
 8006d96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	025b      	lsls	r3, r3, #9
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006da6:	e03f      	b.n	8006e28 <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d016      	beq.n	8006de0 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	695a      	ldr	r2, [r3, #20]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d210      	bcs.n	8006de0 <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	7858      	ldrb	r0, [r3, #1]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006dc8:	2301      	movs	r3, #1
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	f7fd fc76 	bl	80046bc <disk_read>
 8006dd0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d004      	beq.n	8006de0 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	745a      	strb	r2, [r3, #17]
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e04e      	b.n	8006e7e <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dee:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006df2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d901      	bls.n	8006e00 <f_write+0x24c>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0e:	4413      	add	r3, r2
 8006e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e12:	69f9      	ldr	r1, [r7, #28]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 fa19 	bl	800724c <memcpy>
		fp->flag |= FA_DIRTY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	7c1b      	ldrb	r3, [r3, #16]
 8006e1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	607b      	str	r3, [r7, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e36:	441a      	add	r2, r3
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e40:	4413      	add	r3, r2
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	695a      	ldr	r2, [r3, #20]
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	441a      	add	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	615a      	str	r2, [r3, #20]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	bf38      	it	cc
 8006e5c:	461a      	movcc	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	60da      	str	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f47f aee0 	bne.w	8006c2a <f_write+0x76>
 8006e6a:	e000      	b.n	8006e6e <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006e6c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	7c1b      	ldrb	r3, [r3, #16]
 8006e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3730      	adds	r7, #48	@ 0x30
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b086      	sub	sp, #24
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f107 0208 	add.w	r2, r7, #8
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff fc84 	bl	80067a4 <validate>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d168      	bne.n	8006f78 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	7c1b      	ldrb	r3, [r3, #16]
 8006eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d062      	beq.n	8006f78 <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	7c1b      	ldrb	r3, [r3, #16]
 8006eb6:	b25b      	sxtb	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	da15      	bge.n	8006ee8 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	7858      	ldrb	r0, [r3, #1]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69da      	ldr	r2, [r3, #28]
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f7fd fc11 	bl	80046f2 <disk_write>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <f_sync+0x54>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e04f      	b.n	8006f7a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	7c1b      	ldrb	r3, [r3, #16]
 8006ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006ee8:	f7fd fc70 	bl	80047cc <get_fattime>
 8006eec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	f7fd fd95 	bl	8004a26 <move_window>
 8006efc:	4603      	mov	r3, r0
 8006efe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d138      	bne.n	8006f78 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	330b      	adds	r3, #11
 8006f10:	781a      	ldrb	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	330b      	adds	r3, #11
 8006f16:	f042 0220 	orr.w	r2, r2, #32
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	461a      	mov	r2, r3
 8006f28:	68f9      	ldr	r1, [r7, #12]
 8006f2a:	f7fe fabc 	bl	80054a6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f103 021c 	add.w	r2, r3, #28
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	f7fd fca4 	bl	8004888 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3316      	adds	r3, #22
 8006f44:	6939      	ldr	r1, [r7, #16]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fd fc9e 	bl	8004888 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3312      	adds	r3, #18
 8006f50:	2100      	movs	r1, #0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fd fc7d 	bl	8004852 <st_word>
					fs->wflag = 1;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fd fd8d 	bl	8004a80 <sync_fs>
 8006f66:	4603      	mov	r3, r0
 8006f68:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	7c1b      	ldrb	r3, [r3, #16]
 8006f6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff ff7b 	bl	8006e86 <f_sync>
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10e      	bne.n	8006fb8 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f107 0208 	add.w	r2, r7, #8
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff fbfe 	bl	80067a4 <validate>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	807b      	strh	r3, [r7, #2]
	WCHAR c = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8006fd4:	4b17      	ldr	r3, [pc, #92]	@ (8007034 <ff_uni2oem+0x70>)
 8006fd6:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fdc:	d802      	bhi.n	8006fe4 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	81fb      	strh	r3, [r7, #14]
 8006fe2:	e01f      	b.n	8007024 <ff_uni2oem+0x60>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fea:	d21b      	bcs.n	8007024 <ff_uni2oem+0x60>
 8006fec:	887b      	ldrh	r3, [r7, #2]
 8006fee:	f240 3252 	movw	r2, #850	@ 0x352
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d116      	bne.n	8007024 <ff_uni2oem+0x60>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	81fb      	strh	r3, [r7, #14]
 8006ffa:	e002      	b.n	8007002 <ff_uni2oem+0x3e>
 8006ffc:	89fb      	ldrh	r3, [r7, #14]
 8006ffe:	3301      	adds	r3, #1
 8007000:	81fb      	strh	r3, [r7, #14]
 8007002:	89fb      	ldrh	r3, [r7, #14]
 8007004:	2b7f      	cmp	r3, #127	@ 0x7f
 8007006:	d808      	bhi.n	800701a <ff_uni2oem+0x56>
 8007008:	89fb      	ldrh	r3, [r7, #14]
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	4413      	add	r3, r2
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4293      	cmp	r3, r2
 8007018:	d1f0      	bne.n	8006ffc <ff_uni2oem+0x38>
			c = (c + 0x80) & 0xFF;
 800701a:	89fb      	ldrh	r3, [r7, #14]
 800701c:	3380      	adds	r3, #128	@ 0x80
 800701e:	b29b      	uxth	r3, r3
 8007020:	b2db      	uxtb	r3, r3
 8007022:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007024:	89fb      	ldrh	r3, [r7, #14]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	08007384 	.word	0x08007384

08007038 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	460a      	mov	r2, r1
 8007042:	80fb      	strh	r3, [r7, #6]
 8007044:	4613      	mov	r3, r2
 8007046:	80bb      	strh	r3, [r7, #4]
	WCHAR c = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 800704c:	4b0f      	ldr	r3, [pc, #60]	@ (800708c <ff_oem2uni+0x54>)
 800704e:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
 8007050:	88fb      	ldrh	r3, [r7, #6]
 8007052:	2b7f      	cmp	r3, #127	@ 0x7f
 8007054:	d802      	bhi.n	800705c <ff_oem2uni+0x24>
		c = oem;
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	81fb      	strh	r3, [r7, #14]
 800705a:	e00f      	b.n	800707c <ff_oem2uni+0x44>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 800705c:	88bb      	ldrh	r3, [r7, #4]
 800705e:	f240 3252 	movw	r2, #850	@ 0x352
 8007062:	4293      	cmp	r3, r2
 8007064:	d10a      	bne.n	800707c <ff_oem2uni+0x44>
			if (oem < 0x100) c = p[oem - 0x80];
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	2bff      	cmp	r3, #255	@ 0xff
 800706a:	d807      	bhi.n	800707c <ff_oem2uni+0x44>
 800706c:	88fa      	ldrh	r2, [r7, #6]
 800706e:	4b08      	ldr	r3, [pc, #32]	@ (8007090 <ff_oem2uni+0x58>)
 8007070:	4413      	add	r3, r2
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	4413      	add	r3, r2
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800707c:	89fb      	ldrh	r3, [r7, #14]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	08007384 	.word	0x08007384
 8007090:	7fffff80 	.word	0x7fffff80

08007094 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a2:	d27d      	bcs.n	80071a0 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 80070a8:	8a7b      	ldrh	r3, [r7, #18]
 80070aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ae:	d201      	bcs.n	80070b4 <ff_wtoupper+0x20>
 80070b0:	4b3f      	ldr	r3, [pc, #252]	@ (80071b0 <ff_wtoupper+0x11c>)
 80070b2:	e000      	b.n	80070b6 <ff_wtoupper+0x22>
 80070b4:	4b3f      	ldr	r3, [pc, #252]	@ (80071b4 <ff_wtoupper+0x120>)
 80070b6:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	1c9a      	adds	r2, r3, #2
 80070bc:	617a      	str	r2, [r7, #20]
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 80070c2:	8a3b      	ldrh	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d069      	beq.n	800719c <ff_wtoupper+0x108>
 80070c8:	8a7a      	ldrh	r2, [r7, #18]
 80070ca:	8a3b      	ldrh	r3, [r7, #16]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d365      	bcc.n	800719c <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	1c9a      	adds	r2, r3, #2
 80070d4:	617a      	str	r2, [r7, #20]
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	81fb      	strh	r3, [r7, #14]
 80070da:	89fb      	ldrh	r3, [r7, #14]
 80070dc:	0a1b      	lsrs	r3, r3, #8
 80070de:	81bb      	strh	r3, [r7, #12]
 80070e0:	89fb      	ldrh	r3, [r7, #14]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 80070e6:	8a7a      	ldrh	r2, [r7, #18]
 80070e8:	8a39      	ldrh	r1, [r7, #16]
 80070ea:	89fb      	ldrh	r3, [r7, #14]
 80070ec:	440b      	add	r3, r1
 80070ee:	429a      	cmp	r2, r3
 80070f0:	da4a      	bge.n	8007188 <ff_wtoupper+0xf4>
				switch (cmd) {
 80070f2:	89bb      	ldrh	r3, [r7, #12]
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d850      	bhi.n	800719a <ff_wtoupper+0x106>
 80070f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007100 <ff_wtoupper+0x6c>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007125 	.word	0x08007125
 8007104:	08007137 	.word	0x08007137
 8007108:	0800714d 	.word	0x0800714d
 800710c:	08007155 	.word	0x08007155
 8007110:	0800715d 	.word	0x0800715d
 8007114:	08007165 	.word	0x08007165
 8007118:	0800716d 	.word	0x0800716d
 800711c:	08007175 	.word	0x08007175
 8007120:	0800717d 	.word	0x0800717d
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8007124:	8a7a      	ldrh	r2, [r7, #18]
 8007126:	8a3b      	ldrh	r3, [r7, #16]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	005b      	lsls	r3, r3, #1
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4413      	add	r3, r2
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	827b      	strh	r3, [r7, #18]
 8007134:	e027      	b.n	8007186 <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8007136:	8a7a      	ldrh	r2, [r7, #18]
 8007138:	8a3b      	ldrh	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	b29b      	uxth	r3, r3
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	b29b      	uxth	r3, r3
 8007144:	8a7a      	ldrh	r2, [r7, #18]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	827b      	strh	r3, [r7, #18]
 800714a:	e01c      	b.n	8007186 <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 800714c:	8a7b      	ldrh	r3, [r7, #18]
 800714e:	3b10      	subs	r3, #16
 8007150:	827b      	strh	r3, [r7, #18]
 8007152:	e018      	b.n	8007186 <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8007154:	8a7b      	ldrh	r3, [r7, #18]
 8007156:	3b20      	subs	r3, #32
 8007158:	827b      	strh	r3, [r7, #18]
 800715a:	e014      	b.n	8007186 <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 800715c:	8a7b      	ldrh	r3, [r7, #18]
 800715e:	3b30      	subs	r3, #48	@ 0x30
 8007160:	827b      	strh	r3, [r7, #18]
 8007162:	e010      	b.n	8007186 <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8007164:	8a7b      	ldrh	r3, [r7, #18]
 8007166:	3b1a      	subs	r3, #26
 8007168:	827b      	strh	r3, [r7, #18]
 800716a:	e00c      	b.n	8007186 <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 800716c:	8a7b      	ldrh	r3, [r7, #18]
 800716e:	3308      	adds	r3, #8
 8007170:	827b      	strh	r3, [r7, #18]
 8007172:	e008      	b.n	8007186 <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 8007174:	8a7b      	ldrh	r3, [r7, #18]
 8007176:	3b50      	subs	r3, #80	@ 0x50
 8007178:	827b      	strh	r3, [r7, #18]
 800717a:	e004      	b.n	8007186 <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 800717c:	8a7b      	ldrh	r3, [r7, #18]
 800717e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007182:	827b      	strh	r3, [r7, #18]
 8007184:	bf00      	nop
				}
				break;
 8007186:	e008      	b.n	800719a <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8007188:	89bb      	ldrh	r3, [r7, #12]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d194      	bne.n	80070b8 <ff_wtoupper+0x24>
 800718e:	89fb      	ldrh	r3, [r7, #14]
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	4413      	add	r3, r2
 8007196:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 8007198:	e78e      	b.n	80070b8 <ff_wtoupper+0x24>
				break;
 800719a:	bf00      	nop
		}
		uni = uc;
 800719c:	8a7b      	ldrh	r3, [r7, #18]
 800719e:	607b      	str	r3, [r7, #4]
	}

	return uni;
 80071a0:	687b      	ldr	r3, [r7, #4]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	08007484 	.word	0x08007484
 80071b4:	08007678 	.word	0x08007678

080071b8 <memcmp>:
 80071b8:	b510      	push	{r4, lr}
 80071ba:	3901      	subs	r1, #1
 80071bc:	4402      	add	r2, r0
 80071be:	4290      	cmp	r0, r2
 80071c0:	d101      	bne.n	80071c6 <memcmp+0xe>
 80071c2:	2000      	movs	r0, #0
 80071c4:	e005      	b.n	80071d2 <memcmp+0x1a>
 80071c6:	7803      	ldrb	r3, [r0, #0]
 80071c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	d001      	beq.n	80071d4 <memcmp+0x1c>
 80071d0:	1b18      	subs	r0, r3, r4
 80071d2:	bd10      	pop	{r4, pc}
 80071d4:	3001      	adds	r0, #1
 80071d6:	e7f2      	b.n	80071be <memcmp+0x6>

080071d8 <memset>:
 80071d8:	4402      	add	r2, r0
 80071da:	4603      	mov	r3, r0
 80071dc:	4293      	cmp	r3, r2
 80071de:	d100      	bne.n	80071e2 <memset+0xa>
 80071e0:	4770      	bx	lr
 80071e2:	f803 1b01 	strb.w	r1, [r3], #1
 80071e6:	e7f9      	b.n	80071dc <memset+0x4>

080071e8 <strchr>:
 80071e8:	b2c9      	uxtb	r1, r1
 80071ea:	4603      	mov	r3, r0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071f2:	b112      	cbz	r2, 80071fa <strchr+0x12>
 80071f4:	428a      	cmp	r2, r1
 80071f6:	d1f9      	bne.n	80071ec <strchr+0x4>
 80071f8:	4770      	bx	lr
 80071fa:	2900      	cmp	r1, #0
 80071fc:	bf18      	it	ne
 80071fe:	2000      	movne	r0, #0
 8007200:	4770      	bx	lr
	...

08007204 <__libc_init_array>:
 8007204:	b570      	push	{r4, r5, r6, lr}
 8007206:	4d0d      	ldr	r5, [pc, #52]	@ (800723c <__libc_init_array+0x38>)
 8007208:	4c0d      	ldr	r4, [pc, #52]	@ (8007240 <__libc_init_array+0x3c>)
 800720a:	1b64      	subs	r4, r4, r5
 800720c:	10a4      	asrs	r4, r4, #2
 800720e:	2600      	movs	r6, #0
 8007210:	42a6      	cmp	r6, r4
 8007212:	d109      	bne.n	8007228 <__libc_init_array+0x24>
 8007214:	4d0b      	ldr	r5, [pc, #44]	@ (8007244 <__libc_init_array+0x40>)
 8007216:	4c0c      	ldr	r4, [pc, #48]	@ (8007248 <__libc_init_array+0x44>)
 8007218:	f000 f826 	bl	8007268 <_init>
 800721c:	1b64      	subs	r4, r4, r5
 800721e:	10a4      	asrs	r4, r4, #2
 8007220:	2600      	movs	r6, #0
 8007222:	42a6      	cmp	r6, r4
 8007224:	d105      	bne.n	8007232 <__libc_init_array+0x2e>
 8007226:	bd70      	pop	{r4, r5, r6, pc}
 8007228:	f855 3b04 	ldr.w	r3, [r5], #4
 800722c:	4798      	blx	r3
 800722e:	3601      	adds	r6, #1
 8007230:	e7ee      	b.n	8007210 <__libc_init_array+0xc>
 8007232:	f855 3b04 	ldr.w	r3, [r5], #4
 8007236:	4798      	blx	r3
 8007238:	3601      	adds	r6, #1
 800723a:	e7f2      	b.n	8007222 <__libc_init_array+0x1e>
 800723c:	0800773c 	.word	0x0800773c
 8007240:	0800773c 	.word	0x0800773c
 8007244:	0800773c 	.word	0x0800773c
 8007248:	08007740 	.word	0x08007740

0800724c <memcpy>:
 800724c:	440a      	add	r2, r1
 800724e:	4291      	cmp	r1, r2
 8007250:	f100 33ff 	add.w	r3, r0, #4294967295
 8007254:	d100      	bne.n	8007258 <memcpy+0xc>
 8007256:	4770      	bx	lr
 8007258:	b510      	push	{r4, lr}
 800725a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800725e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007262:	4291      	cmp	r1, r2
 8007264:	d1f9      	bne.n	800725a <memcpy+0xe>
 8007266:	bd10      	pop	{r4, pc}

08007268 <_init>:
 8007268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726a:	bf00      	nop
 800726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726e:	bc08      	pop	{r3}
 8007270:	469e      	mov	lr, r3
 8007272:	4770      	bx	lr

08007274 <_fini>:
 8007274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007276:	bf00      	nop
 8007278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727a:	bc08      	pop	{r3}
 800727c:	469e      	mov	lr, r3
 800727e:	4770      	bx	lr
