
FATFS_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c34  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08007dfc  08007dfc  00008dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082b8  080082b8  0000a014  2**0
                  CONTENTS
  4 .ARM          00000008  080082b8  080082b8  000092b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082c0  080082c0  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082c0  080082c0  000092c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082c4  080082c4  000092c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080082c8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002083c  20000014  080082dc  0000a014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20020850  080082dc  0000a850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f529  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002694  00000000  00000000  0001956d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0001bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a84  00000000  00000000  0001c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026735  00000000  00000000  0001d45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001219c  00000000  00000000  00043b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec305  00000000  00000000  00055d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c4  00000000  00000000  00142078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0014593c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007de4 	.word	0x08007de4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	08007de4 	.word	0x08007de4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <BSP_SD_SDMMC_Init>:
 * @brief  Initializes the SD card device.
 * @retval SD status
 */
uint8_t
BSP_SD_SDMMC_Init (void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80004fe:	2300      	movs	r3, #0
 8000500:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_SDMMC_IsDetected() != SD_PRESENT)
 8000502:	f000 f896 	bl	8000632 <BSP_SD_SDMMC_IsDetected>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d001      	beq.n	8000510 <BSP_SD_SDMMC_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800050c:	2302      	movs	r3, #2
 800050e:	e00c      	b.n	800052a <BSP_SD_SDMMC_Init+0x32>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8000510:	4808      	ldr	r0, [pc, #32]	@ (8000534 <BSP_SD_SDMMC_Init+0x3c>)
 8000512:	f002 fc0f 	bl	8002d34 <HAL_SD_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]

  /* Config 4 bit */
  sd_state = HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B);
 800051a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800051e:	4805      	ldr	r0, [pc, #20]	@ (8000534 <BSP_SD_SDMMC_Init+0x3c>)
 8000520:	f003 fb74 	bl	8003c0c <HAL_SD_ConfigWideBusOperation>
 8000524:	4603      	mov	r3, r0
 8000526:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8000528:	79fb      	ldrb	r3, [r7, #7]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000030 	.word	0x20000030

08000538 <BSP_SD_SDMMC_ReadBlocks>:
uint8_t
BSP_SD_SDMMC_ReadBlocks (uint32_t *pData,
                         uint32_t  ReadAddr,
                         uint32_t  NumOfBlocks,
                         uint32_t  Timeout)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af02      	add	r7, sp, #8
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8000546:	2300      	movs	r3, #0
 8000548:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout)
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	68ba      	ldr	r2, [r7, #8]
 8000552:	68f9      	ldr	r1, [r7, #12]
 8000554:	4806      	ldr	r0, [pc, #24]	@ (8000570 <BSP_SD_SDMMC_ReadBlocks+0x38>)
 8000556:	f002 fca5 	bl	8002ea4 <HAL_SD_ReadBlocks>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <BSP_SD_SDMMC_ReadBlocks+0x2c>
      != HAL_OK)
  {
    sd_state = MSD_ERROR;
 8000560:	2301      	movs	r3, #1
 8000562:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8000564:	7dfb      	ldrb	r3, [r7, #23]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000030 	.word	0x20000030

08000574 <BSP_SD_SDMMC_WriteBlocks>:
uint8_t
BSP_SD_SDMMC_WriteBlocks (uint32_t *pData,
                          uint32_t  WriteAddr,
                          uint32_t  NumOfBlocks,
                          uint32_t  Timeout)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af02      	add	r7, sp, #8
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
 8000580:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	68f9      	ldr	r1, [r7, #12]
 8000590:	4806      	ldr	r0, [pc, #24]	@ (80005ac <BSP_SD_SDMMC_WriteBlocks+0x38>)
 8000592:	f002 fe65 	bl	8003260 <HAL_SD_WriteBlocks>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <BSP_SD_SDMMC_WriteBlocks+0x2c>
          &hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout)
      != HAL_OK)
  {
    sd_state = MSD_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80005a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000030 	.word	0x20000030

080005b0 <BSP_SD_SDMMC_GetCardInfo>:
 * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
 * @retval None
 */
__weak void
BSP_SD_SDMMC_GetCardInfo (HAL_SD_CardInfoTypeDef *CardInfo)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80005b8:	6879      	ldr	r1, [r7, #4]
 80005ba:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <BSP_SD_SDMMC_GetCardInfo+0x18>)
 80005bc:	f003 fafa 	bl	8003bb4 <HAL_SD_GetCardInfo>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000030 	.word	0x20000030

080005cc <HAL_SD_AbortCallback>:
 * @param hsd: SD handle
 * @retval None
 */
void
HAL_SD_AbortCallback (SD_HandleTypeDef *hsd)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  BSP_SD_SDMMC_AbortCallback();
 80005d4:	f000 f818 	bl	8000608 <BSP_SD_SDMMC_AbortCallback>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <HAL_SD_TxCpltCallback>:
 * @param hsd: SD handle
 * @retval None
 */
void
HAL_SD_TxCpltCallback (SD_HandleTypeDef *hsd)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  BSP_SD_SDMMC_WriteCpltCallback();
 80005e8:	f000 f815 	bl	8000616 <BSP_SD_SDMMC_WriteCpltCallback>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <HAL_SD_RxCpltCallback>:
 * @param hsd: SD handle
 * @retval None
 */
void
HAL_SD_RxCpltCallback (SD_HandleTypeDef *hsd)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  BSP_SD_SDMMC_ReadCpltCallback();
 80005fc:	f000 f812 	bl	8000624 <BSP_SD_SDMMC_ReadCpltCallback>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <BSP_SD_SDMMC_AbortCallback>:
 * @retval None
 * @note empty (up to the user to fill it in or to remove it if useless)
 */
__weak void
BSP_SD_SDMMC_AbortCallback (void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <BSP_SD_SDMMC_WriteCpltCallback>:
 * @retval None
 * @note empty (up to the user to fill it in or to remove it if useless)
 */
__weak void
BSP_SD_SDMMC_WriteCpltCallback (void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <BSP_SD_SDMMC_ReadCpltCallback>:
 * @retval None
 * @note empty (up to the user to fill it in or to remove it if useless)
 */
__weak void
BSP_SD_SDMMC_ReadCpltCallback (void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <BSP_SD_SDMMC_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t
BSP_SD_SDMMC_IsDetected (void)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8000638:	2301      	movs	r3, #1
 800063a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	b2db      	uxtb	r3, r3
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <bufsize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int
bufsize (char *buf)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  int i = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  while (*buf++ != '\0')
 8000658:	e002      	b.n	8000660 <bufsize+0x14>
  {
    i++;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
  while (*buf++ != '\0')
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1f6      	bne.n	800065a <bufsize+0xe>
  }
  return i;
 800066c:	68fb      	ldr	r3, [r7, #12]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	memset(buffer, 0xFF, BUFFER_SIZE); // Fill buffer with data
 8000682:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000686:	21ff      	movs	r1, #255	@ 0xff
 8000688:	4828      	ldr	r0, [pc, #160]	@ (800072c <main+0xb0>)
 800068a:	f007 fb63 	bl	8007d54 <memset>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800068e:	f000 f9a1 	bl	80009d4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fbf6 	bl	8000e82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f85d 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 f953 	bl	8000944 <MX_GPIO_Init>
  MX_DMA_Init();
 800069e:	f000 f92b 	bl	80008f8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80006a2:	f000 f8c5 	bl	8000830 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 80006a6:	f000 f8e9 	bl	800087c <MX_SPI2_Init>
//  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
//  {
//    Error_Handler();
//  }

  fr = f_mount(&SDFatFs_main, "", 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	4920      	ldr	r1, [pc, #128]	@ (8000730 <main+0xb4>)
 80006ae:	4821      	ldr	r0, [pc, #132]	@ (8000734 <main+0xb8>)
 80006b0:	f006 fe6c 	bl	800738c <f_mount>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <main+0xbc>)
 80006ba:	701a      	strb	r2, [r3, #0]
  fr = f_open(&MyFile, "file3.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80006bc:	220a      	movs	r2, #10
 80006be:	491f      	ldr	r1, [pc, #124]	@ (800073c <main+0xc0>)
 80006c0:	481f      	ldr	r0, [pc, #124]	@ (8000740 <main+0xc4>)
 80006c2:	f006 fead 	bl	8007420 <f_open>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <main+0xbc>)
 80006cc:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ce:	b672      	cpsid	i
}
 80006d0:	bf00      	nop

  __disable_irq();
  time_count = 0;
 80006d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <main+0xc8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80006d8:	b662      	cpsie	i
}
 80006da:	bf00      	nop
  __enable_irq();

  /* Writing text */
  while (bytes_written < total_size)
 80006dc:	e014      	b.n	8000708 <main+0x8c>
  {
    fr = f_write(&MyFile, buffer, bufsize(buffer), &bw);
 80006de:	4813      	ldr	r0, [pc, #76]	@ (800072c <main+0xb0>)
 80006e0:	f7ff ffb4 	bl	800064c <bufsize>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <main+0xcc>)
 80006ea:	4910      	ldr	r1, [pc, #64]	@ (800072c <main+0xb0>)
 80006ec:	4814      	ldr	r0, [pc, #80]	@ (8000740 <main+0xc4>)
 80006ee:	f007 f81f 	bl	8007730 <f_write>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <main+0xbc>)
 80006f8:	701a      	strb	r2, [r3, #0]

    bytes_written += bw;
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <main+0xd0>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <main+0xcc>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4413      	add	r3, r2
 8000704:	4a11      	ldr	r2, [pc, #68]	@ (800074c <main+0xd0>)
 8000706:	6013      	str	r3, [r2, #0]
  while (bytes_written < total_size)
 8000708:	4b10      	ldr	r3, [pc, #64]	@ (800074c <main+0xd0>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <main+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d3e4      	bcc.n	80006de <main+0x62>
  }
  f_close(&MyFile);
 8000714:	480a      	ldr	r0, [pc, #40]	@ (8000740 <main+0xc4>)
 8000716:	f007 f9f2 	bl	8007afe <f_close>
  __ASM volatile ("cpsid i" : : : "memory");
 800071a:	b672      	cpsid	i
}
 800071c:	bf00      	nop

  __disable_irq();
  uint32_t temp = time_count;
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <main+0xc8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000724:	b662      	cpsie	i
}
 8000726:	bf00      	nop
  __enable_irq();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <main+0xac>
 800072c:	20000638 	.word	0x20000638
 8000730:	08007dfc 	.word	0x08007dfc
 8000734:	200001d8 	.word	0x200001d8
 8000738:	20000000 	.word	0x20000000
 800073c:	08007e00 	.word	0x08007e00
 8000740:	20000410 	.word	0x20000410
 8000744:	20020640 	.word	0x20020640
 8000748:	20020638 	.word	0x20020638
 800074c:	2002063c 	.word	0x2002063c
 8000750:	20000004 	.word	0x20000004

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	@ 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	@ 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f007 faf6 	bl	8007d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <SystemClock_Config+0xd4>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	4a2a      	ldr	r2, [pc, #168]	@ (8000828 <SystemClock_Config+0xd4>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	@ 0x40
 8000784:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <SystemClock_Config+0xd4>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	4b26      	ldr	r3, [pc, #152]	@ (800082c <SystemClock_Config+0xd8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a25      	ldr	r2, [pc, #148]	@ (800082c <SystemClock_Config+0xd8>)
 8000796:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b23      	ldr	r3, [pc, #140]	@ (800082c <SystemClock_Config+0xd8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a8:	2301      	movs	r3, #1
 80007aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007bc:	2319      	movs	r3, #25
 80007be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80007c0:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80007c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007ca:	2309      	movs	r3, #9
 80007cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fa68 	bl	8001ca8 <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007de:	f000 f925 	bl	8000a2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007e2:	f001 fa11 	bl	8001c08 <HAL_PWREx_EnableOverDrive>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007ec:	f000 f91e 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	230f      	movs	r3, #15
 80007f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f4:	2302      	movs	r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000802:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2107      	movs	r1, #7
 800080e:	4618      	mov	r0, r3
 8000810:	f001 fcee 	bl	80021f0 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800081a:	f000 f907 	bl	8000a2c <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3750      	adds	r7, #80	@ 0x50
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_SDMMC1_SD_Init+0x44>)
 8000836:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <MX_SDMMC1_SD_Init+0x48>)
 8000838:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_SDMMC1_SD_Init+0x44>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_SDMMC1_SD_Init+0x44>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_SDMMC1_SD_Init+0x44>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_SDMMC1_SD_Init+0x44>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_SDMMC1_SD_Init+0x44>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_SDMMC1_SD_Init+0x44>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_SDMMC1_SD_Init+0x44>)
 8000860:	f002 fa68 	bl	8002d34 <HAL_SD_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 800086a:	f000 f8df 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000030 	.word	0x20000030
 8000878:	40012c00 	.word	0x40012c00

0800087c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000880:	4b1b      	ldr	r3, [pc, #108]	@ (80008f0 <MX_SPI2_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	@ (80008f4 <MX_SPI2_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <MX_SPI2_Init+0x74>)
 8000888:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <MX_SPI2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <MX_SPI2_Init+0x74>)
 8000896:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800089a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_SPI2_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a2:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <MX_SPI2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_SPI2_Init+0x74>)
 80008aa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_SPI2_Init+0x74>)
 80008b2:	2220      	movs	r2, #32
 80008b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_SPI2_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_SPI2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_SPI2_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_SPI2_Init+0x74>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_SPI2_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_SPI2_Init+0x74>)
 80008d6:	2208      	movs	r2, #8
 80008d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_SPI2_Init+0x74>)
 80008dc:	f003 fe51 	bl	8004582 <HAL_SPI_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 f8a1 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000174 	.word	0x20000174
 80008f4:	40003800 	.word	0x40003800

080008f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <MX_DMA_Init+0x48>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a0f      	ldr	r2, [pc, #60]	@ (8000940 <MX_DMA_Init+0x48>)
 8000904:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <MX_DMA_Init+0x48>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	203b      	movs	r0, #59	@ 0x3b
 800091c:	f000 fc0d 	bl	800113a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000920:	203b      	movs	r0, #59	@ 0x3b
 8000922:	f000 fc26 	bl	8001172 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2045      	movs	r0, #69	@ 0x45
 800092c:	f000 fc05 	bl	800113a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000930:	2045      	movs	r0, #69	@ 0x45
 8000932:	f000 fc1e 	bl	8001172 <HAL_NVIC_EnableIRQ>

}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b21      	ldr	r3, [pc, #132]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a20      	ldr	r2, [pc, #128]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a1a      	ldr	r2, [pc, #104]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a14      	ldr	r2, [pc, #80]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 8000980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a0e      	ldr	r2, [pc, #56]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a08      	ldr	r2, [pc, #32]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_GPIO_Init+0x8c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c2:	bf00      	nop
 80009c4:	371c      	adds	r7, #28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009e6:	f000 fbdf 	bl	80011a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009ea:	2301      	movs	r3, #1
 80009ec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009f6:	231f      	movs	r3, #31
 80009f8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80009fa:	2387      	movs	r3, #135	@ 0x87
 80009fc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a02:	2300      	movs	r3, #0
 8000a04:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a06:	2301      	movs	r3, #1
 8000a08:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a16:	463b      	mov	r3, r7
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 fbfd 	bl	8001218 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a1e:	2004      	movs	r0, #4
 8000a20:	f000 fbda 	bl	80011d8 <HAL_MPU_Enable>

}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <HAL_MspInit+0x44>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a0e      	ldr	r2, [pc, #56]	@ (8000a7c <HAL_MspInit+0x44>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <HAL_MspInit+0x44>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <HAL_MspInit+0x44>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5a:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <HAL_MspInit+0x44>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_MspInit+0x44>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b0ac      	sub	sp, #176	@ 0xb0
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	2284      	movs	r2, #132	@ 0x84
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f007 f957 	bl	8007d54 <memset>
  if(hsd->Instance==SDMMC1)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a74      	ldr	r2, [pc, #464]	@ (8000c7c <HAL_SD_MspInit+0x1fc>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	f040 80e0 	bne.w	8000c72 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000ab2:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8000ab6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac4:	f107 0318 	add.w	r3, r7, #24
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 fd43 	bl	8002554 <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8000ad4:	f7ff ffaa 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ad8:	4b69      	ldr	r3, [pc, #420]	@ (8000c80 <HAL_SD_MspInit+0x200>)
 8000ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000adc:	4a68      	ldr	r2, [pc, #416]	@ (8000c80 <HAL_SD_MspInit+0x200>)
 8000ade:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ae2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae4:	4b66      	ldr	r3, [pc, #408]	@ (8000c80 <HAL_SD_MspInit+0x200>)
 8000ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af0:	4b63      	ldr	r3, [pc, #396]	@ (8000c80 <HAL_SD_MspInit+0x200>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af4:	4a62      	ldr	r2, [pc, #392]	@ (8000c80 <HAL_SD_MspInit+0x200>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afc:	4b60      	ldr	r3, [pc, #384]	@ (8000c80 <HAL_SD_MspInit+0x200>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b08:	4b5d      	ldr	r3, [pc, #372]	@ (8000c80 <HAL_SD_MspInit+0x200>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0c:	4a5c      	ldr	r2, [pc, #368]	@ (8000c80 <HAL_SD_MspInit+0x200>)
 8000b0e:	f043 0308 	orr.w	r3, r3, #8
 8000b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b14:	4b5a      	ldr	r3, [pc, #360]	@ (8000c80 <HAL_SD_MspInit+0x200>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b18:	f003 0308 	and.w	r3, r3, #8
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000b20:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000b24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b44:	4619      	mov	r1, r3
 8000b46:	484f      	ldr	r0, [pc, #316]	@ (8000c84 <HAL_SD_MspInit+0x204>)
 8000b48:	f000 feb2 	bl	80018b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b64:	230c      	movs	r3, #12
 8000b66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4845      	ldr	r0, [pc, #276]	@ (8000c88 <HAL_SD_MspInit+0x208>)
 8000b72:	f000 fe9d 	bl	80018b0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000b76:	4b45      	ldr	r3, [pc, #276]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000b78:	4a45      	ldr	r2, [pc, #276]	@ (8000c90 <HAL_SD_MspInit+0x210>)
 8000b7a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b7c:	4b43      	ldr	r3, [pc, #268]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000b7e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b82:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b84:	4b41      	ldr	r3, [pc, #260]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8a:	4b40      	ldr	r3, [pc, #256]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b90:	4b3e      	ldr	r3, [pc, #248]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000b92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b98:	4b3c      	ldr	r3, [pc, #240]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000b9a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000ba2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ba6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000ba8:	4b38      	ldr	r3, [pc, #224]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000baa:	2220      	movs	r2, #32
 8000bac:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bae:	4b37      	ldr	r3, [pc, #220]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bb4:	4b35      	ldr	r3, [pc, #212]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bba:	4b34      	ldr	r3, [pc, #208]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000bc0:	4b32      	ldr	r3, [pc, #200]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000bc2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000bc8:	4b30      	ldr	r3, [pc, #192]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000bca:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000bce:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000bd0:	482e      	ldr	r0, [pc, #184]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000bd2:	f000 fb61 	bl	8001298 <HAL_DMA_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8000bdc:	f7ff ff26 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000be4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000be6:	4a29      	ldr	r2, [pc, #164]	@ (8000c8c <HAL_SD_MspInit+0x20c>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000bec:	4b29      	ldr	r3, [pc, #164]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000bee:	4a2a      	ldr	r2, [pc, #168]	@ (8000c98 <HAL_SD_MspInit+0x218>)
 8000bf0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000bf2:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000bf4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bf8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bfa:	4b26      	ldr	r3, [pc, #152]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000bfc:	2240      	movs	r2, #64	@ 0x40
 8000bfe:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c00:	4b24      	ldr	r3, [pc, #144]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c06:	4b23      	ldr	r3, [pc, #140]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000c08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c0c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000c10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c14:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000c18:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c1c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000c20:	2220      	movs	r2, #32
 8000c22:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c30:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000c32:	2203      	movs	r2, #3
 8000c34:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000c38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000c40:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000c44:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000c46:	4813      	ldr	r0, [pc, #76]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000c48:	f000 fb26 	bl	8001298 <HAL_DMA_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8000c52:	f7ff feeb 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a0e      	ldr	r2, [pc, #56]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <HAL_SD_MspInit+0x214>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2031      	movs	r0, #49	@ 0x31
 8000c68:	f000 fa67 	bl	800113a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000c6c:	2031      	movs	r0, #49	@ 0x31
 8000c6e:	f000 fa80 	bl	8001172 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8000c72:	bf00      	nop
 8000c74:	37b0      	adds	r7, #176	@ 0xb0
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40012c00 	.word	0x40012c00
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020c00 	.word	0x40020c00
 8000c8c:	200000b4 	.word	0x200000b4
 8000c90:	40026458 	.word	0x40026458
 8000c94:	20000114 	.word	0x20000114
 8000c98:	400264a0 	.word	0x400264a0

08000c9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a25      	ldr	r2, [pc, #148]	@ (8000d50 <HAL_SPI_MspInit+0xb4>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d144      	bne.n	8000d48 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cbe:	4b25      	ldr	r3, [pc, #148]	@ (8000d54 <HAL_SPI_MspInit+0xb8>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a24      	ldr	r2, [pc, #144]	@ (8000d54 <HAL_SPI_MspInit+0xb8>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <HAL_SPI_MspInit+0xb8>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <HAL_SPI_MspInit+0xb8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a1e      	ldr	r2, [pc, #120]	@ (8000d54 <HAL_SPI_MspInit+0xb8>)
 8000cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <HAL_SPI_MspInit+0xb8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <HAL_SPI_MspInit+0xb8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a18      	ldr	r2, [pc, #96]	@ (8000d54 <HAL_SPI_MspInit+0xb8>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b16      	ldr	r3, [pc, #88]	@ (8000d54 <HAL_SPI_MspInit+0xb8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000d06:	2303      	movs	r3, #3
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d16:	2305      	movs	r3, #5
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480d      	ldr	r0, [pc, #52]	@ (8000d58 <HAL_SPI_MspInit+0xbc>)
 8000d22:	f000 fdc5 	bl	80018b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000d26:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d38:	2305      	movs	r3, #5
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <HAL_SPI_MspInit+0xc0>)
 8000d44:	f000 fdb4 	bl	80018b0 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000d48:	bf00      	nop
 8000d4a:	3728      	adds	r7, #40	@ 0x28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40003800 	.word	0x40003800
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40022000 	.word	0x40022000
 8000d5c:	40020400 	.word	0x40020400

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <NMI_Handler+0x4>

08000d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <MemManage_Handler+0x4>

08000d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f8a0 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  time_count++;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <SysTick_Handler+0x18>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a02      	ldr	r2, [pc, #8]	@ (8000dcc <SysTick_Handler+0x18>)
 8000dc4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20020640 	.word	0x20020640

08000dd0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000dd4:	4802      	ldr	r0, [pc, #8]	@ (8000de0 <SDMMC1_IRQHandler+0x10>)
 8000dd6:	f002 fbc9 	bl	800356c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000030 	.word	0x20000030

08000de4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <DMA2_Stream3_IRQHandler+0x10>)
 8000dea:	f000 fb25 	bl	8001438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000b4 	.word	0x200000b4

08000df8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000dfc:	4802      	ldr	r0, [pc, #8]	@ (8000e08 <DMA2_Stream6_IRQHandler+0x10>)
 8000dfe:	f000 fb1b 	bl	8001438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000114 	.word	0x20000114

08000e0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e34:	f7ff ffea 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f006 ff8f 	bl	8007d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fc0b 	bl	800067c <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e74:	080082c8 	.word	0x080082c8
  ldr r2, =_sbss
 8000e78:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e7c:	20020850 	.word	0x20020850

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>

08000e82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e86:	2003      	movs	r0, #3
 8000e88:	f000 f94c 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8c:	200f      	movs	r0, #15
 8000e8e:	f000 f805 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e92:	f7ff fdd1 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f967 	bl	800118e <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f92f 	bl	800113a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	@ (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	2000000c 	.word	0x2000000c

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	20020644 	.word	0x20020644

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20020644 	.word	0x20020644

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffee 	bl	8000f24 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <HAL_Delay+0x44>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffde 	bl	8000f24 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000010 	.word	0x20000010

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00
 8000fc8:	05fa0000 	.word	0x05fa0000

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4907      	ldr	r1, [pc, #28]	@ (8001020 <__NVIC_EnableIRQ+0x38>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	@ (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	@ (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	@ 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f0:	d301      	bcc.n	80010f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00f      	b.n	8001116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <SysTick_Config+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fe:	210f      	movs	r1, #15
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f7ff ff8e 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <SysTick_Config+0x40>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110e:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <SysTick_Config+0x40>)
 8001110:	2207      	movs	r2, #7
 8001112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff29 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114c:	f7ff ff3e 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f7ff ff8e 	bl	8001078 <NVIC_EncodePriority>
 800115c:	4602      	mov	r2, r0
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff5d 	bl	8001024 <__NVIC_SetPriority>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff31 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ffa2 	bl	80010e0 <SysTick_Config>
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011ac:	f3bf 8f5f 	dmb	sy
}
 80011b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <HAL_MPU_Disable+0x28>)
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b6:	4a06      	ldr	r2, [pc, #24]	@ (80011d0 <HAL_MPU_Disable+0x28>)
 80011b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011bc:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80011be:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <HAL_MPU_Disable+0x2c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	e000ed90 	.word	0xe000ed90

080011d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001210 <HAL_MPU_Enable+0x38>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <HAL_MPU_Enable+0x3c>)
 80011ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ee:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <HAL_MPU_Enable+0x3c>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80011f6:	f3bf 8f4f 	dsb	sy
}
 80011fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011fc:	f3bf 8f6f 	isb	sy
}
 8001200:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed90 	.word	0xe000ed90
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	785a      	ldrb	r2, [r3, #1]
 8001224:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <HAL_MPU_ConfigRegion+0x7c>)
 8001226:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <HAL_MPU_ConfigRegion+0x7c>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <HAL_MPU_ConfigRegion+0x7c>)
 800122e:	f023 0301 	bic.w	r3, r3, #1
 8001232:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001234:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <HAL_MPU_ConfigRegion+0x7c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7b1b      	ldrb	r3, [r3, #12]
 8001240:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7adb      	ldrb	r3, [r3, #11]
 8001246:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001248:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7a9b      	ldrb	r3, [r3, #10]
 800124e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001250:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7b5b      	ldrb	r3, [r3, #13]
 8001256:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001258:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7b9b      	ldrb	r3, [r3, #14]
 800125e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001260:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7bdb      	ldrb	r3, [r3, #15]
 8001266:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001268:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7a5b      	ldrb	r3, [r3, #9]
 800126e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001270:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7a1b      	ldrb	r3, [r3, #8]
 8001276:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001278:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001282:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001284:	6113      	str	r3, [r2, #16]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed90 	.word	0xe000ed90

08001298 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff fe3e 	bl	8000f24 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e099      	b.n	80013e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2202      	movs	r2, #2
 80012b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012d4:	e00f      	b.n	80012f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012d6:	f7ff fe25 	bl	8000f24 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b05      	cmp	r3, #5
 80012e2:	d908      	bls.n	80012f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2220      	movs	r2, #32
 80012e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2203      	movs	r2, #3
 80012ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e078      	b.n	80013e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e8      	bne.n	80012d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	4b38      	ldr	r3, [pc, #224]	@ (80013f0 <HAL_DMA_Init+0x158>)
 8001310:	4013      	ands	r3, r2
 8001312:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001322:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4313      	orrs	r3, r2
 8001346:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134c:	2b04      	cmp	r3, #4
 800134e:	d107      	bne.n	8001360 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001358:	4313      	orrs	r3, r2
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4313      	orrs	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f023 0307 	bic.w	r3, r3, #7
 8001376:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	4313      	orrs	r3, r2
 8001380:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001386:	2b04      	cmp	r3, #4
 8001388:	d117      	bne.n	80013ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4313      	orrs	r3, r2
 8001392:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00e      	beq.n	80013ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 fa0b 	bl	80017b8 <DMA_CheckFifoParam>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2240      	movs	r2, #64	@ 0x40
 80013ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80013b6:	2301      	movs	r3, #1
 80013b8:	e016      	b.n	80013e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f9c2 	bl	800174c <DMA_CalcBaseAndBitshift>
 80013c8:	4603      	mov	r3, r0
 80013ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013d0:	223f      	movs	r2, #63	@ 0x3f
 80013d2:	409a      	lsls	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	f010803f 	.word	0xf010803f

080013f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d004      	beq.n	8001412 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2280      	movs	r2, #128	@ 0x80
 800140c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e00c      	b.n	800142c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2205      	movs	r2, #5
 8001416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0201 	bic.w	r2, r2, #1
 8001428:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001444:	4b8e      	ldr	r3, [pc, #568]	@ (8001680 <HAL_DMA_IRQHandler+0x248>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a8e      	ldr	r2, [pc, #568]	@ (8001684 <HAL_DMA_IRQHandler+0x24c>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	0a9b      	lsrs	r3, r3, #10
 8001450:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001462:	2208      	movs	r2, #8
 8001464:	409a      	lsls	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d01a      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0204 	bic.w	r2, r2, #4
 800148a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001490:	2208      	movs	r2, #8
 8001492:	409a      	lsls	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149c:	f043 0201 	orr.w	r2, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a8:	2201      	movs	r2, #1
 80014aa:	409a      	lsls	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d012      	beq.n	80014da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c6:	2201      	movs	r2, #1
 80014c8:	409a      	lsls	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d2:	f043 0202 	orr.w	r2, r3, #2
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014de:	2204      	movs	r2, #4
 80014e0:	409a      	lsls	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d012      	beq.n	8001510 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00b      	beq.n	8001510 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014fc:	2204      	movs	r2, #4
 80014fe:	409a      	lsls	r2, r3
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001508:	f043 0204 	orr.w	r2, r3, #4
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001514:	2210      	movs	r2, #16
 8001516:	409a      	lsls	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d043      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d03c      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001532:	2210      	movs	r2, #16
 8001534:	409a      	lsls	r2, r3
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d018      	beq.n	800157a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d108      	bne.n	8001568 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	2b00      	cmp	r3, #0
 800155c:	d024      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	4798      	blx	r3
 8001566:	e01f      	b.n	80015a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01b      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	4798      	blx	r3
 8001578:	e016      	b.n	80015a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d107      	bne.n	8001598 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0208 	bic.w	r2, r2, #8
 8001596:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ac:	2220      	movs	r2, #32
 80015ae:	409a      	lsls	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 808f 	beq.w	80016d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 8087 	beq.w	80016d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ce:	2220      	movs	r2, #32
 80015d0:	409a      	lsls	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d136      	bne.n	8001650 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0216 	bic.w	r2, r2, #22
 80015f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001600:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d103      	bne.n	8001612 <HAL_DMA_IRQHandler+0x1da>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0208 	bic.w	r2, r2, #8
 8001620:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001626:	223f      	movs	r2, #63	@ 0x3f
 8001628:	409a      	lsls	r2, r3
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001642:	2b00      	cmp	r3, #0
 8001644:	d07e      	beq.n	8001744 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	4798      	blx	r3
        }
        return;
 800164e:	e079      	b.n	8001744 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01d      	beq.n	800169a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001670:	2b00      	cmp	r3, #0
 8001672:	d031      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
 800167c:	e02c      	b.n	80016d8 <HAL_DMA_IRQHandler+0x2a0>
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008
 8001684:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800168c:	2b00      	cmp	r3, #0
 800168e:	d023      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
 8001698:	e01e      	b.n	80016d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10f      	bne.n	80016c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0210 	bic.w	r2, r2, #16
 80016b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d032      	beq.n	8001746 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d022      	beq.n	8001732 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2205      	movs	r2, #5
 80016f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	3301      	adds	r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	d307      	bcc.n	8001720 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f2      	bne.n	8001704 <HAL_DMA_IRQHandler+0x2cc>
 800171e:	e000      	b.n	8001722 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001720:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	4798      	blx	r3
 8001742:	e000      	b.n	8001746 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001744:	bf00      	nop
    }
  }
}
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	3b10      	subs	r3, #16
 800175c:	4a13      	ldr	r2, [pc, #76]	@ (80017ac <DMA_CalcBaseAndBitshift+0x60>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001766:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <DMA_CalcBaseAndBitshift+0x64>)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d908      	bls.n	800178c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001782:	4013      	ands	r3, r2
 8001784:	1d1a      	adds	r2, r3, #4
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	659a      	str	r2, [r3, #88]	@ 0x58
 800178a:	e006      	b.n	800179a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001794:	4013      	ands	r3, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	aaaaaaab 	.word	0xaaaaaaab
 80017b0:	08007e70 	.word	0x08007e70
 80017b4:	fffffc00 	.word	0xfffffc00

080017b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d11f      	bne.n	8001812 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d856      	bhi.n	8001886 <DMA_CheckFifoParam+0xce>
 80017d8:	a201      	add	r2, pc, #4	@ (adr r2, 80017e0 <DMA_CheckFifoParam+0x28>)
 80017da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017de:	bf00      	nop
 80017e0:	080017f1 	.word	0x080017f1
 80017e4:	08001803 	.word	0x08001803
 80017e8:	080017f1 	.word	0x080017f1
 80017ec:	08001887 	.word	0x08001887
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d046      	beq.n	800188a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001800:	e043      	b.n	800188a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001806:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800180a:	d140      	bne.n	800188e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001810:	e03d      	b.n	800188e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800181a:	d121      	bne.n	8001860 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d837      	bhi.n	8001892 <DMA_CheckFifoParam+0xda>
 8001822:	a201      	add	r2, pc, #4	@ (adr r2, 8001828 <DMA_CheckFifoParam+0x70>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	08001839 	.word	0x08001839
 800182c:	0800183f 	.word	0x0800183f
 8001830:	08001839 	.word	0x08001839
 8001834:	08001851 	.word	0x08001851
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
      break;
 800183c:	e030      	b.n	80018a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001842:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d025      	beq.n	8001896 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800184e:	e022      	b.n	8001896 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001854:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001858:	d11f      	bne.n	800189a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800185e:	e01c      	b.n	800189a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d903      	bls.n	800186e <DMA_CheckFifoParam+0xb6>
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d003      	beq.n	8001874 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800186c:	e018      	b.n	80018a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
      break;
 8001872:	e015      	b.n	80018a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001878:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00e      	beq.n	800189e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
      break;
 8001884:	e00b      	b.n	800189e <DMA_CheckFifoParam+0xe6>
      break;
 8001886:	bf00      	nop
 8001888:	e00a      	b.n	80018a0 <DMA_CheckFifoParam+0xe8>
      break;
 800188a:	bf00      	nop
 800188c:	e008      	b.n	80018a0 <DMA_CheckFifoParam+0xe8>
      break;
 800188e:	bf00      	nop
 8001890:	e006      	b.n	80018a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001892:	bf00      	nop
 8001894:	e004      	b.n	80018a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001896:	bf00      	nop
 8001898:	e002      	b.n	80018a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800189a:	bf00      	nop
 800189c:	e000      	b.n	80018a0 <DMA_CheckFifoParam+0xe8>
      break;
 800189e:	bf00      	nop
    }
  } 
  
  return status; 
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	@ 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	e175      	b.n	8001bbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018d0:	2201      	movs	r2, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f040 8164 	bne.w	8001bb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d005      	beq.n	8001906 <HAL_GPIO_Init+0x56>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d130      	bne.n	8001968 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800193c:	2201      	movs	r2, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 0201 	and.w	r2, r3, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b03      	cmp	r3, #3
 8001972:	d017      	beq.n	80019a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d123      	bne.n	80019f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	08da      	lsrs	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3208      	adds	r2, #8
 80019b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	220f      	movs	r2, #15
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	08da      	lsrs	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3208      	adds	r2, #8
 80019f2:	69b9      	ldr	r1, [r7, #24]
 80019f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0203 	and.w	r2, r3, #3
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80be 	beq.w	8001bb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	4b66      	ldr	r3, [pc, #408]	@ (8001bd4 <HAL_GPIO_Init+0x324>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	4a65      	ldr	r2, [pc, #404]	@ (8001bd4 <HAL_GPIO_Init+0x324>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a46:	4b63      	ldr	r3, [pc, #396]	@ (8001bd4 <HAL_GPIO_Init+0x324>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a52:	4a61      	ldr	r2, [pc, #388]	@ (8001bd8 <HAL_GPIO_Init+0x328>)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a58      	ldr	r2, [pc, #352]	@ (8001bdc <HAL_GPIO_Init+0x32c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d037      	beq.n	8001aee <HAL_GPIO_Init+0x23e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a57      	ldr	r2, [pc, #348]	@ (8001be0 <HAL_GPIO_Init+0x330>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d031      	beq.n	8001aea <HAL_GPIO_Init+0x23a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a56      	ldr	r2, [pc, #344]	@ (8001be4 <HAL_GPIO_Init+0x334>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d02b      	beq.n	8001ae6 <HAL_GPIO_Init+0x236>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a55      	ldr	r2, [pc, #340]	@ (8001be8 <HAL_GPIO_Init+0x338>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d025      	beq.n	8001ae2 <HAL_GPIO_Init+0x232>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a54      	ldr	r2, [pc, #336]	@ (8001bec <HAL_GPIO_Init+0x33c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d01f      	beq.n	8001ade <HAL_GPIO_Init+0x22e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a53      	ldr	r2, [pc, #332]	@ (8001bf0 <HAL_GPIO_Init+0x340>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d019      	beq.n	8001ada <HAL_GPIO_Init+0x22a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a52      	ldr	r2, [pc, #328]	@ (8001bf4 <HAL_GPIO_Init+0x344>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0x226>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a51      	ldr	r2, [pc, #324]	@ (8001bf8 <HAL_GPIO_Init+0x348>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_GPIO_Init+0x222>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a50      	ldr	r2, [pc, #320]	@ (8001bfc <HAL_GPIO_Init+0x34c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x21e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4f      	ldr	r2, [pc, #316]	@ (8001c00 <HAL_GPIO_Init+0x350>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_GPIO_Init+0x21a>
 8001ac6:	2309      	movs	r3, #9
 8001ac8:	e012      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001aca:	230a      	movs	r3, #10
 8001acc:	e010      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ace:	2308      	movs	r3, #8
 8001ad0:	e00e      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	e00c      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	e00a      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ada:	2305      	movs	r3, #5
 8001adc:	e008      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ade:	2304      	movs	r3, #4
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e004      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e002      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x240>
 8001aee:	2300      	movs	r3, #0
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	f002 0203 	and.w	r2, r2, #3
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	4093      	lsls	r3, r2
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b00:	4935      	ldr	r1, [pc, #212]	@ (8001bd8 <HAL_GPIO_Init+0x328>)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c04 <HAL_GPIO_Init+0x354>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b32:	4a34      	ldr	r2, [pc, #208]	@ (8001c04 <HAL_GPIO_Init+0x354>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b38:	4b32      	ldr	r3, [pc, #200]	@ (8001c04 <HAL_GPIO_Init+0x354>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b5c:	4a29      	ldr	r2, [pc, #164]	@ (8001c04 <HAL_GPIO_Init+0x354>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b62:	4b28      	ldr	r3, [pc, #160]	@ (8001c04 <HAL_GPIO_Init+0x354>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b86:	4a1f      	ldr	r2, [pc, #124]	@ (8001c04 <HAL_GPIO_Init+0x354>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <HAL_GPIO_Init+0x354>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	@ (8001c04 <HAL_GPIO_Init+0x354>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b0f      	cmp	r3, #15
 8001bc0:	f67f ae86 	bls.w	80018d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	3724      	adds	r7, #36	@ 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40013800 	.word	0x40013800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40020800 	.word	0x40020800
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40021400 	.word	0x40021400
 8001bf4:	40021800 	.word	0x40021800
 8001bf8:	40021c00 	.word	0x40021c00
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	40022400 	.word	0x40022400
 8001c04:	40013c00 	.word	0x40013c00

08001c08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	4b23      	ldr	r3, [pc, #140]	@ (8001ca0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	4a22      	ldr	r2, [pc, #136]	@ (8001ca0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ca0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c36:	f7ff f975 	bl	8000f24 <HAL_GetTick>
 8001c3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c3c:	e009      	b.n	8001c52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c3e:	f7ff f971 	bl	8000f24 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c4c:	d901      	bls.n	8001c52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e022      	b.n	8001c98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c52:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c5e:	d1ee      	bne.n	8001c3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c60:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c6c:	f7ff f95a 	bl	8000f24 <HAL_GetTick>
 8001c70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c72:	e009      	b.n	8001c88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c74:	f7ff f956 	bl	8000f24 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c82:	d901      	bls.n	8001c88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e007      	b.n	8001c98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c94:	d1ee      	bne.n	8001c74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40007000 	.word	0x40007000

08001ca8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e291      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8087 	beq.w	8001dda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ccc:	4b96      	ldr	r3, [pc, #600]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d00c      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd8:	4b93      	ldr	r3, [pc, #588]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d112      	bne.n	8001d0a <HAL_RCC_OscConfig+0x62>
 8001ce4:	4b90      	ldr	r3, [pc, #576]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cf0:	d10b      	bne.n	8001d0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf2:	4b8d      	ldr	r3, [pc, #564]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d06c      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x130>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d168      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e26b      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x7a>
 8001d14:	4b84      	ldr	r3, [pc, #528]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a83      	ldr	r2, [pc, #524]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	e02e      	b.n	8001d80 <HAL_RCC_OscConfig+0xd8>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x9c>
 8001d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b7c      	ldr	r3, [pc, #496]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a7b      	ldr	r2, [pc, #492]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e01d      	b.n	8001d80 <HAL_RCC_OscConfig+0xd8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0xc0>
 8001d4e:	4b76      	ldr	r3, [pc, #472]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a75      	ldr	r2, [pc, #468]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	4b73      	ldr	r3, [pc, #460]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a72      	ldr	r2, [pc, #456]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0xd8>
 8001d68:	4b6f      	ldr	r3, [pc, #444]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b6c      	ldr	r3, [pc, #432]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a6b      	ldr	r2, [pc, #428]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d013      	beq.n	8001db0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff f8cc 	bl	8000f24 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff f8c8 	bl	8000f24 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	@ 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e21f      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	4b61      	ldr	r3, [pc, #388]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0xe8>
 8001dae:	e014      	b.n	8001dda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff f8b8 	bl	8000f24 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff f8b4 	bl	8000f24 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	@ 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e20b      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	4b57      	ldr	r3, [pc, #348]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x110>
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d069      	beq.n	8001eba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de6:	4b50      	ldr	r3, [pc, #320]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df2:	4b4d      	ldr	r3, [pc, #308]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d11c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x190>
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d116      	bne.n	8001e38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	4b47      	ldr	r3, [pc, #284]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_RCC_OscConfig+0x17a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e1df      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e22:	4b41      	ldr	r3, [pc, #260]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	493d      	ldr	r1, [pc, #244]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e36:	e040      	b.n	8001eba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d023      	beq.n	8001e88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e40:	4b39      	ldr	r3, [pc, #228]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a38      	ldr	r2, [pc, #224]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f86a 	bl	8000f24 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e54:	f7ff f866 	bl	8000f24 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1bd      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e66:	4b30      	ldr	r3, [pc, #192]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e72:	4b2d      	ldr	r3, [pc, #180]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4929      	ldr	r1, [pc, #164]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
 8001e86:	e018      	b.n	8001eba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e88:	4b27      	ldr	r3, [pc, #156]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a26      	ldr	r2, [pc, #152]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff f846 	bl	8000f24 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff f842 	bl	8000f24 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e199      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	4b1e      	ldr	r3, [pc, #120]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d038      	beq.n	8001f38 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d019      	beq.n	8001f02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed2:	4a15      	ldr	r2, [pc, #84]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eda:	f7ff f823 	bl	8000f24 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee2:	f7ff f81f 	bl	8000f24 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e176      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x23a>
 8001f00:	e01a      	b.n	8001f38 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f06:	4a08      	ldr	r2, [pc, #32]	@ (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7ff f809 	bl	8000f24 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f16:	f7ff f805 	bl	8000f24 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d903      	bls.n	8001f2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e15c      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
 8001f28:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	4b91      	ldr	r3, [pc, #580]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1ee      	bne.n	8001f16 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80a4 	beq.w	800208e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f46:	4b8b      	ldr	r3, [pc, #556]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10d      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b88      	ldr	r3, [pc, #544]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	4a87      	ldr	r2, [pc, #540]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5e:	4b85      	ldr	r3, [pc, #532]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6e:	4b82      	ldr	r3, [pc, #520]	@ (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7fe ffcd 	bl	8000f24 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7fe ffc9 	bl	8000f24 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	@ 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e120      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa0:	4b75      	ldr	r3, [pc, #468]	@ (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x31a>
 8001fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb8:	4a6e      	ldr	r2, [pc, #440]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fc0:	e02d      	b.n	800201e <HAL_RCC_OscConfig+0x376>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x33c>
 8001fca:	4b6a      	ldr	r3, [pc, #424]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fce:	4a69      	ldr	r2, [pc, #420]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd6:	4b67      	ldr	r3, [pc, #412]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	4a66      	ldr	r2, [pc, #408]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe2:	e01c      	b.n	800201e <HAL_RCC_OscConfig+0x376>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x35e>
 8001fec:	4b61      	ldr	r3, [pc, #388]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff0:	4a60      	ldr	r2, [pc, #384]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff8:	4b5e      	ldr	r3, [pc, #376]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffc:	4a5d      	ldr	r2, [pc, #372]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6713      	str	r3, [r2, #112]	@ 0x70
 8002004:	e00b      	b.n	800201e <HAL_RCC_OscConfig+0x376>
 8002006:	4b5b      	ldr	r3, [pc, #364]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200a:	4a5a      	ldr	r2, [pc, #360]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	@ 0x70
 8002012:	4b58      	ldr	r3, [pc, #352]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	4a57      	ldr	r2, [pc, #348]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d015      	beq.n	8002052 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7fe ff7d 	bl	8000f24 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe ff79 	bl	8000f24 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e0ce      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	4b4b      	ldr	r3, [pc, #300]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ee      	beq.n	800202e <HAL_RCC_OscConfig+0x386>
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7fe ff67 	bl	8000f24 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe ff63 	bl	8000f24 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e0b8      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	4b40      	ldr	r3, [pc, #256]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4b3c      	ldr	r3, [pc, #240]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	4a3b      	ldr	r2, [pc, #236]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80a4 	beq.w	80021e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002098:	4b36      	ldr	r3, [pc, #216]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d06b      	beq.n	800217c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d149      	bne.n	8002140 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	4b31      	ldr	r3, [pc, #196]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a30      	ldr	r2, [pc, #192]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 80020b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe ff34 	bl	8000f24 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe ff30 	bl	8000f24 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e087      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	4b28      	ldr	r3, [pc, #160]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	019b      	lsls	r3, r3, #6
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f4:	085b      	lsrs	r3, r3, #1
 80020f6:	3b01      	subs	r3, #1
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002100:	061b      	lsls	r3, r3, #24
 8002102:	4313      	orrs	r3, r2
 8002104:	4a1b      	ldr	r2, [pc, #108]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002106:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800210a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210c:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a18      	ldr	r2, [pc, #96]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7fe ff04 	bl	8000f24 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7fe ff00 	bl	8000f24 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e057      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x478>
 800213e:	e04f      	b.n	80021e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0b      	ldr	r2, [pc, #44]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800214a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe feea 	bl	8000f24 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7fe fee6 	bl	8000f24 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e03d      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	4b03      	ldr	r3, [pc, #12]	@ (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x4ac>
 8002172:	e035      	b.n	80021e0 <HAL_RCC_OscConfig+0x538>
 8002174:	40023800 	.word	0x40023800
 8002178:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800217c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <HAL_RCC_OscConfig+0x544>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d028      	beq.n	80021dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d121      	bne.n	80021dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d11a      	bne.n	80021dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d111      	bne.n	80021dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	3b01      	subs	r3, #1
 80021c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0d0      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b6a      	ldr	r3, [pc, #424]	@ (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d910      	bls.n	8002238 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b67      	ldr	r3, [pc, #412]	@ (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 020f 	bic.w	r2, r3, #15
 800221e:	4965      	ldr	r1, [pc, #404]	@ (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b63      	ldr	r3, [pc, #396]	@ (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0b8      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d020      	beq.n	8002286 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002250:	4b59      	ldr	r3, [pc, #356]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4a58      	ldr	r2, [pc, #352]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002256:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800225a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002268:	4b53      	ldr	r3, [pc, #332]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a52      	ldr	r2, [pc, #328]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 800226e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002272:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002274:	4b50      	ldr	r3, [pc, #320]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	494d      	ldr	r1, [pc, #308]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d040      	beq.n	8002314 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d107      	bne.n	80022aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	4b47      	ldr	r3, [pc, #284]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d115      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e07f      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	4b41      	ldr	r3, [pc, #260]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e073      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	4b3d      	ldr	r3, [pc, #244]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e06b      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	4b39      	ldr	r3, [pc, #228]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 0203 	bic.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4936      	ldr	r1, [pc, #216]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e4:	f7fe fe1e 	bl	8000f24 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7fe fe1a 	bl	8000f24 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e053      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	4b2d      	ldr	r3, [pc, #180]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 020c 	and.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	429a      	cmp	r2, r3
 8002312:	d1eb      	bne.n	80022ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002314:	4b27      	ldr	r3, [pc, #156]	@ (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d210      	bcs.n	8002344 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b24      	ldr	r3, [pc, #144]	@ (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 020f 	bic.w	r2, r3, #15
 800232a:	4922      	ldr	r1, [pc, #136]	@ (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e032      	b.n	80023aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002350:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4916      	ldr	r1, [pc, #88]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800236e:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	490e      	ldr	r1, [pc, #56]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002382:	f000 f821 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8002386:	4602      	mov	r2, r0
 8002388:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	490a      	ldr	r1, [pc, #40]	@ (80023bc <HAL_RCC_ClockConfig+0x1cc>)
 8002394:	5ccb      	ldrb	r3, [r1, r3]
 8002396:	fa22 f303 	lsr.w	r3, r2, r3
 800239a:	4a09      	ldr	r2, [pc, #36]	@ (80023c0 <HAL_RCC_ClockConfig+0x1d0>)
 800239c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800239e:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <HAL_RCC_ClockConfig+0x1d4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fd7a 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023c00 	.word	0x40023c00
 80023b8:	40023800 	.word	0x40023800
 80023bc:	08007e60 	.word	0x08007e60
 80023c0:	20000008 	.word	0x20000008
 80023c4:	2000000c 	.word	0x2000000c

080023c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023cc:	b090      	sub	sp, #64	@ 0x40
 80023ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80023d4:	2300      	movs	r3, #0
 80023d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023d8:	2300      	movs	r3, #0
 80023da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e0:	4b59      	ldr	r3, [pc, #356]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x180>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d00d      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x40>
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	f200 80a1 	bhi.w	8002534 <HAL_RCC_GetSysClockFreq+0x16c>
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x34>
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d003      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0x3a>
 80023fa:	e09b      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023fc:	4b53      	ldr	r3, [pc, #332]	@ (800254c <HAL_RCC_GetSysClockFreq+0x184>)
 80023fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002400:	e09b      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002402:	4b53      	ldr	r3, [pc, #332]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x188>)
 8002404:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002406:	e098      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002408:	4b4f      	ldr	r3, [pc, #316]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x180>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002410:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002412:	4b4d      	ldr	r3, [pc, #308]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x180>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d028      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241e:	4b4a      	ldr	r3, [pc, #296]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x180>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	099b      	lsrs	r3, r3, #6
 8002424:	2200      	movs	r2, #0
 8002426:	623b      	str	r3, [r7, #32]
 8002428:	627a      	str	r2, [r7, #36]	@ 0x24
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002430:	2100      	movs	r1, #0
 8002432:	4b47      	ldr	r3, [pc, #284]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x188>)
 8002434:	fb03 f201 	mul.w	r2, r3, r1
 8002438:	2300      	movs	r3, #0
 800243a:	fb00 f303 	mul.w	r3, r0, r3
 800243e:	4413      	add	r3, r2
 8002440:	4a43      	ldr	r2, [pc, #268]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x188>)
 8002442:	fba0 1202 	umull	r1, r2, r0, r2
 8002446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002448:	460a      	mov	r2, r1
 800244a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800244c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800244e:	4413      	add	r3, r2
 8002450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002454:	2200      	movs	r2, #0
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	61fa      	str	r2, [r7, #28]
 800245a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800245e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002462:	f7fd fed1 	bl	8000208 <__aeabi_uldivmod>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4613      	mov	r3, r2
 800246c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800246e:	e053      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002470:	4b35      	ldr	r3, [pc, #212]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x180>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	099b      	lsrs	r3, r3, #6
 8002476:	2200      	movs	r2, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	617a      	str	r2, [r7, #20]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002482:	f04f 0b00 	mov.w	fp, #0
 8002486:	4652      	mov	r2, sl
 8002488:	465b      	mov	r3, fp
 800248a:	f04f 0000 	mov.w	r0, #0
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	0159      	lsls	r1, r3, #5
 8002494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002498:	0150      	lsls	r0, r2, #5
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	ebb2 080a 	subs.w	r8, r2, sl
 80024a2:	eb63 090b 	sbc.w	r9, r3, fp
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024ba:	ebb2 0408 	subs.w	r4, r2, r8
 80024be:	eb63 0509 	sbc.w	r5, r3, r9
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	00eb      	lsls	r3, r5, #3
 80024cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024d0:	00e2      	lsls	r2, r4, #3
 80024d2:	4614      	mov	r4, r2
 80024d4:	461d      	mov	r5, r3
 80024d6:	eb14 030a 	adds.w	r3, r4, sl
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	eb45 030b 	adc.w	r3, r5, fp
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ee:	4629      	mov	r1, r5
 80024f0:	028b      	lsls	r3, r1, #10
 80024f2:	4621      	mov	r1, r4
 80024f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f8:	4621      	mov	r1, r4
 80024fa:	028a      	lsls	r2, r1, #10
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002502:	2200      	movs	r2, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	60fa      	str	r2, [r7, #12]
 8002508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800250c:	f7fd fe7c 	bl	8000208 <__aeabi_uldivmod>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4613      	mov	r3, r2
 8002516:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002518:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x180>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	0c1b      	lsrs	r3, r3, #16
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	3301      	adds	r3, #1
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002528:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800252a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002532:	e002      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4b05      	ldr	r3, [pc, #20]	@ (800254c <HAL_RCC_GetSysClockFreq+0x184>)
 8002536:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800253c:	4618      	mov	r0, r3
 800253e:	3740      	adds	r7, #64	@ 0x40
 8002540:	46bd      	mov	sp, r7
 8002542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	00f42400 	.word	0x00f42400
 8002550:	017d7840 	.word	0x017d7840

08002554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d012      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800257c:	4b69      	ldr	r3, [pc, #420]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a68      	ldr	r2, [pc, #416]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002582:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002586:	6093      	str	r3, [r2, #8]
 8002588:	4b66      	ldr	r3, [pc, #408]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002590:	4964      	ldr	r1, [pc, #400]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d017      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025bc:	4959      	ldr	r1, [pc, #356]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025cc:	d101      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d017      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	494a      	ldr	r1, [pc, #296]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002608:	d101      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800260a:	2301      	movs	r3, #1
 800260c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002626:	2301      	movs	r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 808b 	beq.w	800274e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002638:	4b3a      	ldr	r3, [pc, #232]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	4a39      	ldr	r2, [pc, #228]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002642:	6413      	str	r3, [r2, #64]	@ 0x40
 8002644:	4b37      	ldr	r3, [pc, #220]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002650:	4b35      	ldr	r3, [pc, #212]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a34      	ldr	r2, [pc, #208]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265c:	f7fe fc62 	bl	8000f24 <HAL_GetTick>
 8002660:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002664:	f7fe fc5e 	bl	8000f24 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	@ 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e357      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002676:	4b2c      	ldr	r3, [pc, #176]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002682:	4b28      	ldr	r3, [pc, #160]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800268a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d035      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d02e      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026a0:	4b20      	ldr	r3, [pc, #128]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026c2:	4a18      	ldr	r2, [pc, #96]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026c8:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d114      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fc26 	bl	8000f24 <HAL_GetTick>
 80026d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026da:	e00a      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fc22 	bl	8000f24 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e319      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0ee      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800270a:	d111      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800270c:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800271a:	400b      	ands	r3, r1
 800271c:	4901      	ldr	r1, [pc, #4]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
 8002722:	e00b      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002724:	40023800 	.word	0x40023800
 8002728:	40007000 	.word	0x40007000
 800272c:	0ffffcff 	.word	0x0ffffcff
 8002730:	4baa      	ldr	r3, [pc, #680]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4aa9      	ldr	r2, [pc, #676]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002736:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800273a:	6093      	str	r3, [r2, #8]
 800273c:	4ba7      	ldr	r3, [pc, #668]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002748:	49a4      	ldr	r1, [pc, #656]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274a:	4313      	orrs	r3, r2
 800274c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	d010      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800275a:	4ba0      	ldr	r3, [pc, #640]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800275c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002760:	4a9e      	ldr	r2, [pc, #632]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002762:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002766:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800276a:	4b9c      	ldr	r3, [pc, #624]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002774:	4999      	ldr	r1, [pc, #612]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002788:	4b94      	ldr	r3, [pc, #592]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002796:	4991      	ldr	r1, [pc, #580]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027aa:	4b8c      	ldr	r3, [pc, #560]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027b8:	4988      	ldr	r1, [pc, #544]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027cc:	4b83      	ldr	r3, [pc, #524]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027da:	4980      	ldr	r1, [pc, #512]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027ee:	4b7b      	ldr	r3, [pc, #492]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	4977      	ldr	r1, [pc, #476]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002810:	4b72      	ldr	r3, [pc, #456]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	496f      	ldr	r1, [pc, #444]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002832:	4b6a      	ldr	r3, [pc, #424]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002838:	f023 020c 	bic.w	r2, r3, #12
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002840:	4966      	ldr	r1, [pc, #408]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002854:	4b61      	ldr	r3, [pc, #388]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002862:	495e      	ldr	r1, [pc, #376]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002876:	4b59      	ldr	r3, [pc, #356]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002884:	4955      	ldr	r1, [pc, #340]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002898:	4b50      	ldr	r3, [pc, #320]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a6:	494d      	ldr	r1, [pc, #308]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028ba:	4b48      	ldr	r3, [pc, #288]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c8:	4944      	ldr	r1, [pc, #272]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028dc:	4b3f      	ldr	r3, [pc, #252]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ea:	493c      	ldr	r1, [pc, #240]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028fe:	4b37      	ldr	r3, [pc, #220]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002904:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800290c:	4933      	ldr	r1, [pc, #204]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002920:	4b2e      	ldr	r3, [pc, #184]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002926:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800292e:	492b      	ldr	r1, [pc, #172]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d011      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002942:	4b26      	ldr	r3, [pc, #152]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002948:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002950:	4922      	ldr	r1, [pc, #136]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800295c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002960:	d101      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002962:	2301      	movs	r3, #1
 8002964:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002972:	2301      	movs	r3, #1
 8002974:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002982:	4b16      	ldr	r3, [pc, #88]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002988:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002990:	4912      	ldr	r1, [pc, #72]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029a4:	4b0d      	ldr	r3, [pc, #52]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029b4:	4909      	ldr	r1, [pc, #36]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d006      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80d9 	beq.w	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029d0:	4b02      	ldr	r3, [pc, #8]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a01      	ldr	r2, [pc, #4]	@ (80029dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029da:	e001      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80029dc:	40023800 	.word	0x40023800
 80029e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e2:	f7fe fa9f 	bl	8000f24 <HAL_GetTick>
 80029e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029ea:	f7fe fa9b 	bl	8000f24 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b64      	cmp	r3, #100	@ 0x64
 80029f6:	d901      	bls.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e194      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029fc:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d021      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d11d      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a1c:	4b64      	ldr	r3, [pc, #400]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a22:	0c1b      	lsrs	r3, r3, #16
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a2a:	4b61      	ldr	r3, [pc, #388]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a30:	0e1b      	lsrs	r3, r3, #24
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	019a      	lsls	r2, r3, #6
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	431a      	orrs	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	061b      	lsls	r3, r3, #24
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	071b      	lsls	r3, r3, #28
 8002a50:	4957      	ldr	r1, [pc, #348]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d02e      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a82:	d129      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a84:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a8a:	0c1b      	lsrs	r3, r3, #16
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a92:	4b47      	ldr	r3, [pc, #284]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a98:	0f1b      	lsrs	r3, r3, #28
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	019a      	lsls	r2, r3, #6
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	071b      	lsls	r3, r3, #28
 8002ab8:	493d      	ldr	r1, [pc, #244]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ac6:	f023 021f 	bic.w	r2, r3, #31
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	4937      	ldr	r1, [pc, #220]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01d      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ae4:	4b32      	ldr	r3, [pc, #200]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aea:	0e1b      	lsrs	r3, r3, #24
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002af2:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002af8:	0f1b      	lsrs	r3, r3, #28
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	019a      	lsls	r2, r3, #6
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	041b      	lsls	r3, r3, #16
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	431a      	orrs	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	071b      	lsls	r3, r3, #28
 8002b18:	4925      	ldr	r1, [pc, #148]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d011      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	019a      	lsls	r2, r3, #6
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	071b      	lsls	r3, r3, #28
 8002b48:	4919      	ldr	r1, [pc, #100]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b50:	4b17      	ldr	r3, [pc, #92]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a16      	ldr	r2, [pc, #88]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5c:	f7fe f9e2 	bl	8000f24 <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b64:	f7fe f9de 	bl	8000f24 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	@ 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0d7      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b76:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	f040 80cd 	bne.w	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b8a:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a08      	ldr	r2, [pc, #32]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b96:	f7fe f9c5 	bl	8000f24 <HAL_GetTick>
 8002b9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b9e:	f7fe f9c1 	bl	8000f24 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b64      	cmp	r3, #100	@ 0x64
 8002baa:	d903      	bls.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e0ba      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002bb0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bb4:	4b5e      	ldr	r3, [pc, #376]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bc0:	d0ed      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d02e      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d12a      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bea:	4b51      	ldr	r3, [pc, #324]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf0:	0c1b      	lsrs	r3, r3, #16
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfe:	0f1b      	lsrs	r3, r3, #28
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	019a      	lsls	r2, r3, #6
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	041b      	lsls	r3, r3, #16
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	061b      	lsls	r3, r3, #24
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	071b      	lsls	r3, r3, #28
 8002c1e:	4944      	ldr	r1, [pc, #272]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c26:	4b42      	ldr	r3, [pc, #264]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c2c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	3b01      	subs	r3, #1
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	493d      	ldr	r1, [pc, #244]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d022      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c54:	d11d      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c56:	4b36      	ldr	r3, [pc, #216]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5c:	0e1b      	lsrs	r3, r3, #24
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c64:	4b32      	ldr	r3, [pc, #200]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6a:	0f1b      	lsrs	r3, r3, #28
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	019a      	lsls	r2, r3, #6
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	431a      	orrs	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	4929      	ldr	r1, [pc, #164]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d028      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c9e:	4b24      	ldr	r3, [pc, #144]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca4:	0e1b      	lsrs	r3, r3, #24
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cac:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	019a      	lsls	r2, r3, #6
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	071b      	lsls	r3, r3, #28
 8002cd2:	4917      	ldr	r1, [pc, #92]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ce0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce8:	4911      	ldr	r1, [pc, #68]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0e      	ldr	r2, [pc, #56]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfc:	f7fe f912 	bl	8000f24 <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d04:	f7fe f90e 	bl	8000f24 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	@ 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e007      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d16:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d22:	d1ef      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3720      	adds	r7, #32
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800

08002d34 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e022      	b.n	8002d8c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d105      	bne.n	8002d5e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7fd fe91 	bl	8000a80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2203      	movs	r2, #3
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f814 	bl	8002d94 <HAL_SD_InitCard>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00a      	b.n	8002d8c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b08e      	sub	sp, #56	@ 0x38
 8002d98:	af04      	add	r7, sp, #16
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002db0:	2376      	movs	r3, #118	@ 0x76
 8002db2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681d      	ldr	r5, [r3, #0]
 8002db8:	466c      	mov	r4, sp
 8002dba:	f107 0314 	add.w	r3, r7, #20
 8002dbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002dc6:	f107 0308 	add.w	r3, r7, #8
 8002dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f001 fc83 	bl	80046d8 <SDMMC_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8002dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e059      	b.n	8002e98 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002df2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f001 fcb7 	bl	800476c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e0c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002e0e:	2002      	movs	r0, #2
 8002e10:	f7fe f894 	bl	8000f3c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f001 f8ef 	bl	8003ff8 <SD_PowerON>
 8002e1a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e02e      	b.n	8002e98 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f001 f80e 	bl	8003e5c <SD_InitCard>
 8002e40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e01b      	b.n	8002e98 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 fd11 	bl	8004890 <SDMMC_CmdBlockLength>
 8002e6e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00f      	beq.n	8002e96 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a09      	ldr	r2, [pc, #36]	@ (8002ea0 <HAL_SD_InitCard+0x10c>)
 8002e7c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3728      	adds	r7, #40	@ 0x28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002ea0:	004005ff 	.word	0x004005ff

08002ea4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b092      	sub	sp, #72	@ 0x48
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002eb2:	f7fe f837 	bl	8000f24 <HAL_GetTick>
 8002eb6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e1bd      	b.n	8003252 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	f040 81b0 	bne.w	8003244 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002eea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	441a      	add	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d907      	bls.n	8002f08 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e1a4      	b.n	8003252 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d002      	beq.n	8002f26 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f22:	025b      	lsls	r3, r3, #9
 8002f24:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	025b      	lsls	r3, r3, #9
 8002f30:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002f32:	2390      	movs	r3, #144	@ 0x90
 8002f34:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002f36:	2302      	movs	r3, #2
 8002f38:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f107 0214 	add.w	r2, r7, #20
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f001 fc73 	bl	8004838 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d90a      	bls.n	8002f6e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f64:	4618      	mov	r0, r3
 8002f66:	f001 fcd7 	bl	8004918 <SDMMC_CmdReadMultiBlock>
 8002f6a:	6478      	str	r0, [r7, #68]	@ 0x44
 8002f6c:	e009      	b.n	8002f82 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 fcaa 	bl	80048d4 <SDMMC_CmdReadSingleBlock>
 8002f80:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d012      	beq.n	8002fae <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a7a      	ldr	r2, [pc, #488]	@ (8003178 <HAL_SD_ReadBlocks+0x2d4>)
 8002f8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f96:	431a      	orrs	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e151      	b.n	8003252 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002fb2:	e061      	b.n	8003078 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d03c      	beq.n	800303c <HAL_SD_ReadBlocks+0x198>
 8002fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d039      	beq.n	800303c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fcc:	e033      	b.n	8003036 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 fbac 	bl	8004730 <SDMMC_ReadFIFO>
 8002fd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fea:	3b01      	subs	r3, #1
 8002fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003000:	3b01      	subs	r3, #1
 8003002:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	b2da      	uxtb	r2, r3
 800300a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800300e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003010:	3301      	adds	r3, #1
 8003012:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003016:	3b01      	subs	r3, #1
 8003018:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800301a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301c:	0e1b      	lsrs	r3, r3, #24
 800301e:	b2da      	uxtb	r2, r3
 8003020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003022:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003026:	3301      	adds	r3, #1
 8003028:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800302a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800302c:	3b01      	subs	r3, #1
 800302e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8003030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003032:	3301      	adds	r3, #1
 8003034:	643b      	str	r3, [r7, #64]	@ 0x40
 8003036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003038:	2b07      	cmp	r3, #7
 800303a:	d9c8      	bls.n	8002fce <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800303c:	f7fd ff72 	bl	8000f24 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003048:	429a      	cmp	r2, r3
 800304a:	d902      	bls.n	8003052 <HAL_SD_ReadBlocks+0x1ae>
 800304c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800304e:	2b00      	cmp	r3, #0
 8003050:	d112      	bne.n	8003078 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a48      	ldr	r2, [pc, #288]	@ (8003178 <HAL_SD_ReadBlocks+0x2d4>)
 8003058:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e0ec      	b.n	8003252 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8003082:	2b00      	cmp	r3, #0
 8003084:	d096      	beq.n	8002fb4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d022      	beq.n	80030da <HAL_SD_ReadBlocks+0x236>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d91f      	bls.n	80030da <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d01b      	beq.n	80030da <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 fc9c 	bl	80049e4 <SDMMC_CmdStopTransfer>
 80030ac:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80030ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d012      	beq.n	80030da <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003178 <HAL_SD_ReadBlocks+0x2d4>)
 80030ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030c2:	431a      	orrs	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0bb      	b.n	8003252 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d012      	beq.n	800310e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a22      	ldr	r2, [pc, #136]	@ (8003178 <HAL_SD_ReadBlocks+0x2d4>)
 80030ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f4:	f043 0208 	orr.w	r2, r3, #8
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e0a1      	b.n	8003252 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d012      	beq.n	8003142 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a15      	ldr	r2, [pc, #84]	@ (8003178 <HAL_SD_ReadBlocks+0x2d4>)
 8003122:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003128:	f043 0202 	orr.w	r2, r3, #2
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e087      	b.n	8003252 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d064      	beq.n	800321a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a08      	ldr	r2, [pc, #32]	@ (8003178 <HAL_SD_ReadBlocks+0x2d4>)
 8003156:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06d      	b.n	8003252 <HAL_SD_ReadBlocks+0x3ae>
 8003176:	bf00      	nop
 8003178:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f001 fad5 	bl	8004730 <SDMMC_ReadFIFO>
 8003186:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318a:	b2da      	uxtb	r2, r3
 800318c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003192:	3301      	adds	r3, #1
 8003194:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003198:	3b01      	subs	r3, #1
 800319a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800319c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800319e:	0a1b      	lsrs	r3, r3, #8
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80031a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a8:	3301      	adds	r3, #1
 80031aa:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80031ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ae:	3b01      	subs	r3, #1
 80031b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80031b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ba:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80031bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031be:	3301      	adds	r3, #1
 80031c0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80031c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c4:	3b01      	subs	r3, #1
 80031c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80031c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ca:	0e1b      	lsrs	r3, r3, #24
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80031d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d4:	3301      	adds	r3, #1
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80031d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031da:	3b01      	subs	r3, #1
 80031dc:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80031de:	f7fd fea1 	bl	8000f24 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d902      	bls.n	80031f4 <HAL_SD_ReadBlocks+0x350>
 80031ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d112      	bne.n	800321a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a18      	ldr	r2, [pc, #96]	@ (800325c <HAL_SD_ReadBlocks+0x3b8>)
 80031fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003200:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e01b      	b.n	8003252 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003220:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_SD_ReadBlocks+0x38a>
 8003228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1a6      	bne.n	800317c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003236:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	e006      	b.n	8003252 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	3748      	adds	r7, #72	@ 0x48
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	004005ff 	.word	0x004005ff

08003260 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b092      	sub	sp, #72	@ 0x48
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800326e:	f7fd fe59 	bl	8000f24 <HAL_GetTick>
 8003272:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d107      	bne.n	8003292 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003286:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e165      	b.n	800355e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	f040 8158 	bne.w	8003550 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	441a      	add	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d907      	bls.n	80032c4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e14c      	b.n	800355e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2203      	movs	r2, #3
 80032c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2200      	movs	r2, #0
 80032d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d002      	beq.n	80032e2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80032dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032de:	025b      	lsls	r3, r3, #9
 80032e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
 80032e6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	025b      	lsls	r3, r3, #9
 80032ec:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80032ee:	2390      	movs	r3, #144	@ 0x90
 80032f0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f107 0218 	add.w	r2, r7, #24
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f001 fa95 	bl	8004838 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d90a      	bls.n	800332a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003320:	4618      	mov	r0, r3
 8003322:	f001 fb3d 	bl	80049a0 <SDMMC_CmdWriteMultiBlock>
 8003326:	6478      	str	r0, [r7, #68]	@ 0x44
 8003328:	e009      	b.n	800333e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2210      	movs	r2, #16
 800332e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003336:	4618      	mov	r0, r3
 8003338:	f001 fb10 	bl	800495c <SDMMC_CmdWriteSingleBlock>
 800333c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800333e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003340:	2b00      	cmp	r3, #0
 8003342:	d012      	beq.n	800336a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a87      	ldr	r2, [pc, #540]	@ (8003568 <HAL_SD_WriteBlocks+0x308>)
 800334a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003352:	431a      	orrs	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e0f9      	b.n	800355e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800336e:	e065      	b.n	800343c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d040      	beq.n	8003400 <HAL_SD_WriteBlocks+0x1a0>
 800337e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d03d      	beq.n	8003400 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003384:	2300      	movs	r3, #0
 8003386:	643b      	str	r3, [r7, #64]	@ 0x40
 8003388:	e037      	b.n	80033fa <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800338a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003392:	3301      	adds	r3, #1
 8003394:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003398:	3b01      	subs	r3, #1
 800339a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800339c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	021a      	lsls	r2, r3, #8
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80033a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033aa:	3301      	adds	r3, #1
 80033ac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80033ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b0:	3b01      	subs	r3, #1
 80033b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80033b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	041a      	lsls	r2, r3, #16
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80033c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c2:	3301      	adds	r3, #1
 80033c4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80033c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033c8:	3b01      	subs	r3, #1
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80033cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	061a      	lsls	r2, r3, #24
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80033d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033da:	3301      	adds	r3, #1
 80033dc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80033de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033e0:	3b01      	subs	r3, #1
 80033e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f107 0214 	add.w	r2, r7, #20
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 f9ab 	bl	800474a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80033f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033f6:	3301      	adds	r3, #1
 80033f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80033fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033fc:	2b07      	cmp	r3, #7
 80033fe:	d9c4      	bls.n	800338a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003400:	f7fd fd90 	bl	8000f24 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800340c:	429a      	cmp	r2, r3
 800340e:	d902      	bls.n	8003416 <HAL_SD_WriteBlocks+0x1b6>
 8003410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003412:	2b00      	cmp	r3, #0
 8003414:	d112      	bne.n	800343c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a53      	ldr	r2, [pc, #332]	@ (8003568 <HAL_SD_WriteBlocks+0x308>)
 800341c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003424:	431a      	orrs	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e090      	b.n	800355e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003442:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8003446:	2b00      	cmp	r3, #0
 8003448:	d092      	beq.n	8003370 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d022      	beq.n	800349e <HAL_SD_WriteBlocks+0x23e>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d91f      	bls.n	800349e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003462:	2b03      	cmp	r3, #3
 8003464:	d01b      	beq.n	800349e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f001 faba 	bl	80049e4 <SDMMC_CmdStopTransfer>
 8003470:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a3a      	ldr	r2, [pc, #232]	@ (8003568 <HAL_SD_WriteBlocks+0x308>)
 800347e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003486:	431a      	orrs	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e05f      	b.n	800355e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d012      	beq.n	80034d2 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003568 <HAL_SD_WriteBlocks+0x308>)
 80034b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b8:	f043 0208 	orr.w	r2, r3, #8
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e045      	b.n	800355e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d012      	beq.n	8003506 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a20      	ldr	r2, [pc, #128]	@ (8003568 <HAL_SD_WriteBlocks+0x308>)
 80034e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ec:	f043 0202 	orr.w	r2, r3, #2
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e02b      	b.n	800355e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d012      	beq.n	800353a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a13      	ldr	r2, [pc, #76]	@ (8003568 <HAL_SD_WriteBlocks+0x308>)
 800351a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003520:	f043 0210 	orr.w	r2, r3, #16
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e011      	b.n	800355e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003542:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	e006      	b.n	800355e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003554:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	3748      	adds	r7, #72	@ 0x48
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	004005ff 	.word	0x004005ff

0800356c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003578:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003580:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_SD_IRQHandler+0x2e>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 ff4f 	bl	8004436 <SD_Read_IT>
 8003598:	e15a      	b.n	8003850 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 808d 	beq.w	80036c4 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035b2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b9a      	ldr	r3, [pc, #616]	@ (8003828 <HAL_SD_IRQHandler+0x2bc>)
 80035c0:	400b      	ands	r3, r1
 80035c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d039      	beq.n	8003652 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <HAL_SD_IRQHandler+0x86>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d011      	beq.n	8003616 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 f9f4 	bl	80049e4 <SDMMC_CmdStopTransfer>
 80035fc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f921 	bl	8003858 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800361e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <HAL_SD_IRQHandler+0xd6>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fc ffd6 	bl	80005f4 <HAL_SD_RxCpltCallback>
 8003648:	e102      	b.n	8003850 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fc ffc8 	bl	80005e0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003650:	e0fe      	b.n	8003850 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80f9 	beq.w	8003850 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d011      	beq.n	800368c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f001 f9b9 	bl	80049e4 <SDMMC_CmdStopTransfer>
 8003672:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8e6 	bl	8003858 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	f040 80dc 	bne.w	8003850 <HAL_SD_IRQHandler+0x2e4>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f040 80d6 	bne.w	8003850 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0208 	bic.w	r2, r2, #8
 80036b2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fc ff8f 	bl	80005e0 <HAL_SD_TxCpltCallback>
}
 80036c2:	e0c5      	b.n	8003850 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_SD_IRQHandler+0x178>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fefb 	bl	80044d8 <SD_Write_IT>
 80036e2:	e0b5      	b.n	8003850 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ea:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80ae 	beq.w	8003850 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003706:	f043 0202 	orr.w	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003720:	f043 0208 	orr.w	r2, r3, #8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373a:	f043 0220 	orr.w	r2, r3, #32
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003754:	f043 0210 	orr.w	r2, r3, #16
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003764:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8003774:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f001 f932 	bl	80049e4 <SDMMC_CmdStopTransfer>
 8003780:	4602      	mov	r2, r0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f857 	bl	8003858 <HAL_SD_ErrorCallback>
}
 80037aa:	e051      	b.n	8003850 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d04c      	beq.n	8003850 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d104      	bne.n	80037ca <HAL_SD_IRQHandler+0x25e>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d011      	beq.n	80037ee <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ce:	4a17      	ldr	r2, [pc, #92]	@ (800382c <HAL_SD_IRQHandler+0x2c0>)
 80037d0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fe0c 	bl	80013f4 <HAL_DMA_Abort_IT>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d036      	beq.n	8003850 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 faca 	bl	8003d80 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80037ec:	e030      	b.n	8003850 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d104      	bne.n	8003802 <HAL_SD_IRQHandler+0x296>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d018      	beq.n	8003834 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <HAL_SD_IRQHandler+0x2c4>)
 8003808:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd fdf0 	bl	80013f4 <HAL_DMA_Abort_IT>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01a      	beq.n	8003850 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fae5 	bl	8003dee <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003824:	e014      	b.n	8003850 <HAL_SD_IRQHandler+0x2e4>
 8003826:	bf00      	nop
 8003828:	ffff3ec5 	.word	0xffff3ec5
 800382c:	08003d81 	.word	0x08003d81
 8003830:	08003def 	.word	0x08003def
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7fc febf 	bl	80005cc <HAL_SD_AbortCallback>
}
 800384e:	e7ff      	b.n	8003850 <HAL_SD_IRQHandler+0x2e4>
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800387a:	0f9b      	lsrs	r3, r3, #30
 800387c:	b2da      	uxtb	r2, r3
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003886:	0e9b      	lsrs	r3, r3, #26
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	b2da      	uxtb	r2, r3
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003898:	0e1b      	lsrs	r3, r3, #24
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038aa:	0c1b      	lsrs	r3, r3, #16
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038cc:	0d1b      	lsrs	r3, r3, #20
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038ea:	0bdb      	lsrs	r3, r3, #15
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038fc:	0b9b      	lsrs	r3, r3, #14
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	b2da      	uxtb	r2, r3
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800390e:	0b5b      	lsrs	r3, r3, #13
 8003910:	b2db      	uxtb	r3, r3
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	b2da      	uxtb	r2, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003920:	0b1b      	lsrs	r3, r3, #12
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	b2da      	uxtb	r2, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2200      	movs	r2, #0
 8003932:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003938:	2b00      	cmp	r3, #0
 800393a:	d163      	bne.n	8003a04 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003940:	009a      	lsls	r2, r3, #2
 8003942:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003946:	4013      	ands	r3, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800394c:	0f92      	lsrs	r2, r2, #30
 800394e:	431a      	orrs	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003958:	0edb      	lsrs	r3, r3, #27
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	b2da      	uxtb	r2, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800396a:	0e1b      	lsrs	r3, r3, #24
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	b2da      	uxtb	r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397c:	0d5b      	lsrs	r3, r3, #21
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	b2da      	uxtb	r2, r3
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800398e:	0c9b      	lsrs	r3, r3, #18
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	b2da      	uxtb	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039a0:	0bdb      	lsrs	r3, r3, #15
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	7e1b      	ldrb	r3, [r3, #24]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	3302      	adds	r3, #2
 80039c4:	2201      	movs	r2, #1
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80039ce:	fb03 f202 	mul.w	r2, r3, r2
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	7a1b      	ldrb	r3, [r3, #8]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	2201      	movs	r2, #1
 80039e2:	409a      	lsls	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80039f0:	0a52      	lsrs	r2, r2, #9
 80039f2:	fb03 f202 	mul.w	r2, r3, r2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a00:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a02:	e031      	b.n	8003a68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d11d      	bne.n	8003a48 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a10:	041b      	lsls	r3, r3, #16
 8003a12:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	3301      	adds	r3, #1
 8003a28:	029a      	lsls	r2, r3, #10
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a3c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a46:	e00f      	b.n	8003a68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a58      	ldr	r2, [pc, #352]	@ (8003bb0 <HAL_SD_GetCardCSD+0x344>)
 8003a4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e09d      	b.n	8003ba4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a6c:	0b9b      	lsrs	r3, r3, #14
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a7e:	09db      	lsrs	r3, r3, #7
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa0:	0fdb      	lsrs	r3, r3, #31
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aac:	0f5b      	lsrs	r3, r3, #29
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abe:	0e9b      	lsrs	r3, r3, #26
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad0:	0d9b      	lsrs	r3, r3, #22
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	0d5b      	lsrs	r3, r3, #21
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afe:	0c1b      	lsrs	r3, r3, #16
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b12:	0bdb      	lsrs	r3, r3, #15
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b26:	0b9b      	lsrs	r3, r3, #14
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3a:	0b5b      	lsrs	r3, r3, #13
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	0b1b      	lsrs	r3, r3, #12
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b62:	0a9b      	lsrs	r3, r3, #10
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	004005ff 	.word	0x004005ff

08003bb4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003c0c:	b5b0      	push	{r4, r5, r7, lr}
 8003c0e:	b08e      	sub	sp, #56	@ 0x38
 8003c10:	af04      	add	r7, sp, #16
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2203      	movs	r2, #3
 8003c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d02e      	beq.n	8003c8a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c32:	d106      	bne.n	8003c42 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c40:	e029      	b.n	8003c96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c48:	d10a      	bne.n	8003c60 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa8a 	bl	8004164 <SD_WideBus_Enable>
 8003c50:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c5e:	e01a      	b.n	8003c96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fac7 	bl	80041fa <SD_WideBus_Disable>
 8003c6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c7a:	e00c      	b.n	8003c96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c80:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c88:	e005      	b.n	8003c96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a26      	ldr	r2, [pc, #152]	@ (8003d3c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003ca4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003cb4:	e01f      	b.n	8003cf6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681d      	ldr	r5, [r3, #0]
 8003cdc:	466c      	mov	r4, sp
 8003cde:	f107 0314 	add.w	r3, r7, #20
 8003ce2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ce6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cea:	f107 0308 	add.w	r3, r7, #8
 8003cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	f000 fcf1 	bl	80046d8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fdc6 	bl	8004890 <SDMMC_CmdBlockLength>
 8003d04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00c      	beq.n	8003d26 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0a      	ldr	r2, [pc, #40]	@ (8003d3c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003d12:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8003d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3728      	adds	r7, #40	@ 0x28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bdb0      	pop	{r4, r5, r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	004005ff 	.word	0x004005ff

08003d40 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003d4c:	f107 030c 	add.w	r3, r7, #12
 8003d50:	4619      	mov	r1, r3
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f9de 	bl	8004114 <SD_SendStatus>
 8003d58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	0a5b      	lsrs	r3, r3, #9
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003d76:	693b      	ldr	r3, [r7, #16]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003d96:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff ffd1 	bl	8003d40 <HAL_SD_GetCardState>
 8003d9e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b06      	cmp	r3, #6
 8003db2:	d002      	beq.n	8003dba <SD_DMATxAbort+0x3a>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	d10a      	bne.n	8003dd0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fe10 	bl	80049e4 <SDMMC_CmdStopTransfer>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7fc fbf7 	bl	80005cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003dde:	e002      	b.n	8003de6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f7ff fd39 	bl	8003858 <HAL_SD_ErrorCallback>
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003e04:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f7ff ff9a 	bl	8003d40 <HAL_SD_GetCardState>
 8003e0c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d002      	beq.n	8003e28 <SD_DMARxAbort+0x3a>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b05      	cmp	r3, #5
 8003e26:	d10a      	bne.n	8003e3e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fdd9 	bl	80049e4 <SDMMC_CmdStopTransfer>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7fc fbc0 	bl	80005cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003e4c:	e002      	b.n	8003e54 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff fd02 	bl	8003858 <HAL_SD_ErrorCallback>
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e5c:	b5b0      	push	{r4, r5, r7, lr}
 8003e5e:	b094      	sub	sp, #80	@ 0x50
 8003e60:	af04      	add	r7, sp, #16
 8003e62:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003e64:	2301      	movs	r3, #1
 8003e66:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fc8b 	bl	8004788 <SDMMC_GetPowerState>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e78:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003e7c:	e0b8      	b.n	8003ff0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d02f      	beq.n	8003ee6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 feb5 	bl	8004bfa <SDMMC_CmdSendCID>
 8003e90:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <SD_InitCard+0x40>
    {
      return errorstate;
 8003e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e9a:	e0a9      	b.n	8003ff0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fcb5 	bl	8004812 <SDMMC_GetResponse>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fcac 	bl	8004812 <SDMMC_GetResponse>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2108      	movs	r1, #8
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fca3 	bl	8004812 <SDMMC_GetResponse>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	210c      	movs	r1, #12
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fc9a 	bl	8004812 <SDMMC_GetResponse>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d00d      	beq.n	8003f0a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f107 020e 	add.w	r2, r7, #14
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 febb 	bl	8004c74 <SDMMC_CmdSetRelAdd>
 8003efe:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <SD_InitCard+0xae>
    {
      return errorstate;
 8003f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f08:	e072      	b.n	8003ff0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d036      	beq.n	8003f80 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003f12:	89fb      	ldrh	r3, [r7, #14]
 8003f14:	461a      	mov	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f22:	041b      	lsls	r3, r3, #16
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f000 fe85 	bl	8004c36 <SDMMC_CmdSendCSD>
 8003f2c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f36:	e05b      	b.n	8003ff0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fc67 	bl	8004812 <SDMMC_GetResponse>
 8003f44:	4602      	mov	r2, r0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2104      	movs	r1, #4
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fc5e 	bl	8004812 <SDMMC_GetResponse>
 8003f56:	4602      	mov	r2, r0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2108      	movs	r1, #8
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fc55 	bl	8004812 <SDMMC_GetResponse>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	210c      	movs	r1, #12
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fc4c 	bl	8004812 <SDMMC_GetResponse>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2104      	movs	r1, #4
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fc43 	bl	8004812 <SDMMC_GetResponse>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	0d1a      	lsrs	r2, r3, #20
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003f94:	f107 0310 	add.w	r3, r7, #16
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fc66 	bl	800386c <HAL_SD_GetCardCSD>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fa6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003faa:	e021      	b.n	8003ff0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6819      	ldr	r1, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb4:	041b      	lsls	r3, r3, #16
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	461c      	mov	r4, r3
 8003fba:	4615      	mov	r5, r2
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	462b      	mov	r3, r5
 8003fc0:	4608      	mov	r0, r1
 8003fc2:	f000 fd31 	bl	8004a28 <SDMMC_CmdSelDesel>
 8003fc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <SD_InitCard+0x176>
  {
    return errorstate;
 8003fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd0:	e00e      	b.n	8003ff0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681d      	ldr	r5, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	466c      	mov	r4, sp
 8003fda:	f103 0210 	add.w	r2, r3, #16
 8003fde:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fe0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fe8:	4628      	mov	r0, r5
 8003fea:	f000 fb75 	bl	80046d8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3740      	adds	r7, #64	@ 0x40
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bdb0      	pop	{r4, r5, r7, pc}

08003ff8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	2300      	movs	r3, #0
 800400a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fd2c 	bl	8004a6e <SDMMC_CmdGoIdleState>
 8004016:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <SD_PowerON+0x2a>
  {
    return errorstate;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	e072      	b.n	8004108 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fd3f 	bl	8004aaa <SDMMC_CmdOperCond>
 800402c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fd15 	bl	8004a6e <SDMMC_CmdGoIdleState>
 8004044:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <SD_PowerON+0x5e>
    {
      return errorstate;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	e05b      	b.n	8004108 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800405a:	2b01      	cmp	r3, #1
 800405c:	d137      	bne.n	80040ce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fd3f 	bl	8004ae8 <SDMMC_CmdAppCommand>
 800406a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d02d      	beq.n	80040ce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004072:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004076:	e047      	b.n	8004108 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fd32 	bl	8004ae8 <SDMMC_CmdAppCommand>
 8004084:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <SD_PowerON+0x98>
    {
      return errorstate;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	e03b      	b.n	8004108 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	491e      	ldr	r1, [pc, #120]	@ (8004110 <SD_PowerON+0x118>)
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fd48 	bl	8004b2c <SDMMC_CmdAppOperCommand>
 800409c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040a4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80040a8:	e02e      	b.n	8004108 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2100      	movs	r1, #0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fbae 	bl	8004812 <SDMMC_GetResponse>
 80040b6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	0fdb      	lsrs	r3, r3, #31
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <SD_PowerON+0xcc>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <SD_PowerON+0xce>
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]

    count++;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	3301      	adds	r3, #1
 80040cc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d802      	bhi.n	80040de <SD_PowerON+0xe6>
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0cc      	beq.n	8004078 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d902      	bls.n	80040ee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80040e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040ec:	e00c      	b.n	8004108 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80040fe:	e002      	b.n	8004106 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	c1100000 	.word	0xc1100000

08004114 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004124:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004128:	e018      	b.n	800415c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004132:	041b      	lsls	r3, r3, #16
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 fdbd 	bl	8004cb6 <SDMMC_CmdSendStatus>
 800413c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	e009      	b.n	800415c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fb5f 	bl	8004812 <SDMMC_GetResponse>
 8004154:	4602      	mov	r2, r0
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	2300      	movs	r3, #0
 8004172:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fb49 	bl	8004812 <SDMMC_GetResponse>
 8004180:	4603      	mov	r3, r0
 8004182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004186:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800418a:	d102      	bne.n	8004192 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800418c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004190:	e02f      	b.n	80041f2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004192:	f107 030c 	add.w	r3, r7, #12
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f879 	bl	8004290 <SD_FindSCR>
 800419e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	e023      	b.n	80041f2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01c      	beq.n	80041ee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041bc:	041b      	lsls	r3, r3, #16
 80041be:	4619      	mov	r1, r3
 80041c0:	4610      	mov	r0, r2
 80041c2:	f000 fc91 	bl	8004ae8 <SDMMC_CmdAppCommand>
 80041c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	e00f      	b.n	80041f2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2102      	movs	r1, #2
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fccb 	bl	8004b74 <SDMMC_CmdBusWidth>
 80041de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	e003      	b.n	80041f2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e001      	b.n	80041f2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80041ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b086      	sub	sp, #24
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fafe 	bl	8004812 <SDMMC_GetResponse>
 8004216:	4603      	mov	r3, r0
 8004218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004220:	d102      	bne.n	8004228 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004222:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004226:	e02f      	b.n	8004288 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004228:	f107 030c 	add.w	r3, r7, #12
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f82e 	bl	8004290 <SD_FindSCR>
 8004234:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	e023      	b.n	8004288 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01c      	beq.n	8004284 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004252:	041b      	lsls	r3, r3, #16
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f000 fc46 	bl	8004ae8 <SDMMC_CmdAppCommand>
 800425c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	e00f      	b.n	8004288 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2100      	movs	r1, #0
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fc80 	bl	8004b74 <SDMMC_CmdBusWidth>
 8004274:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	e003      	b.n	8004288 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004280:	2300      	movs	r3, #0
 8004282:	e001      	b.n	8004288 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004284:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004290:	b590      	push	{r4, r7, lr}
 8004292:	b08f      	sub	sp, #60	@ 0x3c
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800429a:	f7fc fe43 	bl	8000f24 <HAL_GetTick>
 800429e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2108      	movs	r1, #8
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 faea 	bl	8004890 <SDMMC_CmdBlockLength>
 80042bc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80042be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80042c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c6:	e0b2      	b.n	800442e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f000 fc07 	bl	8004ae8 <SDMMC_CmdAppCommand>
 80042da:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80042dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80042e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e4:	e0a3      	b.n	800442e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80042ec:	2308      	movs	r3, #8
 80042ee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80042f0:	2330      	movs	r3, #48	@ 0x30
 80042f2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80042f4:	2302      	movs	r3, #2
 80042f6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80042fc:	2301      	movs	r3, #1
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f107 0210 	add.w	r2, r7, #16
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fa94 	bl	8004838 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fc4f 	bl	8004bb8 <SDMMC_CmdSendSCR>
 800431a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431e:	2b00      	cmp	r3, #0
 8004320:	d02a      	beq.n	8004378 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004324:	e083      	b.n	800442e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00f      	beq.n	8004354 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6819      	ldr	r1, [r3, #0]
 8004338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	f107 0208 	add.w	r2, r7, #8
 8004340:	18d4      	adds	r4, r2, r3
 8004342:	4608      	mov	r0, r1
 8004344:	f000 f9f4 	bl	8004730 <SDMMC_ReadFIFO>
 8004348:	4603      	mov	r3, r0
 800434a:	6023      	str	r3, [r4, #0]
      index++;
 800434c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434e:	3301      	adds	r3, #1
 8004350:	637b      	str	r3, [r7, #52]	@ 0x34
 8004352:	e006      	b.n	8004362 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800435a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d012      	beq.n	8004388 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004362:	f7fc fddf 	bl	8000f24 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d102      	bne.n	8004378 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004372:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004376:	e05a      	b.n	800442e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0cf      	beq.n	8004326 <SD_FindSCR+0x96>
 8004386:	e000      	b.n	800438a <SD_FindSCR+0xfa>
      break;
 8004388:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2208      	movs	r2, #8
 800439e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80043a0:	2308      	movs	r3, #8
 80043a2:	e044      	b.n	800442e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2202      	movs	r2, #2
 80043b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80043ba:	2302      	movs	r3, #2
 80043bc:	e037      	b.n	800442e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2220      	movs	r2, #32
 80043d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80043d4:	2320      	movs	r3, #32
 80043d6:	e02a      	b.n	800442e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f240 523a 	movw	r2, #1338	@ 0x53a
 80043e0:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	061a      	lsls	r2, r3, #24
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80043ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	0a1b      	lsrs	r3, r3, #8
 80043f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80043f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	0e1b      	lsrs	r3, r3, #24
 80043fe:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004402:	601a      	str	r2, [r3, #0]
    scr++;
 8004404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004406:	3304      	adds	r3, #4
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	061a      	lsls	r2, r3, #24
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004416:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004420:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	0e1b      	lsrs	r3, r3, #24
 8004426:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	373c      	adds	r7, #60	@ 0x3c
 8004432:	46bd      	mov	sp, r7
 8004434:	bd90      	pop	{r4, r7, pc}

08004436 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004442:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004448:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d03f      	beq.n	80044d0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	e033      	b.n	80044be <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f968 	bl	8004730 <SDMMC_ReadFIFO>
 8004460:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	701a      	strb	r2, [r3, #0]
      tmp++;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3301      	adds	r3, #1
 800446e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	3b01      	subs	r3, #1
 8004474:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	0a1b      	lsrs	r3, r3, #8
 800447a:	b2da      	uxtb	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3301      	adds	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	3b01      	subs	r3, #1
 800448a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	0c1b      	lsrs	r3, r3, #16
 8004490:	b2da      	uxtb	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3301      	adds	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	3b01      	subs	r3, #1
 80044a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	0e1b      	lsrs	r3, r3, #24
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3301      	adds	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	3301      	adds	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b07      	cmp	r3, #7
 80044c2:	d9c8      	bls.n	8004456 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80044d0:	bf00      	nop
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ea:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d043      	beq.n	800457a <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	e037      	b.n	8004568 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3301      	adds	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	3b01      	subs	r3, #1
 8004508:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	021a      	lsls	r2, r3, #8
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4313      	orrs	r3, r2
 8004514:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	3301      	adds	r3, #1
 800451a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	3b01      	subs	r3, #1
 8004520:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	041a      	lsls	r2, r3, #16
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4313      	orrs	r3, r2
 800452c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3301      	adds	r3, #1
 8004532:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	3b01      	subs	r3, #1
 8004538:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	061a      	lsls	r2, r3, #24
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4313      	orrs	r3, r2
 8004544:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3301      	adds	r3, #1
 800454a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	3b01      	subs	r3, #1
 8004550:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f107 0208 	add.w	r2, r7, #8
 800455a:	4611      	mov	r1, r2
 800455c:	4618      	mov	r0, r3
 800455e:	f000 f8f4 	bl	800474a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	3301      	adds	r3, #1
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b07      	cmp	r3, #7
 800456c:	d9c4      	bls.n	80044f8 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800457a:	bf00      	nop
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e09d      	b.n	80046d0 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	2b00      	cmp	r3, #0
 800459a:	d108      	bne.n	80045ae <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045a4:	d009      	beq.n	80045ba <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	61da      	str	r2, [r3, #28]
 80045ac:	e005      	b.n	80045ba <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d106      	bne.n	80045da <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7fc fb61 	bl	8000c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045f0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045fa:	d902      	bls.n	8004602 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	e002      	b.n	8004608 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004606:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004610:	d007      	beq.n	8004622 <HAL_SPI_Init+0xa0>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800461a:	d002      	beq.n	8004622 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004664:	ea42 0103 	orr.w	r1, r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f003 0204 	and.w	r2, r3, #4
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800469e:	ea42 0103 	orr.w	r1, r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69da      	ldr	r2, [r3, #28]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80046d8:	b084      	sub	sp, #16
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	f107 001c 	add.w	r0, r7, #28
 80046e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80046ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80046f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80046f2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80046f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80046f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80046fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80046fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80046fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004702:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	4b07      	ldr	r3, [pc, #28]	@ (800472c <SDMMC_Init+0x54>)
 8004710:	4013      	ands	r3, r2
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	b004      	add	sp, #16
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	ffff8100 	.word	0xffff8100

08004730 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2203      	movs	r2, #3
 8004778:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0303 	and.w	r3, r3, #3
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80047c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80047ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	4b06      	ldr	r3, [pc, #24]	@ (80047f4 <SDMMC_SendCommand+0x50>)
 80047dc:	4013      	ands	r3, r2
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	fffff000 	.word	0xfffff000

080047f8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	b2db      	uxtb	r3, r3
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3314      	adds	r3, #20
 8004820:	461a      	mov	r2, r3
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	4413      	add	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
}  
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800485e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004864:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800486a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004876:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004882:	2300      	movs	r3, #0

}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800489e:	2310      	movs	r3, #16
 80048a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048a2:	2340      	movs	r3, #64	@ 0x40
 80048a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048b0:	f107 0308 	add.w	r3, r7, #8
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff ff74 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80048bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c0:	2110      	movs	r1, #16
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fa1a 	bl	8004cfc <SDMMC_GetCmdResp1>
 80048c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048ca:	69fb      	ldr	r3, [r7, #28]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3720      	adds	r7, #32
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80048e2:	2311      	movs	r3, #17
 80048e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048e6:	2340      	movs	r3, #64	@ 0x40
 80048e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048f4:	f107 0308 	add.w	r3, r7, #8
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff ff52 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004904:	2111      	movs	r1, #17
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f9f8 	bl	8004cfc <SDMMC_GetCmdResp1>
 800490c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800490e:	69fb      	ldr	r3, [r7, #28]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3720      	adds	r7, #32
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004926:	2312      	movs	r3, #18
 8004928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800492a:	2340      	movs	r3, #64	@ 0x40
 800492c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004936:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004938:	f107 0308 	add.w	r3, r7, #8
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff ff30 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004948:	2112      	movs	r1, #18
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f9d6 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004952:	69fb      	ldr	r3, [r7, #28]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3720      	adds	r7, #32
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800496a:	2318      	movs	r3, #24
 800496c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800496e:	2340      	movs	r3, #64	@ 0x40
 8004970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800497a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800497c:	f107 0308 	add.w	r3, r7, #8
 8004980:	4619      	mov	r1, r3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff ff0e 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800498c:	2118      	movs	r1, #24
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9b4 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004996:	69fb      	ldr	r3, [r7, #28]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80049ae:	2319      	movs	r3, #25
 80049b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80049b2:	2340      	movs	r3, #64	@ 0x40
 80049b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049c0:	f107 0308 	add.w	r3, r7, #8
 80049c4:	4619      	mov	r1, r3
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff feec 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80049cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d0:	2119      	movs	r1, #25
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f992 	bl	8004cfc <SDMMC_GetCmdResp1>
 80049d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049da:	69fb      	ldr	r3, [r7, #28]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3720      	adds	r7, #32
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80049f0:	230c      	movs	r3, #12
 80049f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80049f4:	2340      	movs	r3, #64	@ 0x40
 80049f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a02:	f107 0308 	add.w	r3, r7, #8
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fecb 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004a0e:	4a05      	ldr	r2, [pc, #20]	@ (8004a24 <SDMMC_CmdStopTransfer+0x40>)
 8004a10:	210c      	movs	r1, #12
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f972 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a1a:	69fb      	ldr	r3, [r7, #28]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3720      	adds	r7, #32
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	05f5e100 	.word	0x05f5e100

08004a28 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	@ 0x28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004a38:	2307      	movs	r3, #7
 8004a3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a3c:	2340      	movs	r3, #64	@ 0x40
 8004a3e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a48:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a4a:	f107 0310 	add.w	r3, r7, #16
 8004a4e:	4619      	mov	r1, r3
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff fea7 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5a:	2107      	movs	r1, #7
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f94d 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004a62:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3728      	adds	r7, #40	@ 0x28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b088      	sub	sp, #32
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a8c:	f107 0308 	add.w	r3, r7, #8
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fe86 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fb67 	bl	800516c <SDMMC_GetCmdError>
 8004a9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b088      	sub	sp, #32
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004ab2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004ab6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004ab8:	2308      	movs	r3, #8
 8004aba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004abc:	2340      	movs	r3, #64	@ 0x40
 8004abe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ac8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004aca:	f107 0308 	add.w	r3, r7, #8
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff fe67 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fafa 	bl	80050d0 <SDMMC_GetCmdResp7>
 8004adc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ade:	69fb      	ldr	r3, [r7, #28]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3720      	adds	r7, #32
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004af6:	2337      	movs	r3, #55	@ 0x37
 8004af8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004afa:	2340      	movs	r3, #64	@ 0x40
 8004afc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b08:	f107 0308 	add.w	r3, r7, #8
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff fe48 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b18:	2137      	movs	r1, #55	@ 0x37
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f8ee 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004b20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b22:	69fb      	ldr	r3, [r7, #28]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3720      	adds	r7, #32
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	4b0d      	ldr	r3, [pc, #52]	@ (8004b70 <SDMMC_CmdAppOperCommand+0x44>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004b3e:	2329      	movs	r3, #41	@ 0x29
 8004b40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b42:	2340      	movs	r3, #64	@ 0x40
 8004b44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b50:	f107 0308 	add.w	r3, r7, #8
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff fe24 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fa03 	bl	8004f68 <SDMMC_GetCmdResp3>
 8004b62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b64:	69fb      	ldr	r3, [r7, #28]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	80100000 	.word	0x80100000

08004b74 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004b82:	2306      	movs	r3, #6
 8004b84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b86:	2340      	movs	r3, #64	@ 0x40
 8004b88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b94:	f107 0308 	add.w	r3, r7, #8
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fe02 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8004ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba4:	2106      	movs	r1, #6
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f8a8 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004bac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bae:	69fb      	ldr	r3, [r7, #28]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004bc4:	2333      	movs	r3, #51	@ 0x33
 8004bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004bc8:	2340      	movs	r3, #64	@ 0x40
 8004bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bd6:	f107 0308 	add.w	r3, r7, #8
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fde1 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004be6:	2133      	movs	r1, #51	@ 0x33
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f887 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004bee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b088      	sub	sp, #32
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004c06:	2302      	movs	r3, #2
 8004c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004c0a:	23c0      	movs	r3, #192	@ 0xc0
 8004c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c18:	f107 0308 	add.w	r3, r7, #8
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff fdc0 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f957 	bl	8004ed8 <SDMMC_GetCmdResp2>
 8004c2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3720      	adds	r7, #32
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b088      	sub	sp, #32
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004c44:	2309      	movs	r3, #9
 8004c46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004c48:	23c0      	movs	r3, #192	@ 0xc0
 8004c4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c56:	f107 0308 	add.w	r3, r7, #8
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff fda1 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f938 	bl	8004ed8 <SDMMC_GetCmdResp2>
 8004c68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3720      	adds	r7, #32
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004c82:	2303      	movs	r3, #3
 8004c84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c86:	2340      	movs	r3, #64	@ 0x40
 8004c88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c94:	f107 0308 	add.w	r3, r7, #8
 8004c98:	4619      	mov	r1, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff fd82 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	2103      	movs	r1, #3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f99d 	bl	8004fe4 <SDMMC_GetCmdResp6>
 8004caa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cac:	69fb      	ldr	r3, [r7, #28]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3720      	adds	r7, #32
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b088      	sub	sp, #32
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004cc4:	230d      	movs	r3, #13
 8004cc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004cc8:	2340      	movs	r3, #64	@ 0x40
 8004cca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004cd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cd6:	f107 0308 	add.w	r3, r7, #8
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff fd61 	bl	80047a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce6:	210d      	movs	r1, #13
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f807 	bl	8004cfc <SDMMC_GetCmdResp1>
 8004cee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	460b      	mov	r3, r1
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004d0a:	4b70      	ldr	r3, [pc, #448]	@ (8004ecc <SDMMC_GetCmdResp1+0x1d0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a70      	ldr	r2, [pc, #448]	@ (8004ed0 <SDMMC_GetCmdResp1+0x1d4>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	0a5a      	lsrs	r2, r3, #9
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	fb02 f303 	mul.w	r3, r2, r3
 8004d1c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	1e5a      	subs	r2, r3, #1
 8004d22:	61fa      	str	r2, [r7, #28]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004d2c:	e0c9      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d32:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0ef      	beq.n	8004d1e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1ea      	bne.n	8004d1e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2204      	movs	r2, #4
 8004d58:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d5a:	2304      	movs	r3, #4
 8004d5c:	e0b1      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d004      	beq.n	8004d74 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0a6      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	22c5      	movs	r2, #197	@ 0xc5
 8004d78:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff fd3c 	bl	80047f8 <SDMMC_GetCommandResponse>
 8004d80:	4603      	mov	r3, r0
 8004d82:	461a      	mov	r2, r3
 8004d84:	7afb      	ldrb	r3, [r7, #11]
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d001      	beq.n	8004d8e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e099      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004d8e:	2100      	movs	r1, #0
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7ff fd3e 	bl	8004812 <SDMMC_GetResponse>
 8004d96:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ed4 <SDMMC_GetCmdResp1+0x1d8>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e08d      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da02      	bge.n	8004db2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004dac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004db0:	e087      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004dbc:	2340      	movs	r3, #64	@ 0x40
 8004dbe:	e080      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004dca:	2380      	movs	r3, #128	@ 0x80
 8004dcc:	e079      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004dd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ddc:	e071      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dec:	e069      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004df8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dfc:	e061      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004e08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e0c:	e059      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e1c:	e051      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e2c:	e049      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004e38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e3c:	e041      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004e48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e4c:	e039      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004e58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e5c:	e031      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004e68:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004e6c:	e029      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004e78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e7c:	e021      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004e88:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004e8c:	e019      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004e98:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004e9c:	e011      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004ea8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004eac:	e009      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004eb8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004ebc:	e001      	b.n	8004ec2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004ebe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000008 	.word	0x20000008
 8004ed0:	10624dd3 	.word	0x10624dd3
 8004ed4:	fdffe008 	.word	0xfdffe008

08004ed8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f60 <SDMMC_GetCmdResp2+0x88>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8004f64 <SDMMC_GetCmdResp2+0x8c>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	0a5b      	lsrs	r3, r3, #9
 8004eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef0:	fb02 f303 	mul.w	r3, r2, r3
 8004ef4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1e5a      	subs	r2, r3, #1
 8004efa:	60fa      	str	r2, [r7, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004f04:	e026      	b.n	8004f54 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0ef      	beq.n	8004ef6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1ea      	bne.n	8004ef6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f32:	2304      	movs	r3, #4
 8004f34:	e00e      	b.n	8004f54 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e003      	b.n	8004f54 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	22c5      	movs	r2, #197	@ 0xc5
 8004f50:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	20000008 	.word	0x20000008
 8004f64:	10624dd3 	.word	0x10624dd3

08004f68 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f70:	4b1a      	ldr	r3, [pc, #104]	@ (8004fdc <SDMMC_GetCmdResp3+0x74>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe0 <SDMMC_GetCmdResp3+0x78>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	0a5b      	lsrs	r3, r3, #9
 8004f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f80:	fb02 f303 	mul.w	r3, r2, r3
 8004f84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1e5a      	subs	r2, r3, #1
 8004f8a:	60fa      	str	r2, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d102      	bne.n	8004f96 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004f94:	e01b      	b.n	8004fce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0ef      	beq.n	8004f86 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ea      	bne.n	8004f86 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	e003      	b.n	8004fce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	22c5      	movs	r2, #197	@ 0xc5
 8004fca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000008 	.word	0x20000008
 8004fe0:	10624dd3 	.word	0x10624dd3

08004fe4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	460b      	mov	r3, r1
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ff2:	4b35      	ldr	r3, [pc, #212]	@ (80050c8 <SDMMC_GetCmdResp6+0xe4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a35      	ldr	r2, [pc, #212]	@ (80050cc <SDMMC_GetCmdResp6+0xe8>)
 8004ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffc:	0a5b      	lsrs	r3, r3, #9
 8004ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	1e5a      	subs	r2, r3, #1
 800500c:	61fa      	str	r2, [r7, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005012:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005016:	e052      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0ef      	beq.n	8005008 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1ea      	bne.n	8005008 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2204      	movs	r2, #4
 8005042:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005044:	2304      	movs	r3, #4
 8005046:	e03a      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d004      	beq.n	800505e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800505a:	2301      	movs	r3, #1
 800505c:	e02f      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff fbca 	bl	80047f8 <SDMMC_GetCommandResponse>
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	7afb      	ldrb	r3, [r7, #11]
 800506a:	4293      	cmp	r3, r2
 800506c:	d001      	beq.n	8005072 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800506e:	2301      	movs	r3, #1
 8005070:	e025      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	22c5      	movs	r2, #197	@ 0xc5
 8005076:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005078:	2100      	movs	r1, #0
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7ff fbc9 	bl	8004812 <SDMMC_GetResponse>
 8005080:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	0c1b      	lsrs	r3, r3, #16
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005096:	2300      	movs	r3, #0
 8005098:	e011      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80050a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80050a8:	e009      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80050b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050b8:	e001      	b.n	80050be <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80050ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000008 	.word	0x20000008
 80050cc:	10624dd3 	.word	0x10624dd3

080050d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050d8:	4b22      	ldr	r3, [pc, #136]	@ (8005164 <SDMMC_GetCmdResp7+0x94>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a22      	ldr	r2, [pc, #136]	@ (8005168 <SDMMC_GetCmdResp7+0x98>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	0a5b      	lsrs	r3, r3, #9
 80050e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e8:	fb02 f303 	mul.w	r3, r2, r3
 80050ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1e5a      	subs	r2, r3, #1
 80050f2:	60fa      	str	r2, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d102      	bne.n	80050fe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80050fc:	e02c      	b.n	8005158 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005102:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0ef      	beq.n	80050ee <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1ea      	bne.n	80050ee <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2204      	movs	r2, #4
 8005128:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800512a:	2304      	movs	r3, #4
 800512c:	e014      	b.n	8005158 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005140:	2301      	movs	r3, #1
 8005142:	e009      	b.n	8005158 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2240      	movs	r2, #64	@ 0x40
 8005154:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005156:	2300      	movs	r3, #0
  
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	20000008 	.word	0x20000008
 8005168:	10624dd3 	.word	0x10624dd3

0800516c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005174:	4b11      	ldr	r3, [pc, #68]	@ (80051bc <SDMMC_GetCmdError+0x50>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a11      	ldr	r2, [pc, #68]	@ (80051c0 <SDMMC_GetCmdError+0x54>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	0a5b      	lsrs	r3, r3, #9
 8005180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005184:	fb02 f303 	mul.w	r3, r2, r3
 8005188:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1e5a      	subs	r2, r3, #1
 800518e:	60fa      	str	r2, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005194:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005198:	e009      	b.n	80051ae <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f1      	beq.n	800518a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	22c5      	movs	r2, #197	@ 0xc5
 80051aa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000008 	.word	0x20000008
 80051c0:	10624dd3 	.word	0x10624dd3

080051c4 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS
disk_status(BYTE pdrv /* Physical drive nmuber to identify the drive */
)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	71fb      	strb	r3, [r7, #7]
  if (pdrv)
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <disk_status+0x14>
  {
    return STA_NOINIT;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e002      	b.n	80051de <disk_status+0x1a>
  }
  return Stat;
 80051d8:	4b04      	ldr	r3, [pc, #16]	@ (80051ec <disk_status+0x28>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	b2db      	uxtb	r3, r3
}
 80051de:	4618      	mov	r0, r3
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	20000011 	.word	0x20000011

080051f0 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS
disk_initialize(BYTE pdrv /* Physical drive nmuber to identify the drive */
)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80051fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <disk_initialize+0x38>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
  if (BSP_SD_SDMMC_Init() == MSD_OK)
 8005200:	f7fb f97a 	bl	80004f8 <BSP_SD_SDMMC_Init>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <disk_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800520a:	4b07      	ldr	r3, [pc, #28]	@ (8005228 <disk_initialize+0x38>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	b2da      	uxtb	r2, r3
 8005216:	4b04      	ldr	r3, [pc, #16]	@ (8005228 <disk_initialize+0x38>)
 8005218:	701a      	strb	r2, [r3, #0]
  }
  return Stat;
 800521a:	4b03      	ldr	r3, [pc, #12]	@ (8005228 <disk_initialize+0x38>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	b2db      	uxtb	r3, r3
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000011 	.word	0x20000011

0800522c <disk_read>:
disk_read(BYTE  pdrv,   /* Physical drive nmuber to identify the drive */
          BYTE *buff,   /* Data buffer to store read data */
          LBA_t sector, /* Start sector in LBA */
          UINT  count   /* Number of sectors to read */
)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4603      	mov	r3, r0
 800523a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	75fb      	strb	r3, [r7, #23]

  if (BSP_SD_SDMMC_ReadBlocks(
 8005240:	f247 5330 	movw	r3, #30000	@ 0x7530
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	68b8      	ldr	r0, [r7, #8]
 800524a:	f7fb f975 	bl	8000538 <BSP_SD_SDMMC_ReadBlocks>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <disk_read+0x2c>
          (uint32_t *)buff, (uint32_t)(sector), count, SD_TIMEOUT)
      == MSD_OK)
  {
    res = RES_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005258:	7dfb      	ldrb	r3, [r7, #23]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <disk_write>:
 * @retval DRESULT: Operation result
 */

DRESULT
disk_write(BYTE pdrv, const BYTE *buff, LBA_t sector, UINT count)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b086      	sub	sp, #24
 8005266:	af00      	add	r7, sp, #0
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
 800526e:	4603      	mov	r3, r0
 8005270:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	75fb      	strb	r3, [r7, #23]

  if (BSP_SD_SDMMC_WriteBlocks(
 8005276:	f247 5330 	movw	r3, #30000	@ 0x7530
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	68b8      	ldr	r0, [r7, #8]
 8005280:	f7fb f978 	bl	8000574 <BSP_SD_SDMMC_WriteBlocks>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <disk_write+0x2c>
          (uint32_t *)buff, (uint32_t)(sector), count, SD_TIMEOUT)
      == MSD_OK)
  {
    res = RES_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800528e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <disk_ioctl>:
DRESULT
disk_ioctl(BYTE  pdrv, /* Physical drive nmuber (0..) */
           BYTE  cmd,  /* Control code */
           void *buff  /* Buffer to send/receive control data */
)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	@ 0x30
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	603a      	str	r2, [r7, #0]
 80052a2:	71fb      	strb	r3, [r7, #7]
 80052a4:	460b      	mov	r3, r1
 80052a6:	71bb      	strb	r3, [r7, #6]
  DRESULT               res = RES_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_SDMMC_CardInfo CardInfo;

  if (Stat & STA_NOINIT)
 80052ae:	4b25      	ldr	r3, [pc, #148]	@ (8005344 <disk_ioctl+0xac>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <disk_ioctl+0x28>
  {
    return RES_NOTRDY;
 80052bc:	2303      	movs	r3, #3
 80052be:	e03c      	b.n	800533a <disk_ioctl+0xa2>
  }

  switch (cmd)
 80052c0:	79bb      	ldrb	r3, [r7, #6]
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d834      	bhi.n	8005330 <disk_ioctl+0x98>
 80052c6:	a201      	add	r2, pc, #4	@ (adr r2, 80052cc <disk_ioctl+0x34>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	080052dd 	.word	0x080052dd
 80052d0:	080052e5 	.word	0x080052e5
 80052d4:	080052fd 	.word	0x080052fd
 80052d8:	08005317 	.word	0x08005317
  {
    /* Make sure that no pending write process */
    case CTRL_SYNC:
      res = RES_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      break;
 80052e2:	e028      	b.n	8005336 <disk_ioctl+0x9e>

    /* Get number of sectors on the disk (DWORD) */
    case GET_SECTOR_COUNT:
    	BSP_SD_SDMMC_GetCardInfo(&CardInfo);
 80052e4:	f107 030c 	add.w	r3, r7, #12
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fb f961 	bl	80005b0 <BSP_SD_SDMMC_GetCardInfo>
      *(DWORD *)buff = CardInfo.LogBlockNbr;
 80052ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	601a      	str	r2, [r3, #0]
      res            = RES_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      break;
 80052fa:	e01c      	b.n	8005336 <disk_ioctl+0x9e>

    /* Get R/W sector size (WORD) */
    case GET_SECTOR_SIZE:
    	BSP_SD_SDMMC_GetCardInfo(&CardInfo);
 80052fc:	f107 030c 	add.w	r3, r7, #12
 8005300:	4618      	mov	r0, r3
 8005302:	f7fb f955 	bl	80005b0 <BSP_SD_SDMMC_GetCardInfo>
      *(WORD *)buff = CardInfo.LogBlockSize;
 8005306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005308:	b29a      	uxth	r2, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	801a      	strh	r2, [r3, #0]
      res           = RES_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      break;
 8005314:	e00f      	b.n	8005336 <disk_ioctl+0x9e>

    /* Get erase block size in unit of sector (DWORD) */
    case GET_BLOCK_SIZE:
    	BSP_SD_SDMMC_GetCardInfo(&CardInfo);
 8005316:	f107 030c 	add.w	r3, r7, #12
 800531a:	4618      	mov	r0, r3
 800531c:	f7fb f948 	bl	80005b0 <BSP_SD_SDMMC_GetCardInfo>
      *(DWORD *)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005322:	0a5a      	lsrs	r2, r3, #9
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	601a      	str	r2, [r3, #0]
      res            = RES_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      break;
 800532e:	e002      	b.n	8005336 <disk_ioctl+0x9e>

    default:
      res = RES_PARERR;
 8005330:	2304      	movs	r3, #4
 8005332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005336:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800533a:	4618      	mov	r0, r3
 800533c:	3730      	adds	r7, #48	@ 0x30
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000011 	.word	0x20000011

08005348 <get_fattime>:
 * @param  None
 * @retval Time in DWORD
 */
__weak DWORD
get_fattime (void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return 0;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3301      	adds	r3, #1
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005368:	89fb      	ldrh	r3, [r7, #14]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	b21a      	sxth	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	b21b      	sxth	r3, r3
 8005374:	4313      	orrs	r3, r2
 8005376:	b21b      	sxth	r3, r3
 8005378:	81fb      	strh	r3, [r7, #14]
	return rv;
 800537a:	89fb      	ldrh	r3, [r7, #14]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3303      	adds	r3, #3
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	3202      	adds	r2, #2
 80053a0:	7812      	ldrb	r2, [r2, #0]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	021b      	lsls	r3, r3, #8
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	3201      	adds	r2, #1
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
	return rv;
 80053c0:	68fb      	ldr	r3, [r7, #12]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	887a      	ldrh	r2, [r7, #2]
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	887b      	ldrh	r3, [r7, #2]
 80053e8:	0a1b      	lsrs	r3, r3, #8
 80053ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	607a      	str	r2, [r7, #4]
 80053f2:	887a      	ldrh	r2, [r7, #2]
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	701a      	strb	r2, [r3, #0]
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	0a1b      	lsrs	r3, r3, #8
 800541e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	607a      	str	r2, [r7, #4]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	0a1b      	lsrs	r3, r3, #8
 8005442:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	607a      	str	r2, [r7, #4]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	701a      	strb	r2, [r3, #0]
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <dbc_1st+0x14>
 800546c:	2300      	movs	r3, #0
 800546e:	e000      	b.n	8005472 <dbc_1st+0x16>
#endif
	return 0;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	4603      	mov	r3, r0
 8005486:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <dbc_2nd+0x14>
 800548e:	2300      	movs	r3, #0
 8005490:	e000      	b.n	8005494 <dbc_2nd+0x16>
#endif
	return 0;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	617a      	str	r2, [r7, #20]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 80054b8:	8a7b      	ldrh	r3, [r7, #18]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff ffcd 	bl	800545c <dbc_1st>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d015      	beq.n	80054f4 <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	617a      	str	r2, [r7, #20]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 80054d2:	7c7b      	ldrb	r3, [r7, #17]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff ffd2 	bl	800547e <dbc_2nd>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d102      	bne.n	80054e6 <tchar2uni+0x46>
 80054e0:	f04f 33ff 	mov.w	r3, #4294967295
 80054e4:	e01d      	b.n	8005522 <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 80054e6:	8a7b      	ldrh	r3, [r7, #18]
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	7c7b      	ldrb	r3, [r7, #17]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	4413      	add	r3, r2
 80054f2:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 80054f4:	8a7b      	ldrh	r3, [r7, #18]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00d      	beq.n	8005516 <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 80054fa:	8a7b      	ldrh	r3, [r7, #18]
 80054fc:	f240 3152 	movw	r1, #850	@ 0x352
 8005500:	4618      	mov	r0, r3
 8005502:	f002 fb57 	bl	8007bb4 <ff_oem2uni>
 8005506:	4603      	mov	r3, r0
 8005508:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 800550a:	8a7b      	ldrh	r3, [r7, #18]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <tchar2uni+0x76>
 8005510:	f04f 33ff 	mov.w	r3, #4294967295
 8005514:	e005      	b.n	8005522 <tchar2uni+0x82>
	}
	uc = wc;
 8005516:	8a7b      	ldrh	r3, [r7, #18]
 8005518:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	601a      	str	r2, [r3, #0]
	return uc;
 8005520:	68fb      	ldr	r3, [r7, #12]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	791b      	ldrb	r3, [r3, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d02c      	beq.n	8005598 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	7858      	ldrb	r0, [r3, #1]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800554c:	2301      	movs	r3, #1
 800554e:	f7ff fe88 	bl	8005262 <disk_write>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d11d      	bne.n	8005594 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005566:	1ad2      	subs	r2, r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	429a      	cmp	r2, r3
 800556e:	d213      	bcs.n	8005598 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	78db      	ldrb	r3, [r3, #3]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d10f      	bne.n	8005598 <sync_window+0x6e>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	7858      	ldrb	r0, [r3, #1]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	441a      	add	r2, r3
 800558c:	2301      	movs	r3, #1
 800558e:	f7ff fe68 	bl	8005262 <disk_write>
 8005592:	e001      	b.n	8005598 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d01b      	beq.n	80055f2 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff ffb5 	bl	800552a <sync_window>
 80055c0:	4603      	mov	r3, r0
 80055c2:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d113      	bne.n	80055f2 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	7858      	ldrb	r0, [r3, #1]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80055d4:	2301      	movs	r3, #1
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	f7ff fe28 	bl	800522c <disk_read>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 80055e2:	f04f 33ff 	mov.w	r3, #4294967295
 80055e6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ff90 	bl	800552a <sync_window>
 800560a:	4603      	mov	r3, r0
 800560c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d158      	bne.n	80056c6 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d148      	bne.n	80056ae <sync_fs+0xb2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	795b      	ldrb	r3, [r3, #5]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d144      	bne.n	80056ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3338      	adds	r3, #56	@ 0x38
 8005628:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f002 fb90 	bl	8007d54 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3338      	adds	r3, #56	@ 0x38
 8005638:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800563c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fec4 	bl	80053ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3338      	adds	r3, #56	@ 0x38
 800564a:	4921      	ldr	r1, [pc, #132]	@ (80056d0 <sync_fs+0xd4>)
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff fed9 	bl	8005404 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3338      	adds	r3, #56	@ 0x38
 8005656:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800565a:	491e      	ldr	r1, [pc, #120]	@ (80056d4 <sync_fs+0xd8>)
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fed1 	bl	8005404 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3338      	adds	r3, #56	@ 0x38
 8005666:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f7ff fec7 	bl	8005404 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3338      	adds	r3, #56	@ 0x38
 800567a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	4619      	mov	r1, r3
 8005684:	4610      	mov	r0, r2
 8005686:	f7ff febd 	bl	8005404 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	7858      	ldrb	r0, [r3, #1]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056a2:	2301      	movs	r3, #1
 80056a4:	f7ff fddd 	bl	8005262 <disk_write>
			fs->fsi_flag = 0;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	785b      	ldrb	r3, [r3, #1]
 80056b2:	2200      	movs	r2, #0
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fdee 	bl	8005298 <disk_ioctl>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <sync_fs+0xca>
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	41615252 	.word	0x41615252
 80056d4:	61417272 	.word	0x61417272

080056d8 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	3b02      	subs	r3, #2
 80056e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	3b02      	subs	r3, #2
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d301      	bcc.n	80056f8 <clst2sect+0x20>
 80056f4:	2300      	movs	r3, #0
 80056f6:	e008      	b.n	800570a <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	895b      	ldrh	r3, [r3, #10]
 8005700:	4619      	mov	r1, r3
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	fb01 f303 	mul.w	r3, r1, r3
 8005708:	4413      	add	r3, r2
}
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b086      	sub	sp, #24
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d904      	bls.n	8005736 <get_fat+0x20>
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d302      	bcc.n	800573c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005736:	2301      	movs	r3, #1
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	e08e      	b.n	800585a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800573c:	f04f 33ff 	mov.w	r3, #4294967295
 8005740:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b03      	cmp	r3, #3
 8005748:	d061      	beq.n	800580e <get_fat+0xf8>
 800574a:	2b03      	cmp	r3, #3
 800574c:	dc7b      	bgt.n	8005846 <get_fat+0x130>
 800574e:	2b01      	cmp	r3, #1
 8005750:	d002      	beq.n	8005758 <get_fat+0x42>
 8005752:	2b02      	cmp	r3, #2
 8005754:	d041      	beq.n	80057da <get_fat+0xc4>
 8005756:	e076      	b.n	8005846 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	085b      	lsrs	r3, r3, #1
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	0a5b      	lsrs	r3, r3, #9
 800576e:	4413      	add	r3, r2
 8005770:	4619      	mov	r1, r3
 8005772:	6938      	ldr	r0, [r7, #16]
 8005774:	f7ff ff15 	bl	80055a2 <move_window>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d166      	bne.n	800584c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	60fa      	str	r2, [r7, #12]
 8005784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4413      	add	r3, r2
 800578c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005790:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	0a5b      	lsrs	r3, r3, #9
 800579a:	4413      	add	r3, r2
 800579c:	4619      	mov	r1, r3
 800579e:	6938      	ldr	r0, [r7, #16]
 80057a0:	f7ff feff 	bl	80055a2 <move_window>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d152      	bne.n	8005850 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80057b8:	021b      	lsls	r3, r3, #8
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <get_fat+0xba>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	e002      	b.n	80057d6 <get_fat+0xc0>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d6:	617b      	str	r3, [r7, #20]
			break;
 80057d8:	e03f      	b.n	800585a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	0a1b      	lsrs	r3, r3, #8
 80057e2:	4413      	add	r3, r2
 80057e4:	4619      	mov	r1, r3
 80057e6:	6938      	ldr	r0, [r7, #16]
 80057e8:	f7ff fedb 	bl	80055a2 <move_window>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d130      	bne.n	8005854 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005800:	4413      	add	r3, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff fda8 	bl	8005358 <ld_word>
 8005808:	4603      	mov	r3, r0
 800580a:	617b      	str	r3, [r7, #20]
			break;
 800580c:	e025      	b.n	800585a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	09db      	lsrs	r3, r3, #7
 8005816:	4413      	add	r3, r2
 8005818:	4619      	mov	r1, r3
 800581a:	6938      	ldr	r0, [r7, #16]
 800581c:	f7ff fec1 	bl	80055a2 <move_window>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d118      	bne.n	8005858 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005834:	4413      	add	r3, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff fda6 	bl	8005388 <ld_dword>
 800583c:	4603      	mov	r3, r0
 800583e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005842:	617b      	str	r3, [r7, #20]
			break;
 8005844:	e009      	b.n	800585a <get_fat+0x144>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 8005846:	2301      	movs	r3, #1
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e006      	b.n	800585a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800584c:	bf00      	nop
 800584e:	e004      	b.n	800585a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005850:	bf00      	nop
 8005852:	e002      	b.n	800585a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005854:	bf00      	nop
 8005856:	e000      	b.n	800585a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005858:	bf00      	nop
		}
	}

	return val;
 800585a:	697b      	ldr	r3, [r7, #20]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005864:	b590      	push	{r4, r7, lr}
 8005866:	b089      	sub	sp, #36	@ 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005870:	2302      	movs	r3, #2
 8005872:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b01      	cmp	r3, #1
 8005878:	f240 80d9 	bls.w	8005a2e <put_fat+0x1ca>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	429a      	cmp	r2, r3
 8005884:	f080 80d3 	bcs.w	8005a2e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b03      	cmp	r3, #3
 800588e:	f000 8096 	beq.w	80059be <put_fat+0x15a>
 8005892:	2b03      	cmp	r3, #3
 8005894:	f300 80cb 	bgt.w	8005a2e <put_fat+0x1ca>
 8005898:	2b01      	cmp	r3, #1
 800589a:	d002      	beq.n	80058a2 <put_fat+0x3e>
 800589c:	2b02      	cmp	r3, #2
 800589e:	d06e      	beq.n	800597e <put_fat+0x11a>
 80058a0:	e0c5      	b.n	8005a2e <put_fat+0x1ca>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	085b      	lsrs	r3, r3, #1
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4413      	add	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	0a5b      	lsrs	r3, r3, #9
 80058b8:	4413      	add	r3, r2
 80058ba:	4619      	mov	r1, r3
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff fe70 	bl	80055a2 <move_window>
 80058c2:	4603      	mov	r3, r0
 80058c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80058c6:	7ffb      	ldrb	r3, [r7, #31]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f040 80a9 	bne.w	8005a20 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	1c59      	adds	r1, r3, #1
 80058d8:	61b9      	str	r1, [r7, #24]
 80058da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058de:	4413      	add	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00d      	beq.n	8005908 <put_fat+0xa4>
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	b25b      	sxtb	r3, r3
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	b25a      	sxtb	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	b25b      	sxtb	r3, r3
 8005900:	4313      	orrs	r3, r2
 8005902:	b25b      	sxtb	r3, r3
 8005904:	b2db      	uxtb	r3, r3
 8005906:	e001      	b.n	800590c <put_fat+0xa8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	0a5b      	lsrs	r3, r3, #9
 800591e:	4413      	add	r3, r2
 8005920:	4619      	mov	r1, r3
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7ff fe3d 	bl	80055a2 <move_window>
 8005928:	4603      	mov	r3, r0
 800592a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800592c:	7ffb      	ldrb	r3, [r7, #31]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d178      	bne.n	8005a24 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593e:	4413      	add	r3, r2
 8005940:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <put_fat+0xf0>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	091b      	lsrs	r3, r3, #4
 8005950:	b2db      	uxtb	r3, r3
 8005952:	e00e      	b.n	8005972 <put_fat+0x10e>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	b25b      	sxtb	r3, r3
 800595a:	f023 030f 	bic.w	r3, r3, #15
 800595e:	b25a      	sxtb	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	0a1b      	lsrs	r3, r3, #8
 8005964:	b25b      	sxtb	r3, r3
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	b25b      	sxtb	r3, r3
 800596c:	4313      	orrs	r3, r2
 800596e:	b25b      	sxtb	r3, r3
 8005970:	b2db      	uxtb	r3, r3
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	711a      	strb	r2, [r3, #4]
			break;
 800597c:	e057      	b.n	8005a2e <put_fat+0x1ca>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	4413      	add	r3, r2
 8005988:	4619      	mov	r1, r3
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff fe09 	bl	80055a2 <move_window>
 8005990:	4603      	mov	r3, r0
 8005992:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005994:	7ffb      	ldrb	r3, [r7, #31]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d146      	bne.n	8005a28 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80059a8:	4413      	add	r3, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	b292      	uxth	r2, r2
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fd0c 	bl	80053ce <st_word>
			fs->wflag = 1;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	711a      	strb	r2, [r3, #4]
			break;
 80059bc:	e037      	b.n	8005a2e <put_fat+0x1ca>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	09db      	lsrs	r3, r3, #7
 80059c6:	4413      	add	r3, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f7ff fde9 	bl	80055a2 <move_window>
 80059d0:	4603      	mov	r3, r0
 80059d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059d4:	7ffb      	ldrb	r3, [r7, #31]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d128      	bne.n	8005a2c <put_fat+0x1c8>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80059ee:	4413      	add	r3, r2
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff fcc9 	bl	8005388 <ld_dword>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80059fc:	4323      	orrs	r3, r4
 80059fe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005a0e:	4413      	add	r3, r2
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff fcf6 	bl	8005404 <st_dword>
			fs->wflag = 1;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	711a      	strb	r2, [r3, #4]
			break;
 8005a1e:	e006      	b.n	8005a2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005a20:	bf00      	nop
 8005a22:	e004      	b.n	8005a2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005a24:	bf00      	nop
 8005a26:	e002      	b.n	8005a2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005a28:	bf00      	nop
 8005a2a:	e000      	b.n	8005a2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005a2c:	bf00      	nop
		}
	}
	return res;
 8005a2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3724      	adds	r7, #36	@ 0x24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd90      	pop	{r4, r7, pc}

08005a38 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d904      	bls.n	8005a5e <remove_chain+0x26>
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d301      	bcc.n	8005a62 <remove_chain+0x2a>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e04b      	b.n	8005afa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00c      	beq.n	8005a82 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005a68:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	69b8      	ldr	r0, [r7, #24]
 8005a70:	f7ff fef8 	bl	8005864 <put_fat>
 8005a74:	4603      	mov	r3, r0
 8005a76:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005a78:	7ffb      	ldrb	r3, [r7, #31]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <remove_chain+0x4a>
 8005a7e:	7ffb      	ldrb	r3, [r7, #31]
 8005a80:	e03b      	b.n	8005afa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7ff fe46 	bl	8005716 <get_fat>
 8005a8a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d031      	beq.n	8005af6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <remove_chain+0x64>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e02e      	b.n	8005afa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d101      	bne.n	8005aa8 <remove_chain+0x70>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e028      	b.n	8005afa <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	69b8      	ldr	r0, [r7, #24]
 8005aae:	f7ff fed9 	bl	8005864 <put_fat>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005ab6:	7ffb      	ldrb	r3, [r7, #31]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <remove_chain+0x88>
 8005abc:	7ffb      	ldrb	r3, [r7, #31]
 8005abe:	e01c      	b.n	8005afa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	695a      	ldr	r2, [r3, #20]
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	3b02      	subs	r3, #2
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d20b      	bcs.n	8005ae6 <remove_chain+0xae>
			fs->free_clst++;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	795b      	ldrb	r3, [r3, #5]
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d3c6      	bcc.n	8005a82 <remove_chain+0x4a>
 8005af4:	e000      	b.n	8005af8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005af6:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b088      	sub	sp, #32
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10d      	bne.n	8005b34 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d004      	beq.n	8005b2e <create_chain+0x2c>
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d31b      	bcc.n	8005b66 <create_chain+0x64>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	e018      	b.n	8005b66 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff fded 	bl	8005716 <get_fat>
 8005b3c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d801      	bhi.n	8005b48 <create_chain+0x46>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0a9      	b.n	8005c9c <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	d101      	bne.n	8005b54 <create_chain+0x52>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	e0a3      	b.n	8005c9c <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d201      	bcs.n	8005b62 <create_chain+0x60>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	e09c      	b.n	8005c9c <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <create_chain+0x70>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e094      	b.n	8005c9c <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d129      	bne.n	8005bd2 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	3301      	adds	r3, #1
 8005b82:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d301      	bcc.n	8005b92 <create_chain+0x90>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8005b92:	69f9      	ldr	r1, [r7, #28]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff fdbe 	bl	8005716 <get_fat>
 8005b9a:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d003      	beq.n	8005baa <create_chain+0xa8>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba8:	d101      	bne.n	8005bae <create_chain+0xac>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	e076      	b.n	8005c9c <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00e      	beq.n	8005bd2 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d906      	bls.n	8005bce <create_chain+0xcc>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d201      	bcs.n	8005bce <create_chain+0xcc>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d129      	bne.n	8005c2c <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	3301      	adds	r3, #1
 8005be0:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d307      	bcc.n	8005bfc <create_chain+0xfa>
					ncl = 2;
 8005bec:	2302      	movs	r3, #2
 8005bee:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d901      	bls.n	8005bfc <create_chain+0xfa>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e04f      	b.n	8005c9c <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005bfc:	69f9      	ldr	r1, [r7, #28]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff fd89 	bl	8005716 <get_fat>
 8005c04:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00e      	beq.n	8005c2a <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d003      	beq.n	8005c1a <create_chain+0x118>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c18:	d101      	bne.n	8005c1e <create_chain+0x11c>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	e03e      	b.n	8005c9c <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d1da      	bne.n	8005bdc <create_chain+0xda>
 8005c26:	2300      	movs	r3, #0
 8005c28:	e038      	b.n	8005c9c <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8005c2a:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8005c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c30:	69f9      	ldr	r1, [r7, #28]
 8005c32:	6938      	ldr	r0, [r7, #16]
 8005c34:	f7ff fe16 	bl	8005864 <put_fat>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <create_chain+0x154>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d006      	beq.n	8005c56 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6938      	ldr	r0, [r7, #16]
 8005c4e:	f7ff fe09 	bl	8005864 <put_fat>
 8005c52:	4603      	mov	r3, r0
 8005c54:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d116      	bne.n	8005c8a <create_chain+0x188>
		fs->last_clst = ncl;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	695a      	ldr	r2, [r3, #20]
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	3b02      	subs	r3, #2
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d804      	bhi.n	8005c7a <create_chain+0x178>
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	1e5a      	subs	r2, r3, #1
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	795b      	ldrb	r3, [r3, #5]
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	715a      	strb	r2, [r3, #5]
 8005c88:	e007      	b.n	8005c9a <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d102      	bne.n	8005c96 <create_chain+0x194>
 8005c90:	f04f 33ff 	mov.w	r3, #4294967295
 8005c94:	e000      	b.n	8005c98 <create_chain+0x196>
 8005c96:	2301      	movs	r3, #1
 8005c98:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005c9a:	69fb      	ldr	r3, [r7, #28]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3720      	adds	r7, #32
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff fc3b 	bl	800552a <sync_window>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <dir_clear+0x1a>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e036      	b.n	8005d2c <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff fd09 	bl	80056d8 <clst2sect>
 8005cc6:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	635a      	str	r2, [r3, #52]	@ 0x34
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3338      	adds	r3, #56	@ 0x38
 8005cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f002 f83b 	bl	8007d54 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3338      	adds	r3, #56	@ 0x38
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e003      	b.n	8005cf6 <dir_clear+0x52>
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	895b      	ldrh	r3, [r3, #10]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d20b      	bcs.n	8005d1a <dir_clear+0x76>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	7858      	ldrb	r0, [r3, #1]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	441a      	add	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	68f9      	ldr	r1, [r7, #12]
 8005d10:	f7ff faa7 	bl	8005262 <disk_write>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d0e9      	beq.n	8005cee <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	895b      	ldrh	r3, [r3, #10]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4293      	cmp	r3, r2
 8005d24:	bf14      	ite	ne
 8005d26:	2301      	movne	r3, #1
 8005d28:	2300      	moveq	r3, #0
 8005d2a:	b2db      	uxtb	r3, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d4a:	d204      	bcs.n	8005d56 <dir_sdi+0x22>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	f003 031f 	and.w	r3, r3, #31
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <dir_sdi+0x26>
		return FR_INT_ERR;
 8005d56:	2302      	movs	r3, #2
 8005d58:	e063      	b.n	8005e22 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d106      	bne.n	8005d7a <dir_sdi+0x46>
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d902      	bls.n	8005d7a <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10c      	bne.n	8005d9a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	095b      	lsrs	r3, r3, #5
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	8912      	ldrh	r2, [r2, #8]
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d301      	bcc.n	8005d90 <dir_sdi+0x5c>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e048      	b.n	8005e22 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	619a      	str	r2, [r3, #24]
 8005d98:	e029      	b.n	8005dee <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	895b      	ldrh	r3, [r3, #10]
 8005d9e:	025b      	lsls	r3, r3, #9
 8005da0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005da2:	e019      	b.n	8005dd8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6979      	ldr	r1, [r7, #20]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff fcb4 	bl	8005716 <get_fat>
 8005dae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db6:	d101      	bne.n	8005dbc <dir_sdi+0x88>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e032      	b.n	8005e22 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d904      	bls.n	8005dcc <dir_sdi+0x98>
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d301      	bcc.n	8005dd0 <dir_sdi+0x9c>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e028      	b.n	8005e22 <dir_sdi+0xee>
			ofs -= csz;
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d2e1      	bcs.n	8005da4 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 8005de0:	6979      	ldr	r1, [r7, #20]
 8005de2:	6938      	ldr	r0, [r7, #16]
 8005de4:	f7ff fc78 	bl	80056d8 <clst2sect>
 8005de8:	4602      	mov	r2, r0
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <dir_sdi+0xcc>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e010      	b.n	8005e22 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699a      	ldr	r2, [r3, #24]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	0a5b      	lsrs	r3, r3, #9
 8005e08:	441a      	add	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1a:	441a      	add	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b086      	sub	sp, #24
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	3320      	adds	r3, #32
 8005e40:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e48:	d302      	bcc.n	8005e50 <dir_next+0x26>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <dir_next+0x32>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	e078      	b.n	8005f4e <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d166      	bne.n	8005f34 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	8912      	ldrh	r2, [r2, #8]
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d357      	bcc.n	8005f34 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	619a      	str	r2, [r3, #24]
 8005e8a:	2304      	movs	r3, #4
 8005e8c:	e05f      	b.n	8005f4e <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	0a5b      	lsrs	r3, r3, #9
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	8952      	ldrh	r2, [r2, #10]
 8005e96:	3a01      	subs	r2, #1
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d14a      	bne.n	8005f34 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f7ff fc35 	bl	8005716 <get_fat>
 8005eac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d801      	bhi.n	8005eb8 <dir_next+0x8e>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e04a      	b.n	8005f4e <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebe:	d101      	bne.n	8005ec4 <dir_next+0x9a>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e044      	b.n	8005f4e <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d328      	bcc.n	8005f20 <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d104      	bne.n	8005ede <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	619a      	str	r2, [r3, #24]
 8005eda:	2304      	movs	r3, #4
 8005edc:	e037      	b.n	8005f4e <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	f7ff fe0b 	bl	8005b02 <create_chain>
 8005eec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <dir_next+0xce>
 8005ef4:	2307      	movs	r3, #7
 8005ef6:	e02a      	b.n	8005f4e <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <dir_next+0xd8>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e025      	b.n	8005f4e <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d101      	bne.n	8005f0e <dir_next+0xe4>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e01f      	b.n	8005f4e <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8005f0e:	6979      	ldr	r1, [r7, #20]
 8005f10:	6938      	ldr	r0, [r7, #16]
 8005f12:	f7ff fec7 	bl	8005ca4 <dir_clear>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <dir_next+0xf6>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e016      	b.n	8005f4e <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8005f26:	6979      	ldr	r1, [r7, #20]
 8005f28:	6938      	ldr	r0, [r7, #16]
 8005f2a:	f7ff fbd5 	bl	80056d8 <clst2sect>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f46:	441a      	add	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b086      	sub	sp, #24
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005f66:	2100      	movs	r1, #0
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff fee3 	bl	8005d34 <dir_sdi>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d12b      	bne.n	8005fd0 <dir_alloc+0x7a>
		n = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	4619      	mov	r1, r3
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff fb0d 	bl	80055a2 <move_window>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d11d      	bne.n	8005fce <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2be5      	cmp	r3, #229	@ 0xe5
 8005f9a:	d004      	beq.n	8005fa6 <dir_alloc+0x50>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d107      	bne.n	8005fb6 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d102      	bne.n	8005fba <dir_alloc+0x64>
 8005fb4:	e00c      	b.n	8005fd0 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8005fba:	2101      	movs	r1, #1
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ff34 	bl	8005e2a <dir_next>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0d7      	beq.n	8005f7c <dir_alloc+0x26>
 8005fcc:	e000      	b.n	8005fd0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005fce:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d101      	bne.n	8005fda <dir_alloc+0x84>
 8005fd6:	2307      	movs	r3, #7
 8005fd8:	75fb      	strb	r3, [r7, #23]
	return res;
 8005fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	331a      	adds	r3, #26
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff f9b0 	bl	8005358 <ld_word>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b03      	cmp	r3, #3
 8006002:	d109      	bne.n	8006018 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	3314      	adds	r3, #20
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff f9a5 	bl	8005358 <ld_word>
 800600e:	4603      	mov	r3, r0
 8006010:	041b      	lsls	r3, r3, #16
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4313      	orrs	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006018:	68fb      	ldr	r3, [r7, #12]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	331a      	adds	r3, #26
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	b292      	uxth	r2, r2
 8006036:	4611      	mov	r1, r2
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff f9c8 	bl	80053ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b03      	cmp	r3, #3
 8006044:	d109      	bne.n	800605a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f103 0214 	add.w	r2, r3, #20
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	b29b      	uxth	r3, r3
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f7ff f9ba 	bl	80053ce <st_word>
	}
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	331a      	adds	r3, #26
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff f970 	bl	8005358 <ld_word>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <cmp_lfn+0x1e>
 800607e:	2300      	movs	r3, #0
 8006080:	e058      	b.n	8006134 <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800608a:	1e5a      	subs	r2, r3, #1
 800608c:	4613      	mov	r3, r2
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006098:	2301      	movs	r3, #1
 800609a:	81fb      	strh	r3, [r7, #14]
 800609c:	2300      	movs	r3, #0
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	e032      	b.n	8006108 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80060a2:	4a26      	ldr	r2, [pc, #152]	@ (800613c <cmp_lfn+0xd8>)
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	4413      	add	r3, r2
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	4413      	add	r3, r2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff f951 	bl	8005358 <ld_word>
 80060b6:	4603      	mov	r3, r0
 80060b8:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 80060ba:	89fb      	ldrh	r3, [r7, #14]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d019      	beq.n	80060f4 <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2bff      	cmp	r3, #255	@ 0xff
 80060c4:	d811      	bhi.n	80060ea <cmp_lfn+0x86>
 80060c6:	89bb      	ldrh	r3, [r7, #12]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f001 fda1 	bl	8007c10 <ff_wtoupper>
 80060ce:	4604      	mov	r4, r0
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	617a      	str	r2, [r7, #20]
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	4413      	add	r3, r2
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fd96 	bl	8007c10 <ff_wtoupper>
 80060e4:	4603      	mov	r3, r0
 80060e6:	429c      	cmp	r4, r3
 80060e8:	d001      	beq.n	80060ee <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 80060ea:	2300      	movs	r3, #0
 80060ec:	e022      	b.n	8006134 <cmp_lfn+0xd0>
			}
			wc = uc;
 80060ee:	89bb      	ldrh	r3, [r7, #12]
 80060f0:	81fb      	strh	r3, [r7, #14]
 80060f2:	e006      	b.n	8006102 <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80060f4:	89bb      	ldrh	r3, [r7, #12]
 80060f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d001      	beq.n	8006102 <cmp_lfn+0x9e>
 80060fe:	2300      	movs	r3, #0
 8006100:	e018      	b.n	8006134 <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	3301      	adds	r3, #1
 8006106:	613b      	str	r3, [r7, #16]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b0c      	cmp	r3, #12
 800610c:	d9c9      	bls.n	80060a2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00b      	beq.n	8006132 <cmp_lfn+0xce>
 800611a:	89fb      	ldrh	r3, [r7, #14]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d008      	beq.n	8006132 <cmp_lfn+0xce>
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	4413      	add	r3, r2
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <cmp_lfn+0xce>
 800612e:	2300      	movs	r3, #0
 8006130:	e000      	b.n	8006134 <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 8006132:	2301      	movs	r3, #1
}
 8006134:	4618      	mov	r0, r3
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd90      	pop	{r4, r7, pc}
 800613c:	08007e78 	.word	0x08007e78

08006140 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	4611      	mov	r1, r2
 800614c:	461a      	mov	r2, r3
 800614e:	460b      	mov	r3, r1
 8006150:	71fb      	strb	r3, [r7, #7]
 8006152:	4613      	mov	r3, r2
 8006154:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	330d      	adds	r3, #13
 800615a:	79ba      	ldrb	r2, [r7, #6]
 800615c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	330b      	adds	r3, #11
 8006162:	220f      	movs	r2, #15
 8006164:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	330c      	adds	r3, #12
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	331a      	adds	r3, #26
 8006172:	2100      	movs	r1, #0
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff f92a 	bl	80053ce <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	1e5a      	subs	r2, r3, #1
 800617e:	4613      	mov	r3, r2
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	82fb      	strh	r3, [r7, #22]
 800618e:	2300      	movs	r3, #0
 8006190:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006192:	8afb      	ldrh	r3, [r7, #22]
 8006194:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <put_lfn+0x6c>
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	61fa      	str	r2, [r7, #28]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80061ac:	4a17      	ldr	r2, [pc, #92]	@ (800620c <put_lfn+0xcc>)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	4413      	add	r3, r2
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	4413      	add	r3, r2
 80061ba:	8afa      	ldrh	r2, [r7, #22]
 80061bc:	4611      	mov	r1, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff f905 	bl	80053ce <st_word>
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
 80061c4:	8afb      	ldrh	r3, [r7, #22]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d102      	bne.n	80061d0 <put_lfn+0x90>
 80061ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80061ce:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	3301      	adds	r3, #1
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	2b0c      	cmp	r3, #12
 80061da:	d9da      	bls.n	8006192 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80061dc:	8afb      	ldrh	r3, [r7, #22]
 80061de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d006      	beq.n	80061f4 <put_lfn+0xb4>
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d103      	bne.n	80061fc <put_lfn+0xbc>
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061fa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	79fa      	ldrb	r2, [r7, #7]
 8006200:	701a      	strb	r2, [r3, #0]
}
 8006202:	bf00      	nop
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	08007e78 	.word	0x08007e78

08006210 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN in directory form */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08c      	sub	sp, #48	@ 0x30
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sreg;


	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800621e:	220b      	movs	r2, #11
 8006220:	68b9      	ldr	r1, [r7, #8]
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f001 fdd0 	bl	8007dc8 <memcpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b05      	cmp	r3, #5
 800622c:	d929      	bls.n	8006282 <gen_numname+0x72>
		sreg = seq;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 8006232:	e020      	b.n	8006276 <gen_numname+0x66>
			wc = *lfn++;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	1c9a      	adds	r2, r3, #2
 8006238:	607a      	str	r2, [r7, #4]
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800623e:	2300      	movs	r3, #0
 8006240:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006242:	e015      	b.n	8006270 <gen_numname+0x60>
				sreg = (sreg << 1) + (wc & 1);
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	005a      	lsls	r2, r3, #1
 8006248:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	4413      	add	r3, r2
 8006250:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006252:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006254:	085b      	lsrs	r3, r3, #1
 8006256:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sreg & 0x10000) sreg ^= 0x11021;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <gen_numname+0x5a>
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	4b3c      	ldr	r3, [pc, #240]	@ (8006358 <gen_numname+0x148>)
 8006266:	4053      	eors	r3, r2
 8006268:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800626a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626c:	3301      	adds	r3, #1
 800626e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006272:	2b0f      	cmp	r3, #15
 8006274:	d9e6      	bls.n	8006244 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1da      	bne.n	8006234 <gen_numname+0x24>
			}
		}
		seq = (UINT)sreg;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	603b      	str	r3, [r7, #0]
	}

	/* Make suffix (~ + hexadecimal) */
	i = 7;
 8006282:	2307      	movs	r3, #7
 8006284:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	b2db      	uxtb	r3, r3
 8006290:	3330      	adds	r3, #48	@ 0x30
 8006292:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	091b      	lsrs	r3, r3, #4
 800629a:	603b      	str	r3, [r7, #0]
		if (c > '9') c += 7;
 800629c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062a0:	2b39      	cmp	r3, #57	@ 0x39
 80062a2:	d904      	bls.n	80062ae <gen_numname+0x9e>
 80062a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062a8:	3307      	adds	r3, #7
 80062aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80062ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b0:	1e5a      	subs	r2, r3, #1
 80062b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80062b4:	3330      	adds	r3, #48	@ 0x30
 80062b6:	443b      	add	r3, r7
 80062b8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80062bc:	f803 2c1c 	strb.w	r2, [r3, #-28]
	} while (i && seq);
 80062c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <gen_numname+0xbc>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1dc      	bne.n	8006286 <gen_numname+0x76>
	ns[i] = '~';
 80062cc:	f107 0214 	add.w	r2, r7, #20
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	4413      	add	r3, r2
 80062d4:	227e      	movs	r2, #126	@ 0x7e
 80062d6:	701a      	strb	r2, [r3, #0]

	/* Append the suffix to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 80062d8:	2300      	movs	r3, #0
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
 80062dc:	e014      	b.n	8006308 <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	4413      	add	r3, r2
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff f8b8 	bl	800545c <dbc_1st>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <gen_numname+0xf2>
			if (j == i - 1) break;
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	3b01      	subs	r3, #1
 80062f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d010      	beq.n	800631e <gen_numname+0x10e>
			j++;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fe:	3301      	adds	r3, #1
 8006300:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	3301      	adds	r3, #1
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
 8006308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630c:	429a      	cmp	r2, r3
 800630e:	d207      	bcs.n	8006320 <gen_numname+0x110>
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	4413      	add	r3, r2
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b20      	cmp	r3, #32
 800631a:	d1e0      	bne.n	80062de <gen_numname+0xce>
 800631c:	e000      	b.n	8006320 <gen_numname+0x110>
			if (j == i - 1) break;
 800631e:	bf00      	nop
		}
	}
	do {	/* Append the suffix */
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006322:	2b07      	cmp	r3, #7
 8006324:	d807      	bhi.n	8006336 <gen_numname+0x126>
 8006326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800632c:	3330      	adds	r3, #48	@ 0x30
 800632e:	443b      	add	r3, r7
 8006330:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006334:	e000      	b.n	8006338 <gen_numname+0x128>
 8006336:	2120      	movs	r1, #32
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	627a      	str	r2, [r7, #36]	@ 0x24
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	460a      	mov	r2, r1
 8006344:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006348:	2b07      	cmp	r3, #7
 800634a:	d9e9      	bls.n	8006320 <gen_numname+0x110>
}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	3730      	adds	r7, #48	@ 0x30
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	00011021 	.word	0x00011021

0800635c <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006368:	230b      	movs	r3, #11
 800636a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	b2da      	uxtb	r2, r3
 8006370:	0852      	lsrs	r2, r2, #1
 8006372:	01db      	lsls	r3, r3, #7
 8006374:	4313      	orrs	r3, r2
 8006376:	b2da      	uxtb	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	1c59      	adds	r1, r3, #1
 800637c:	6079      	str	r1, [r7, #4]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	4413      	add	r3, r2
 8006382:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	3b01      	subs	r3, #1
 8006388:	60bb      	str	r3, [r7, #8]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1ed      	bne.n	800636c <sum_sfn+0x10>
	return sum;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80063ac:	2100      	movs	r1, #0
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff fcc0 	bl	8005d34 <dir_sdi>
 80063b4:	4603      	mov	r3, r0
 80063b6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <dir_find+0x24>
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	e0a9      	b.n	8006516 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80063c2:	23ff      	movs	r3, #255	@ 0xff
 80063c4:	753b      	strb	r3, [r7, #20]
 80063c6:	7d3b      	ldrb	r3, [r7, #20]
 80063c8:	757b      	strb	r3, [r7, #21]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f04f 32ff 	mov.w	r2, #4294967295
 80063d0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	4619      	mov	r1, r3
 80063d8:	6938      	ldr	r0, [r7, #16]
 80063da:	f7ff f8e2 	bl	80055a2 <move_window>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f040 8090 	bne.w	800650a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80063f2:	7dbb      	ldrb	r3, [r7, #22]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d102      	bne.n	80063fe <dir_find+0x60>
 80063f8:	2304      	movs	r3, #4
 80063fa:	75fb      	strb	r3, [r7, #23]
 80063fc:	e08a      	b.n	8006514 <dir_find+0x176>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	330b      	adds	r3, #11
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800640a:	73fb      	strb	r3, [r7, #15]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	7bfa      	ldrb	r2, [r7, #15]
 8006410:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006412:	7dbb      	ldrb	r3, [r7, #22]
 8006414:	2be5      	cmp	r3, #229	@ 0xe5
 8006416:	d007      	beq.n	8006428 <dir_find+0x8a>
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <dir_find+0x98>
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	2b0f      	cmp	r3, #15
 8006426:	d006      	beq.n	8006436 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006428:	23ff      	movs	r3, #255	@ 0xff
 800642a:	757b      	strb	r3, [r7, #21]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f04f 32ff 	mov.w	r2, #4294967295
 8006432:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006434:	e05e      	b.n	80064f4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	2b0f      	cmp	r3, #15
 800643a:	d136      	bne.n	80064aa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8006442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	d154      	bne.n	80064f4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800644a:	7dbb      	ldrb	r3, [r7, #22]
 800644c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00d      	beq.n	8006470 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	7b5b      	ldrb	r3, [r3, #13]
 800645a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800645c:	7dbb      	ldrb	r3, [r7, #22]
 800645e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006462:	75bb      	strb	r3, [r7, #22]
 8006464:	7dbb      	ldrb	r3, [r7, #22]
 8006466:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	62da      	str	r2, [r3, #44]	@ 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006470:	7dba      	ldrb	r2, [r7, #22]
 8006472:	7d7b      	ldrb	r3, [r7, #21]
 8006474:	429a      	cmp	r2, r3
 8006476:	d115      	bne.n	80064a4 <dir_find+0x106>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	330d      	adds	r3, #13
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	7d3a      	ldrb	r2, [r7, #20]
 8006482:	429a      	cmp	r2, r3
 8006484:	d10e      	bne.n	80064a4 <dir_find+0x106>
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	4619      	mov	r1, r3
 8006490:	4610      	mov	r0, r2
 8006492:	f7ff fde7 	bl	8006064 <cmp_lfn>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <dir_find+0x106>
 800649c:	7d7b      	ldrb	r3, [r7, #21]
 800649e:	3b01      	subs	r3, #1
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	e000      	b.n	80064a6 <dir_find+0x108>
 80064a4:	23ff      	movs	r3, #255	@ 0xff
 80064a6:	757b      	strb	r3, [r7, #21]
 80064a8:	e024      	b.n	80064f4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80064aa:	7d7b      	ldrb	r3, [r7, #21]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d109      	bne.n	80064c4 <dir_find+0x126>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff ff51 	bl	800635c <sum_sfn>
 80064ba:	4603      	mov	r3, r0
 80064bc:	461a      	mov	r2, r3
 80064be:	7d3b      	ldrb	r3, [r7, #20]
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d024      	beq.n	800650e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <dir_find+0x14a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69d8      	ldr	r0, [r3, #28]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3320      	adds	r3, #32
 80064da:	220b      	movs	r2, #11
 80064dc:	4619      	mov	r1, r3
 80064de:	f001 fc29 	bl	8007d34 <memcmp>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d014      	beq.n	8006512 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80064e8:	23ff      	movs	r3, #255	@ 0xff
 80064ea:	757b      	strb	r3, [r7, #21]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f04f 32ff 	mov.w	r2, #4294967295
 80064f2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80064f4:	2100      	movs	r1, #0
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff fc97 	bl	8005e2a <dir_next>
 80064fc:	4603      	mov	r3, r0
 80064fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f43f af65 	beq.w	80063d2 <dir_find+0x34>
 8006508:	e004      	b.n	8006514 <dir_find+0x176>
		if (res != FR_OK) break;
 800650a:	bf00      	nop
 800650c:	e002      	b.n	8006514 <dir_find+0x176>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800650e:	bf00      	nop
 8006510:	e000      	b.n	8006514 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006512:	bf00      	nop

	return res;
 8006514:	7dfb      	ldrb	r3, [r7, #23]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	@ 0x30
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	61fb      	str	r3, [r7, #28]
#if FF_USE_LFN		/* LFN configuration */
	UINT n, len, n_ent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8006534:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <dir_register+0x20>
 800653c:	2306      	movs	r3, #6
 800653e:	e0e0      	b.n	8006702 <dir_register+0x1e2>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 8006540:	2300      	movs	r3, #0
 8006542:	627b      	str	r3, [r7, #36]	@ 0x24
 8006544:	e002      	b.n	800654c <dir_register+0x2c>
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	3301      	adds	r3, #1
 800654a:	627b      	str	r3, [r7, #36]	@ 0x24
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	4413      	add	r3, r2
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f4      	bne.n	8006546 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT/FAT32 volume */
	memcpy(sn, dp->fn, 12);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f103 0220 	add.w	r2, r3, #32
 8006562:	f107 030c 	add.w	r3, r7, #12
 8006566:	6810      	ldr	r0, [r2, #0]
 8006568:	6851      	ldr	r1, [r2, #4]
 800656a:	6892      	ldr	r2, [r2, #8]
 800656c:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800656e:	7dfb      	ldrb	r3, [r7, #23]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d032      	beq.n	80065de <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2240      	movs	r2, #64	@ 0x40
 800657c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		for (n = 1; n < 100; n++) {
 8006580:	2301      	movs	r3, #1
 8006582:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006584:	e016      	b.n	80065b4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f103 0020 	add.w	r0, r3, #32
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	f107 010c 	add.w	r1, r7, #12
 8006594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006596:	f7ff fe3b 	bl	8006210 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff feff 	bl	800639e <dir_find>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80065a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80065ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b0:	3301      	adds	r3, #1
 80065b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b6:	2b63      	cmp	r3, #99	@ 0x63
 80065b8:	d9e5      	bls.n	8006586 <dir_register+0x66>
 80065ba:	e000      	b.n	80065be <dir_register+0x9e>
			if (res != FR_OK) break;
 80065bc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80065be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c0:	2b64      	cmp	r3, #100	@ 0x64
 80065c2:	d101      	bne.n	80065c8 <dir_register+0xa8>
 80065c4:	2307      	movs	r3, #7
 80065c6:	e09c      	b.n	8006702 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80065c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d002      	beq.n	80065d6 <dir_register+0xb6>
 80065d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80065d4:	e095      	b.n	8006702 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80065d6:	7dfa      	ldrb	r2, [r7, #23]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	}

	/* Create an SFN with/without LFNs. */
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d007      	beq.n	80065f8 <dir_register+0xd8>
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	330c      	adds	r3, #12
 80065ec:	4a47      	ldr	r2, [pc, #284]	@ (800670c <dir_register+0x1ec>)
 80065ee:	fba2 2303 	umull	r2, r3, r2, r3
 80065f2:	089b      	lsrs	r3, r3, #2
 80065f4:	3301      	adds	r3, #1
 80065f6:	e000      	b.n	80065fa <dir_register+0xda>
 80065f8:	2301      	movs	r3, #1
 80065fa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 80065fc:	6a39      	ldr	r1, [r7, #32]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff fca9 	bl	8005f56 <dir_alloc>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 800660a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800660e:	2b00      	cmp	r3, #0
 8006610:	d148      	bne.n	80066a4 <dir_register+0x184>
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	3b01      	subs	r3, #1
 8006616:	623b      	str	r3, [r7, #32]
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d042      	beq.n	80066a4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691a      	ldr	r2, [r3, #16]
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	015b      	lsls	r3, r3, #5
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff fb82 	bl	8005d34 <dir_sdi>
 8006630:	4603      	mov	r3, r0
 8006632:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006636:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800663a:	2b00      	cmp	r3, #0
 800663c:	d132      	bne.n	80066a4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3320      	adds	r3, #32
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff fe8a 	bl	800635c <sum_sfn>
 8006648:	4603      	mov	r3, r0
 800664a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	4619      	mov	r1, r3
 8006652:	69f8      	ldr	r0, [r7, #28]
 8006654:	f7fe ffa5 	bl	80055a2 <move_window>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800665e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006662:	2b00      	cmp	r3, #0
 8006664:	d11d      	bne.n	80066a2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	68d8      	ldr	r0, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69d9      	ldr	r1, [r3, #28]
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	b2da      	uxtb	r2, r3
 8006672:	7efb      	ldrb	r3, [r7, #27]
 8006674:	f7ff fd64 	bl	8006140 <put_lfn>
				fs->wflag = 1;
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	2201      	movs	r2, #1
 800667c:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800667e:	2100      	movs	r1, #0
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff fbd2 	bl	8005e2a <dir_next>
 8006686:	4603      	mov	r3, r0
 8006688:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --n_ent);
 800668c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006690:	2b00      	cmp	r3, #0
 8006692:	d107      	bne.n	80066a4 <dir_register+0x184>
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	3b01      	subs	r3, #1
 8006698:	623b      	str	r3, [r7, #32]
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1d5      	bne.n	800664c <dir_register+0x12c>
 80066a0:	e000      	b.n	80066a4 <dir_register+0x184>
				if (res != FR_OK) break;
 80066a2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80066a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d128      	bne.n	80066fe <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	4619      	mov	r1, r3
 80066b2:	69f8      	ldr	r0, [r7, #28]
 80066b4:	f7fe ff75 	bl	80055a2 <move_window>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80066be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d11b      	bne.n	80066fe <dir_register+0x1de>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	2220      	movs	r2, #32
 80066cc:	2100      	movs	r1, #0
 80066ce:	4618      	mov	r0, r3
 80066d0:	f001 fb40 	bl	8007d54 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	69d8      	ldr	r0, [r3, #28]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3320      	adds	r3, #32
 80066dc:	220b      	movs	r2, #11
 80066de:	4619      	mov	r1, r3
 80066e0:	f001 fb72 	bl	8007dc8 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	330c      	adds	r3, #12
 80066f0:	f002 0218 	and.w	r2, r2, #24
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	2201      	movs	r2, #1
 80066fc:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80066fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006702:	4618      	mov	r0, r3
 8006704:	3730      	adds	r7, #48	@ 0x30
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	4ec4ec4f 	.word	0x4ec4ec4f

08006710 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08a      	sub	sp, #40	@ 0x28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
	DWORD uc;
	UINT i, ni, si, di;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60bb      	str	r3, [r7, #8]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	2300      	movs	r3, #0
 800672a:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 800672c:	f107 0308 	add.w	r3, r7, #8
 8006730:	4618      	mov	r0, r3
 8006732:	f7fe feb5 	bl	80054a0 <tchar2uni>
 8006736:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673e:	d101      	bne.n	8006744 <create_name+0x34>
 8006740:	2306      	movs	r3, #6
 8006742:	e209      	b.n	8006b58 <create_name+0x448>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800674a:	d309      	bcc.n	8006760 <create_name+0x50>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	0c19      	lsrs	r1, r3, #16
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	617a      	str	r2, [r7, #20]
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4413      	add	r3, r2
 800675c:	b28a      	uxth	r2, r1
 800675e:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 8006764:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006766:	2b1f      	cmp	r3, #31
 8006768:	d920      	bls.n	80067ac <create_name+0x9c>
 800676a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800676c:	2b2f      	cmp	r3, #47	@ 0x2f
 800676e:	d01d      	beq.n	80067ac <create_name+0x9c>
 8006770:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006772:	2b5c      	cmp	r3, #92	@ 0x5c
 8006774:	d01a      	beq.n	80067ac <create_name+0x9c>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006776:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006778:	2b7f      	cmp	r3, #127	@ 0x7f
 800677a:	d809      	bhi.n	8006790 <create_name+0x80>
 800677c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800677e:	4619      	mov	r1, r3
 8006780:	4894      	ldr	r0, [pc, #592]	@ (80069d4 <create_name+0x2c4>)
 8006782:	f001 faef 	bl	8007d64 <strchr>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <create_name+0x80>
 800678c:	2306      	movs	r3, #6
 800678e:	e1e3      	b.n	8006b58 <create_name+0x448>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2bfe      	cmp	r3, #254	@ 0xfe
 8006794:	d901      	bls.n	800679a <create_name+0x8a>
 8006796:	2306      	movs	r3, #6
 8006798:	e1de      	b.n	8006b58 <create_name+0x448>
		lfn[di++] = wc;				/* Store the Unicode character */
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	617a      	str	r2, [r7, #20]
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4413      	add	r3, r2
 80067a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80067a8:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 80067aa:	e7bf      	b.n	800672c <create_name+0x1c>
	}
	if (wc < ' ') {				/* Stopped at end of the path? */
 80067ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067ae:	2b1f      	cmp	r3, #31
 80067b0:	d806      	bhi.n	80067c0 <create_name+0xb0>
		cf = NS_LAST;			/* Last segment */
 80067b2:	2304      	movs	r3, #4
 80067b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80067b8:	e014      	b.n	80067e4 <create_name+0xd4>
	} else {					/* Stopped at a separator */
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	3301      	adds	r3, #1
 80067be:	60bb      	str	r3, [r7, #8]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80067c6:	d0f8      	beq.n	80067ba <create_name+0xaa>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80067ce:	d0f4      	beq.n	80067ba <create_name+0xaa>
		cf = 0;					/* Next segment may follow */
 80067d0:	2300      	movs	r3, #0
 80067d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b1f      	cmp	r3, #31
 80067dc:	d802      	bhi.n	80067e4 <create_name+0xd4>
 80067de:	2304      	movs	r3, #4
 80067e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}
	*path = p;					/* Return pointer to the next segment */
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	601a      	str	r2, [r3, #0]

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d109      	bne.n	8006804 <create_name+0xf4>
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80067f6:	4413      	add	r3, r2
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	2b2e      	cmp	r3, #46	@ 0x2e
 8006802:	d015      	beq.n	8006830 <create_name+0x120>
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2b02      	cmp	r3, #2
 8006808:	d14d      	bne.n	80068a6 <create_name+0x196>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8006810:	4413      	add	r3, r2
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4413      	add	r3, r2
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	2b2e      	cmp	r3, #46	@ 0x2e
 800681c:	d143      	bne.n	80068a6 <create_name+0x196>
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4b6d      	ldr	r3, [pc, #436]	@ (80069d8 <create_name+0x2c8>)
 8006822:	4413      	add	r3, r2
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4413      	add	r3, r2
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	2b2e      	cmp	r3, #46	@ 0x2e
 800682e:	d13a      	bne.n	80068a6 <create_name+0x196>
		lfn[di] = 0;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	2200      	movs	r2, #0
 800683a:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 800683c:	2300      	movs	r3, #0
 800683e:	623b      	str	r3, [r7, #32]
 8006840:	e00f      	b.n	8006862 <create_name+0x152>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8006842:	6a3a      	ldr	r2, [r7, #32]
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	429a      	cmp	r2, r3
 8006848:	d201      	bcs.n	800684e <create_name+0x13e>
 800684a:	212e      	movs	r1, #46	@ 0x2e
 800684c:	e000      	b.n	8006850 <create_name+0x140>
 800684e:	2120      	movs	r1, #32
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	4413      	add	r3, r2
 8006856:	3320      	adds	r3, #32
 8006858:	460a      	mov	r2, r1
 800685a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	3301      	adds	r3, #1
 8006860:	623b      	str	r3, [r7, #32]
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	2b0a      	cmp	r3, #10
 8006866:	d9ec      	bls.n	8006842 <create_name+0x132>
		}
		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
 8006868:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800686c:	f043 0320 	orr.w	r3, r3, #32
 8006870:	b2d9      	uxtb	r1, r3
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	4413      	add	r3, r2
 8006878:	3320      	adds	r3, #32
 800687a:	460a      	mov	r2, r1
 800687c:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	e16a      	b.n	8006b58 <create_name+0x448>
	}
#endif
	while (di) {					/* Snip off trailing spaces and dots if exist */
		wc = lfn[di - 1];
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8006888:	4413      	add	r3, r2
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4413      	add	r3, r2
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc != ' ' && wc != '.') break;
 8006894:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006896:	2b20      	cmp	r3, #32
 8006898:	d002      	beq.n	80068a0 <create_name+0x190>
 800689a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800689c:	2b2e      	cmp	r3, #46	@ 0x2e
 800689e:	d106      	bne.n	80068ae <create_name+0x19e>
		di--;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	617b      	str	r3, [r7, #20]
	while (di) {					/* Snip off trailing spaces and dots if exist */
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1ea      	bne.n	8006882 <create_name+0x172>
 80068ac:	e000      	b.n	80068b0 <create_name+0x1a0>
		if (wc != ' ' && wc != '.') break;
 80068ae:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4413      	add	r3, r2
 80068b8:	2200      	movs	r2, #0
 80068ba:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <create_name+0x1b6>
 80068c2:	2306      	movs	r3, #6
 80068c4:	e148      	b.n	8006b58 <create_name+0x448>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 80068c6:	2300      	movs	r3, #0
 80068c8:	61bb      	str	r3, [r7, #24]
 80068ca:	e002      	b.n	80068d2 <create_name+0x1c2>
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	3301      	adds	r3, #1
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4413      	add	r3, r2
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d0f5      	beq.n	80068cc <create_name+0x1bc>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <create_name+0x1e4>
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4413      	add	r3, r2
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80068f2:	d109      	bne.n	8006908 <create_name+0x1f8>
 80068f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80068f8:	f043 0303 	orr.w	r3, r3, #3
 80068fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8006900:	e002      	b.n	8006908 <create_name+0x1f8>
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	3b01      	subs	r3, #1
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d009      	beq.n	8006922 <create_name+0x212>
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8006914:	4413      	add	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006920:	d1ef      	bne.n	8006902 <create_name+0x1f2>

	memset(dp->fn, ' ', 11);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3320      	adds	r3, #32
 8006926:	220b      	movs	r2, #11
 8006928:	2120      	movs	r1, #32
 800692a:	4618      	mov	r0, r3
 800692c:	f001 fa12 	bl	8007d54 <memset>
	i = b = 0; ni = 8;
 8006930:	2300      	movs	r3, #0
 8006932:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006936:	2300      	movs	r3, #0
 8006938:	623b      	str	r3, [r7, #32]
 800693a:	2308      	movs	r3, #8
 800693c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	61ba      	str	r2, [r7, #24]
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 800694e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80b7 	beq.w	8006ac4 <create_name+0x3b4>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8006956:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006958:	2b20      	cmp	r3, #32
 800695a:	d006      	beq.n	800696a <create_name+0x25a>
 800695c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800695e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006960:	d10a      	bne.n	8006978 <create_name+0x268>
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	429a      	cmp	r2, r3
 8006968:	d006      	beq.n	8006978 <create_name+0x268>
			cf |= NS_LOSS | NS_LFN;
 800696a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800696e:	f043 0303 	orr.w	r3, r3, #3
 8006972:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			continue;
 8006976:	e0a4      	b.n	8006ac2 <create_name+0x3b2>
		}

		if (i >= ni || si == di) {		/* End of field? */
 8006978:	6a3a      	ldr	r2, [r7, #32]
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	429a      	cmp	r2, r3
 800697e:	d203      	bcs.n	8006988 <create_name+0x278>
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	429a      	cmp	r2, r3
 8006986:	d129      	bne.n	80069dc <create_name+0x2cc>
			if (ni == 11) {				/* Name extension overflow? */
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	2b0b      	cmp	r3, #11
 800698c:	d106      	bne.n	800699c <create_name+0x28c>
				cf |= NS_LOSS | NS_LFN;
 800698e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006992:	f043 0303 	orr.w	r3, r3, #3
 8006996:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 800699a:	e096      	b.n	8006aca <create_name+0x3ba>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d005      	beq.n	80069b0 <create_name+0x2a0>
 80069a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80069a8:	f043 0303 	orr.w	r3, r3, #3
 80069ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;						/* No name extension? */
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	f200 8087 	bhi.w	8006ac8 <create_name+0x3b8>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	2308      	movs	r3, #8
 80069c0:	623b      	str	r3, [r7, #32]
 80069c2:	230b      	movs	r3, #11
 80069c4:	61fb      	str	r3, [r7, #28]
 80069c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			continue;
 80069d0:	e077      	b.n	8006ac2 <create_name+0x3b2>
 80069d2:	bf00      	nop
 80069d4:	08007e0c 	.word	0x08007e0c
 80069d8:	7ffffffe 	.word	0x7ffffffe
		}

		if (wc >= 0x80) {	/* Is this an extended character? */
 80069dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069de:	2b7f      	cmp	r3, #127	@ 0x7f
 80069e0:	d918      	bls.n	8006a14 <create_name+0x304>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 80069e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80069e6:	f043 0302 	orr.w	r3, r3, #2
 80069ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* In DBCS cfg */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* In SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 80069ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069f0:	f240 3152 	movw	r1, #850	@ 0x352
 80069f4:	4618      	mov	r0, r3
 80069f6:	f001 f8a3 	bl	8007b40 <ff_uni2oem>
 80069fa:	4603      	mov	r3, r0
 80069fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 80069fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <create_name+0x304>
 8006a08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a0e:	4a54      	ldr	r2, [pc, #336]	@ (8006b60 <create_name+0x450>)
 8006a10:	5cd3      	ldrb	r3, [r2, r3]
 8006a12:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else						/* In DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 8006a14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a16:	2bff      	cmp	r3, #255	@ 0xff
 8006a18:	d91a      	bls.n	8006a50 <create_name+0x340>
			if (i >= ni - 1) {			/* Field overflow? */
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	6a3a      	ldr	r2, [r7, #32]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d308      	bcc.n	8006a36 <create_name+0x326>
				cf |= NS_LOSS | NS_LFN;
 8006a24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a28:	f043 0303 	orr.w	r3, r3, #3
 8006a2c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				i = ni; continue;		/* Next field */
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	623b      	str	r3, [r7, #32]
 8006a34:	e045      	b.n	8006ac2 <create_name+0x3b2>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8006a36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a38:	0a1b      	lsrs	r3, r3, #8
 8006a3a:	b299      	uxth	r1, r3
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	623a      	str	r2, [r7, #32]
 8006a42:	b2c9      	uxtb	r1, r1
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	4413      	add	r3, r2
 8006a48:	460a      	mov	r2, r1
 8006a4a:	f883 2020 	strb.w	r2, [r3, #32]
 8006a4e:	e02e      	b.n	8006aae <create_name+0x39e>
		} else {						/* SBC */
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 8006a50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <create_name+0x356>
 8006a56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4842      	ldr	r0, [pc, #264]	@ (8006b64 <create_name+0x454>)
 8006a5c:	f001 f982 	bl	8007d64 <strchr>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d008      	beq.n	8006a78 <create_name+0x368>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006a66:	235f      	movs	r3, #95	@ 0x5f
 8006a68:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006a6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a6e:	f043 0303 	orr.w	r3, r3, #3
 8006a72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006a76:	e01a      	b.n	8006aae <create_name+0x39e>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8006a78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a7a:	2b40      	cmp	r3, #64	@ 0x40
 8006a7c:	d908      	bls.n	8006a90 <create_name+0x380>
 8006a7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a80:	2b5a      	cmp	r3, #90	@ 0x5a
 8006a82:	d805      	bhi.n	8006a90 <create_name+0x380>
					b |= 2;
 8006a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a88:	f043 0302 	orr.w	r3, r3, #2
 8006a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 8006a90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a92:	2b60      	cmp	r3, #96	@ 0x60
 8006a94:	d90b      	bls.n	8006aae <create_name+0x39e>
 8006a96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a98:	2b7a      	cmp	r3, #122	@ 0x7a
 8006a9a:	d808      	bhi.n	8006aae <create_name+0x39e>
					b |= 1; wc -= 0x20;
 8006a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006aa0:	f043 0301 	orr.w	r3, r3, #1
 8006aa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006aa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006aaa:	3b20      	subs	r3, #32
 8006aac:	84bb      	strh	r3, [r7, #36]	@ 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	623a      	str	r2, [r7, #32]
 8006ab4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006ab6:	b2d1      	uxtb	r1, r2
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	4413      	add	r3, r2
 8006abc:	460a      	mov	r2, r1
 8006abe:	f883 2020 	strb.w	r2, [r3, #32]
		wc = lfn[si++];					/* Get an LFN character */
 8006ac2:	e73c      	b.n	800693e <create_name+0x22e>
		if (wc == 0) break;				/* Break on end of the LFN */
 8006ac4:	bf00      	nop
 8006ac6:	e000      	b.n	8006aca <create_name+0x3ba>
			if (si > di) break;						/* No name extension? */
 8006ac8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ad0:	2be5      	cmp	r3, #229	@ 0xe5
 8006ad2:	d103      	bne.n	8006adc <create_name+0x3cc>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2205      	movs	r2, #5
 8006ad8:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	2b08      	cmp	r3, #8
 8006ae0:	d104      	bne.n	8006aec <create_name+0x3dc>
 8006ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8006aec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006af0:	f003 030c 	and.w	r3, r3, #12
 8006af4:	2b0c      	cmp	r3, #12
 8006af6:	d005      	beq.n	8006b04 <create_name+0x3f4>
 8006af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006afc:	f003 0303 	and.w	r3, r3, #3
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d105      	bne.n	8006b10 <create_name+0x400>
 8006b04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b08:	f043 0302 	orr.w	r3, r3, #2
 8006b0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006b10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d117      	bne.n	8006b4c <create_name+0x43c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8006b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d005      	beq.n	8006b34 <create_name+0x424>
 8006b28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b2c:	f043 0310 	orr.w	r3, r3, #16
 8006b30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8006b34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <create_name+0x43c>
 8006b40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b44:	f043 0308 	orr.w	r3, r3, #8
 8006b48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006b52:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	return FR_OK;
 8006b56:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3728      	adds	r7, #40	@ 0x28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	08007e88 	.word	0x08007e88
 8006b64:	08007e18 	.word	0x08007e18

08006b68 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	613b      	str	r3, [r7, #16]


#if FF_FS_RPATH != 0
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006b7e:	d00b      	beq.n	8006b98 <follow_path+0x30>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b86:	d007      	beq.n	8006b98 <follow_path+0x30>
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	609a      	str	r2, [r3, #8]
 8006b90:	e00d      	b.n	8006bae <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	3301      	adds	r3, #1
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006b9e:	d0f8      	beq.n	8006b92 <follow_path+0x2a>
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ba6:	d0f4      	beq.n	8006b92 <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b1f      	cmp	r3, #31
 8006bb4:	d80a      	bhi.n	8006bcc <follow_path+0x64>
		dp->fn[NSFLAG] = NS_NONAME;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2280      	movs	r2, #128	@ 0x80
 8006bba:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff f8b7 	bl	8005d34 <dir_sdi>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	75fb      	strb	r3, [r7, #23]
 8006bca:	e056      	b.n	8006c7a <follow_path+0x112>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006bcc:	463b      	mov	r3, r7
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff fd9d 	bl	8006710 <create_name>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d147      	bne.n	8006c70 <follow_path+0x108>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fbdc 	bl	800639e <dir_find>
 8006be6:	4603      	mov	r3, r0
 8006be8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8006bf0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8006bf2:	7dfb      	ldrb	r3, [r7, #23]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01b      	beq.n	8006c30 <follow_path+0xc8>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d13a      	bne.n	8006c74 <follow_path+0x10c>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00b      	beq.n	8006c20 <follow_path+0xb8>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d02c      	beq.n	8006c6c <follow_path+0x104>
						dp->fn[NSFLAG] = NS_NONAME;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2280      	movs	r2, #128	@ 0x80
 8006c16:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
						res = FR_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8006c1e:	e029      	b.n	8006c74 <follow_path+0x10c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d124      	bne.n	8006c74 <follow_path+0x10c>
 8006c2a:	2305      	movs	r3, #5
 8006c2c:	75fb      	strb	r3, [r7, #23]
				break;
 8006c2e:	e021      	b.n	8006c74 <follow_path+0x10c>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	f003 0304 	and.w	r3, r3, #4
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d11e      	bne.n	8006c78 <follow_path+0x110>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	799b      	ldrb	r3, [r3, #6]
 8006c3e:	f003 0310 	and.w	r3, r3, #16
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d102      	bne.n	8006c4c <follow_path+0xe4>
				res = FR_NO_PATH; break;
 8006c46:	2305      	movs	r3, #5
 8006c48:	75fb      	strb	r3, [r7, #23]
 8006c4a:	e016      	b.n	8006c7a <follow_path+0x112>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5a:	4413      	add	r3, r2
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6938      	ldr	r0, [r7, #16]
 8006c60:	f7ff f9c0 	bl	8005fe4 <ld_clust>
 8006c64:	4602      	mov	r2, r0
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	609a      	str	r2, [r3, #8]
 8006c6a:	e7af      	b.n	8006bcc <follow_path+0x64>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8006c6c:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c6e:	e7ad      	b.n	8006bcc <follow_path+0x64>
			if (res != FR_OK) break;
 8006c70:	bf00      	nop
 8006c72:	e002      	b.n	8006c7a <follow_path+0x112>
				break;
 8006c74:	bf00      	nop
 8006c76:	e000      	b.n	8006c7a <follow_path+0x112>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8006c78:	bf00      	nop
			}
		}
	}

	return res;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b089      	sub	sp, #36	@ 0x24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8006c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c90:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	613b      	str	r3, [r7, #16]
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <get_ldnumber+0x22>
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	e02e      	b.n	8006d04 <get_ldnumber+0x80>
	do {					/* Find a colon in the path */
		tc = *tt++;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	61fa      	str	r2, [r7, #28]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	2b1f      	cmp	r3, #31
 8006cb4:	d902      	bls.n	8006cbc <get_ldnumber+0x38>
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	2b3a      	cmp	r3, #58	@ 0x3a
 8006cba:	d1f4      	bne.n	8006ca6 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	2b3a      	cmp	r3, #58	@ 0x3a
 8006cc0:	d11c      	bne.n	8006cfc <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b2f      	cmp	r3, #47	@ 0x2f
 8006ccc:	d90c      	bls.n	8006ce8 <get_ldnumber+0x64>
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b39      	cmp	r3, #57	@ 0x39
 8006cd4:	d808      	bhi.n	8006ce8 <get_ldnumber+0x64>
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	3302      	adds	r3, #2
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d103      	bne.n	8006ce8 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	3b30      	subs	r3, #48	@ 0x30
 8006ce6:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	dc04      	bgt.n	8006cf8 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	e003      	b.n	8006d04 <get_ldnumber+0x80>
		return vol;
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 8006cfc:	4b04      	ldr	r3, [pc, #16]	@ (8006d10 <get_ldnumber+0x8c>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 8006d02:	697b      	ldr	r3, [r7, #20]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3724      	adds	r7, #36	@ 0x24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	2002064e 	.word	0x2002064e

08006d14 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	711a      	strb	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fe fc37 	bl	80055a2 <move_window>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <check_fs+0x2a>
 8006d3a:	2304      	movs	r3, #4
 8006d3c:	e088      	b.n	8006e50 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3338      	adds	r3, #56	@ 0x38
 8006d42:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe fb06 	bl	8005358 <ld_word>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006d56:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8006d58:	7b7b      	ldrb	r3, [r7, #13]
 8006d5a:	2beb      	cmp	r3, #235	@ 0xeb
 8006d5c:	d005      	beq.n	8006d6a <check_fs+0x56>
 8006d5e:	7b7b      	ldrb	r3, [r7, #13]
 8006d60:	2be9      	cmp	r3, #233	@ 0xe9
 8006d62:	d002      	beq.n	8006d6a <check_fs+0x56>
 8006d64:	7b7b      	ldrb	r3, [r7, #13]
 8006d66:	2be8      	cmp	r3, #232	@ 0xe8
 8006d68:	d16a      	bne.n	8006e40 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8006d6a:	89fb      	ldrh	r3, [r7, #14]
 8006d6c:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d10c      	bne.n	8006d8e <check_fs+0x7a>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3338      	adds	r3, #56	@ 0x38
 8006d78:	3352      	adds	r3, #82	@ 0x52
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	4936      	ldr	r1, [pc, #216]	@ (8006e58 <check_fs+0x144>)
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 ffd8 	bl	8007d34 <memcmp>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e060      	b.n	8006e50 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3338      	adds	r3, #56	@ 0x38
 8006d92:	330b      	adds	r3, #11
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fe fadf 	bl	8005358 <ld_word>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006da4:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8006da6:	897a      	ldrh	r2, [r7, #10]
 8006da8:	897b      	ldrh	r3, [r7, #10]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	4013      	ands	r3, r2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d146      	bne.n	8006e40 <check_fs+0x12c>
 8006db2:	897b      	ldrh	r3, [r7, #10]
 8006db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006db8:	d342      	bcc.n	8006e40 <check_fs+0x12c>
 8006dba:	897b      	ldrh	r3, [r7, #10]
 8006dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dc0:	d83e      	bhi.n	8006e40 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8006dc2:	7b7b      	ldrb	r3, [r7, #13]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d03b      	beq.n	8006e40 <check_fs+0x12c>
 8006dc8:	7b7a      	ldrb	r2, [r7, #13]
 8006dca:	7b7b      	ldrb	r3, [r7, #13]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d135      	bne.n	8006e40 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3338      	adds	r3, #56	@ 0x38
 8006dd8:	330e      	adds	r3, #14
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe fabc 	bl	8005358 <ld_word>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d02c      	beq.n	8006e40 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8006dec:	3b01      	subs	r3, #1
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d826      	bhi.n	8006e40 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3338      	adds	r3, #56	@ 0x38
 8006df6:	3311      	adds	r3, #17
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fe faad 	bl	8005358 <ld_word>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01d      	beq.n	8006e40 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3338      	adds	r3, #56	@ 0x38
 8006e08:	3313      	adds	r3, #19
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe faa4 	bl	8005358 <ld_word>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e14:	d809      	bhi.n	8006e2a <check_fs+0x116>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3338      	adds	r3, #56	@ 0x38
 8006e1a:	3320      	adds	r3, #32
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fe fab3 	bl	8005388 <ld_dword>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e28:	d30a      	bcc.n	8006e40 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3338      	adds	r3, #56	@ 0x38
 8006e2e:	3316      	adds	r3, #22
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe fa91 	bl	8005358 <ld_word>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	e007      	b.n	8006e50 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8006e40:	89fb      	ldrh	r3, [r7, #14]
 8006e42:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d101      	bne.n	8006e4e <check_fs+0x13a>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	e000      	b.n	8006e50 <check_fs+0x13c>
 8006e4e:	2303      	movs	r3, #3
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	08007e20 	.word	0x08007e20

08006e5c <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8006e66:	2100      	movs	r1, #0
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff ff53 	bl	8006d14 <check_fs>
 8006e6e:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d007      	beq.n	8006e86 <find_volume+0x2a>
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d802      	bhi.n	8006e82 <find_volume+0x26>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <find_volume+0x2a>
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	e045      	b.n	8006f12 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8006e86:	2300      	movs	r3, #0
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	e014      	b.n	8006eb6 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 8006e9a:	4413      	add	r3, r2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fa73 	bl	8005388 <ld_dword>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	3320      	adds	r3, #32
 8006eaa:	443b      	add	r3, r7
 8006eac:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	61fb      	str	r3, [r7, #28]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d9e7      	bls.n	8006e8c <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <find_volume+0x6c>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	e000      	b.n	8006eca <find_volume+0x6e>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	3320      	adds	r3, #32
 8006ed2:	443b      	add	r3, r7
 8006ed4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00b      	beq.n	8006ef4 <find_volume+0x98>
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	3320      	adds	r3, #32
 8006ee2:	443b      	add	r3, r7
 8006ee4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff ff12 	bl	8006d14 <check_fs>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	e000      	b.n	8006ef6 <find_volume+0x9a>
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d108      	bne.n	8006f10 <find_volume+0xb4>
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d905      	bls.n	8006f10 <find_volume+0xb4>
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	3301      	adds	r3, #1
 8006f08:	61fb      	str	r3, [r7, #28]
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	d9dd      	bls.n	8006ecc <find_volume+0x70>
	return fmt;
 8006f10:	69bb      	ldr	r3, [r7, #24]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3720      	adds	r7, #32
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b090      	sub	sp, #64	@ 0x40
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	4613      	mov	r3, r2
 8006f28:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f7ff fea7 	bl	8006c84 <get_ldnumber>
 8006f36:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	da01      	bge.n	8006f42 <mount_volume+0x26>
 8006f3e:	230b      	movs	r3, #11
 8006f40:	e1e2      	b.n	8007308 <mount_volume+0x3ec>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8006f42:	4a9d      	ldr	r2, [pc, #628]	@ (80071b8 <mount_volume+0x29c>)
 8006f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8006f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <mount_volume+0x3a>
 8006f52:	230c      	movs	r3, #12
 8006f54:	e1d8      	b.n	8007308 <mount_volume+0x3ec>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	f023 0301 	bic.w	r3, r3, #1
 8006f62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8006f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01a      	beq.n	8006fa2 <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 8006f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe f927 	bl	80051c4 <disk_status>
 8006f76:	4603      	mov	r3, r0
 8006f78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10c      	bne.n	8006fa2 <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <mount_volume+0x82>
 8006f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006f9a:	230a      	movs	r3, #10
 8006f9c:	e1b4      	b.n	8007308 <mount_volume+0x3ec>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e1b2      	b.n	8007308 <mount_volume+0x3ec>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8006fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8006fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fe f91f 	bl	80051f0 <disk_initialize>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e19f      	b.n	8007308 <mount_volume+0x3ec>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006fc8:	79fb      	ldrb	r3, [r7, #7]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <mount_volume+0xc2>
 8006fce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8006fda:	230a      	movs	r3, #10
 8006fdc:	e194      	b.n	8007308 <mount_volume+0x3ec>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 8006fde:	2100      	movs	r1, #0
 8006fe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fe2:	f7ff ff3b 	bl	8006e5c <find_volume>
 8006fe6:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d101      	bne.n	8006ff2 <mount_volume+0xd6>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e18a      	b.n	8007308 <mount_volume+0x3ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d901      	bls.n	8006ffc <mount_volume+0xe0>
 8006ff8:	230d      	movs	r3, #13
 8006ffa:	e185      	b.n	8007308 <mount_volume+0x3ec>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8006ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007000:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	3338      	adds	r3, #56	@ 0x38
 8007006:	330b      	adds	r3, #11
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe f9a5 	bl	8005358 <ld_word>
 800700e:	4603      	mov	r3, r0
 8007010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007014:	d001      	beq.n	800701a <mount_volume+0xfe>
 8007016:	230d      	movs	r3, #13
 8007018:	e176      	b.n	8007308 <mount_volume+0x3ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800701a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701c:	3338      	adds	r3, #56	@ 0x38
 800701e:	3316      	adds	r3, #22
 8007020:	4618      	mov	r0, r3
 8007022:	f7fe f999 	bl	8005358 <ld_word>
 8007026:	4603      	mov	r3, r0
 8007028:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800702a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <mount_volume+0x122>
 8007030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007032:	3338      	adds	r3, #56	@ 0x38
 8007034:	3324      	adds	r3, #36	@ 0x24
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe f9a6 	bl	8005388 <ld_dword>
 800703c:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 800703e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007040:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007042:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007046:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800704a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704c:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800704e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007050:	78db      	ldrb	r3, [r3, #3]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d005      	beq.n	8007062 <mount_volume+0x146>
 8007056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007058:	78db      	ldrb	r3, [r3, #3]
 800705a:	2b02      	cmp	r3, #2
 800705c:	d001      	beq.n	8007062 <mount_volume+0x146>
 800705e:	230d      	movs	r3, #13
 8007060:	e152      	b.n	8007308 <mount_volume+0x3ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007064:	78db      	ldrb	r3, [r3, #3]
 8007066:	461a      	mov	r2, r3
 8007068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706a:	fb02 f303 	mul.w	r3, r2, r3
 800706e:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007072:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007076:	461a      	mov	r2, r3
 8007078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800707c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707e:	895b      	ldrh	r3, [r3, #10]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d008      	beq.n	8007096 <mount_volume+0x17a>
 8007084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007086:	895b      	ldrh	r3, [r3, #10]
 8007088:	461a      	mov	r2, r3
 800708a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708c:	895b      	ldrh	r3, [r3, #10]
 800708e:	3b01      	subs	r3, #1
 8007090:	4013      	ands	r3, r2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <mount_volume+0x17e>
 8007096:	230d      	movs	r3, #13
 8007098:	e136      	b.n	8007308 <mount_volume+0x3ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800709a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709c:	3338      	adds	r3, #56	@ 0x38
 800709e:	3311      	adds	r3, #17
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fe f959 	bl	8005358 <ld_word>
 80070a6:	4603      	mov	r3, r0
 80070a8:	461a      	mov	r2, r3
 80070aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ac:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80070ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b0:	891b      	ldrh	r3, [r3, #8]
 80070b2:	f003 030f 	and.w	r3, r3, #15
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <mount_volume+0x1a4>
 80070bc:	230d      	movs	r3, #13
 80070be:	e123      	b.n	8007308 <mount_volume+0x3ec>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80070c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c2:	3338      	adds	r3, #56	@ 0x38
 80070c4:	3313      	adds	r3, #19
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe f946 	bl	8005358 <ld_word>
 80070cc:	4603      	mov	r3, r0
 80070ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80070d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <mount_volume+0x1c8>
 80070d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d8:	3338      	adds	r3, #56	@ 0x38
 80070da:	3320      	adds	r3, #32
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe f953 	bl	8005388 <ld_dword>
 80070e2:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e6:	3338      	adds	r3, #56	@ 0x38
 80070e8:	330e      	adds	r3, #14
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fe f934 	bl	8005358 <ld_word>
 80070f0:	4603      	mov	r3, r0
 80070f2:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80070f4:	8bfb      	ldrh	r3, [r7, #30]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <mount_volume+0x1e2>
 80070fa:	230d      	movs	r3, #13
 80070fc:	e104      	b.n	8007308 <mount_volume+0x3ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80070fe:	8bfa      	ldrh	r2, [r7, #30]
 8007100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007102:	4413      	add	r3, r2
 8007104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007106:	8912      	ldrh	r2, [r2, #8]
 8007108:	0912      	lsrs	r2, r2, #4
 800710a:	b292      	uxth	r2, r2
 800710c:	4413      	add	r3, r2
 800710e:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007110:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	429a      	cmp	r2, r3
 8007116:	d201      	bcs.n	800711c <mount_volume+0x200>
 8007118:	230d      	movs	r3, #13
 800711a:	e0f5      	b.n	8007308 <mount_volume+0x3ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800711c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007124:	8952      	ldrh	r2, [r2, #10]
 8007126:	fbb3 f3f2 	udiv	r3, r3, r2
 800712a:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <mount_volume+0x21a>
 8007132:	230d      	movs	r3, #13
 8007134:	e0e8      	b.n	8007308 <mount_volume+0x3ec>
		fmt = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	4a1f      	ldr	r2, [pc, #124]	@ (80071bc <mount_volume+0x2a0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d801      	bhi.n	8007146 <mount_volume+0x22a>
 8007142:	2303      	movs	r3, #3
 8007144:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800714c:	4293      	cmp	r3, r2
 800714e:	d801      	bhi.n	8007154 <mount_volume+0x238>
 8007150:	2302      	movs	r3, #2
 8007152:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800715a:	4293      	cmp	r3, r2
 800715c:	d801      	bhi.n	8007162 <mount_volume+0x246>
 800715e:	2301      	movs	r3, #1
 8007160:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <mount_volume+0x250>
 8007168:	230d      	movs	r3, #13
 800716a:	e0cd      	b.n	8007308 <mount_volume+0x3ec>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	1c9a      	adds	r2, r3, #2
 8007170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007172:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	6a3a      	ldr	r2, [r7, #32]
 8007178:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800717a:	8bfa      	ldrh	r2, [r7, #30]
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	441a      	add	r2, r3
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007184:	6a3a      	ldr	r2, [r7, #32]
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	441a      	add	r2, r3
 800718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718c:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800718e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007190:	2b03      	cmp	r3, #3
 8007192:	d123      	bne.n	80071dc <mount_volume+0x2c0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007196:	3338      	adds	r3, #56	@ 0x38
 8007198:	332a      	adds	r3, #42	@ 0x2a
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe f8dc 	bl	8005358 <ld_word>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <mount_volume+0x28e>
 80071a6:	230d      	movs	r3, #13
 80071a8:	e0ae      	b.n	8007308 <mount_volume+0x3ec>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80071aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ac:	891b      	ldrh	r3, [r3, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d006      	beq.n	80071c0 <mount_volume+0x2a4>
 80071b2:	230d      	movs	r3, #13
 80071b4:	e0a8      	b.n	8007308 <mount_volume+0x3ec>
 80071b6:	bf00      	nop
 80071b8:	20020648 	.word	0x20020648
 80071bc:	0ffffff5 	.word	0x0ffffff5
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80071c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c2:	3338      	adds	r3, #56	@ 0x38
 80071c4:	332c      	adds	r3, #44	@ 0x2c
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe f8de 	bl	8005388 <ld_dword>
 80071cc:	4602      	mov	r2, r0
 80071ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80071d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80071da:	e01e      	b.n	800721a <mount_volume+0x2fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80071dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071de:	891b      	ldrh	r3, [r3, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <mount_volume+0x2cc>
 80071e4:	230d      	movs	r3, #13
 80071e6:	e08f      	b.n	8007308 <mount_volume+0x3ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80071e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ee:	441a      	add	r2, r3
 80071f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d103      	bne.n	8007202 <mount_volume+0x2e6>
 80071fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	e00a      	b.n	8007218 <mount_volume+0x2fc>
 8007202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007204:	69da      	ldr	r2, [r3, #28]
 8007206:	4613      	mov	r3, r2
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	4413      	add	r3, r2
 800720c:	085a      	lsrs	r2, r3, #1
 800720e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007218:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800721a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721c:	6a1a      	ldr	r2, [r3, #32]
 800721e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007220:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007224:	0a5b      	lsrs	r3, r3, #9
 8007226:	429a      	cmp	r2, r3
 8007228:	d201      	bcs.n	800722e <mount_volume+0x312>
 800722a:	230d      	movs	r3, #13
 800722c:	e06c      	b.n	8007308 <mount_volume+0x3ec>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800722e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007230:	f04f 32ff 	mov.w	r2, #4294967295
 8007234:	615a      	str	r2, [r3, #20]
 8007236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007238:	695a      	ldr	r2, [r3, #20]
 800723a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800723e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007240:	2280      	movs	r2, #128	@ 0x80
 8007242:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8007244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007246:	2b03      	cmp	r3, #3
 8007248:	d149      	bne.n	80072de <mount_volume+0x3c2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800724a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724c:	3338      	adds	r3, #56	@ 0x38
 800724e:	3330      	adds	r3, #48	@ 0x30
 8007250:	4618      	mov	r0, r3
 8007252:	f7fe f881 	bl	8005358 <ld_word>
 8007256:	4603      	mov	r3, r0
 8007258:	2b01      	cmp	r3, #1
 800725a:	d140      	bne.n	80072de <mount_volume+0x3c2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	3301      	adds	r3, #1
 8007260:	4619      	mov	r1, r3
 8007262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007264:	f7fe f99d 	bl	80055a2 <move_window>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d137      	bne.n	80072de <mount_volume+0x3c2>
		{
			fs->fsi_flag = 0;
 800726e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007270:	2200      	movs	r2, #0
 8007272:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8007274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007276:	3338      	adds	r3, #56	@ 0x38
 8007278:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800727c:	4618      	mov	r0, r3
 800727e:	f7fe f86b 	bl	8005358 <ld_word>
 8007282:	4603      	mov	r3, r0
 8007284:	461a      	mov	r2, r3
 8007286:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800728a:	429a      	cmp	r2, r3
 800728c:	d127      	bne.n	80072de <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800728e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007290:	3338      	adds	r3, #56	@ 0x38
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe f878 	bl	8005388 <ld_dword>
 8007298:	4603      	mov	r3, r0
 800729a:	4a1d      	ldr	r2, [pc, #116]	@ (8007310 <mount_volume+0x3f4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d11e      	bne.n	80072de <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80072a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a2:	3338      	adds	r3, #56	@ 0x38
 80072a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe f86d 	bl	8005388 <ld_dword>
 80072ae:	4603      	mov	r3, r0
 80072b0:	4a18      	ldr	r2, [pc, #96]	@ (8007314 <mount_volume+0x3f8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d113      	bne.n	80072de <mount_volume+0x3c2>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	3338      	adds	r3, #56	@ 0x38
 80072ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fe f862 	bl	8005388 <ld_dword>
 80072c4:	4602      	mov	r2, r0
 80072c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c8:	615a      	str	r2, [r3, #20]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80072ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072cc:	3338      	adds	r3, #56	@ 0x38
 80072ce:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe f858 	bl	8005388 <ld_dword>
 80072d8:	4602      	mov	r2, r0
 80072da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072dc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 80072de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80072e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007318 <mount_volume+0x3fc>)
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	3301      	adds	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007318 <mount_volume+0x3fc>)
 80072f0:	801a      	strh	r2, [r3, #0]
 80072f2:	4b09      	ldr	r3, [pc, #36]	@ (8007318 <mount_volume+0x3fc>)
 80072f4:	881a      	ldrh	r2, [r3, #0]
 80072f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f8:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80072fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fc:	4a07      	ldr	r2, [pc, #28]	@ (800731c <mount_volume+0x400>)
 80072fe:	60da      	str	r2, [r3, #12]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8007300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007302:	2200      	movs	r2, #0
 8007304:	619a      	str	r2, [r3, #24]
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3740      	adds	r7, #64	@ 0x40
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	41615252 	.word	0x41615252
 8007314:	61417272 	.word	0x61417272
 8007318:	2002064c 	.word	0x2002064c
 800731c:	20020650 	.word	0x20020650

08007320 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800732a:	2309      	movs	r3, #9
 800732c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01c      	beq.n	800736e <validate+0x4e>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d018      	beq.n	800736e <validate+0x4e>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d013      	beq.n	800736e <validate+0x4e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	889a      	ldrh	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	88db      	ldrh	r3, [r3, #6]
 8007350:	429a      	cmp	r2, r3
 8007352:	d10c      	bne.n	800736e <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	785b      	ldrb	r3, [r3, #1]
 800735a:	4618      	mov	r0, r3
 800735c:	f7fd ff32 	bl	80051c4 <disk_status>
 8007360:	4603      	mov	r3, r0
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <validate+0x4e>
			res = FR_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d102      	bne.n	800737a <validate+0x5a>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	e000      	b.n	800737c <validate+0x5c>
 800737a:	2300      	movs	r3, #0
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	6013      	str	r3, [r2, #0]
	return res;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	4613      	mov	r3, r2
 8007398:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800739e:	f107 0310 	add.w	r3, r7, #16
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff fc6e 	bl	8006c84 <get_ldnumber>
 80073a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	da01      	bge.n	80073b4 <f_mount+0x28>
 80073b0:	230b      	movs	r3, #11
 80073b2:	e02e      	b.n	8007412 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 80073b4:	4a19      	ldr	r2, [pc, #100]	@ (800741c <f_mount+0x90>)
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d007      	beq.n	80073d4 <f_mount+0x48>
		FatFs[vol] = 0;
 80073c4:	4a15      	ldr	r2, [pc, #84]	@ (800741c <f_mount+0x90>)
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	2100      	movs	r1, #0
 80073ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	2200      	movs	r2, #0
 80073d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00b      	beq.n	80073f2 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	69fa      	ldr	r2, [r7, #28]
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	490c      	ldr	r1, [pc, #48]	@ (800741c <f_mount+0x90>)
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 80073f2:	79fb      	ldrb	r3, [r7, #7]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <f_mount+0x70>
 80073f8:	2300      	movs	r3, #0
 80073fa:	e00a      	b.n	8007412 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 80073fc:	f107 010c 	add.w	r1, r7, #12
 8007400:	f107 0308 	add.w	r3, r7, #8
 8007404:	2200      	movs	r2, #0
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff fd88 	bl	8006f1c <mount_volume>
 800740c:	4603      	mov	r3, r0
 800740e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007410:	7dfb      	ldrb	r3, [r7, #23]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3720      	adds	r7, #32
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	20020648 	.word	0x20020648

08007420 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b098      	sub	sp, #96	@ 0x60
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	4613      	mov	r3, r2
 800742c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <f_open+0x18>
 8007434:	2309      	movs	r3, #9
 8007436:	e177      	b.n	8007728 <f_open+0x308>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8007438:	79fb      	ldrb	r3, [r7, #7]
 800743a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800743e:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8007440:	79fa      	ldrb	r2, [r7, #7]
 8007442:	f107 0110 	add.w	r1, r7, #16
 8007446:	f107 0308 	add.w	r3, r7, #8
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff fd66 	bl	8006f1c <mount_volume>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007456:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800745a:	2b00      	cmp	r3, #0
 800745c:	f040 815b 	bne.w	8007716 <f_open+0x2f6>
		dj.obj.fs = fs;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	f107 0314 	add.w	r3, r7, #20
 800746a:	4611      	mov	r1, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f7ff fb7b 	bl	8006b68 <follow_path>
 8007472:	4603      	mov	r3, r0
 8007474:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8007478:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800747c:	2b00      	cmp	r3, #0
 800747e:	d107      	bne.n	8007490 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007480:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007484:	b25b      	sxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	da02      	bge.n	8007490 <f_open+0x70>
				res = FR_INVALID_NAME;
 800748a:	2306      	movs	r3, #6
 800748c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	f003 031c 	and.w	r3, r3, #28
 8007496:	2b00      	cmp	r3, #0
 8007498:	d078      	beq.n	800758c <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 800749a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d010      	beq.n	80074c4 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80074a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d107      	bne.n	80074ba <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80074aa:	f107 0314 	add.w	r3, r7, #20
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff f836 	bl	8006520 <dir_register>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	f043 0308 	orr.w	r3, r3, #8
 80074c0:	71fb      	strb	r3, [r7, #7]
 80074c2:	e010      	b.n	80074e6 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80074c4:	7ebb      	ldrb	r3, [r7, #26]
 80074c6:	f003 0311 	and.w	r3, r3, #17
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <f_open+0xb6>
					res = FR_DENIED;
 80074ce:	2307      	movs	r3, #7
 80074d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80074d4:	e007      	b.n	80074e6 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <f_open+0xc6>
 80074e0:	2308      	movs	r3, #8
 80074e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80074e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d168      	bne.n	80075c0 <f_open+0x1a0>
 80074ee:	79fb      	ldrb	r3, [r7, #7]
 80074f0:	f003 0308 	and.w	r3, r3, #8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d063      	beq.n	80075c0 <f_open+0x1a0>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 80074f8:	f7fd ff26 	bl	8005348 <get_fattime>
 80074fc:	6538      	str	r0, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 80074fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007500:	330e      	adds	r3, #14
 8007502:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007504:	4618      	mov	r0, r3
 8007506:	f7fd ff7d 	bl	8005404 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 800750a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750c:	3316      	adds	r3, #22
 800750e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007510:	4618      	mov	r0, r3
 8007512:	f7fd ff77 	bl	8005404 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800751a:	4611      	mov	r1, r2
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe fd61 	bl	8005fe4 <ld_clust>
 8007522:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007526:	330b      	adds	r3, #11
 8007528:	2220      	movs	r2, #32
 800752a:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007530:	2200      	movs	r2, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fd75 	bl	8006022 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	331c      	adds	r3, #28
 800753c:	2100      	movs	r1, #0
 800753e:	4618      	mov	r0, r3
 8007540:	f7fd ff60 	bl	8005404 <st_dword>
					fs->wflag = 1;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	2201      	movs	r2, #1
 8007548:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800754a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d037      	beq.n	80075c0 <f_open+0x1a0>
						sc = fs->winsect;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007554:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8007556:	f107 0314 	add.w	r3, r7, #20
 800755a:	2200      	movs	r2, #0
 800755c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fa6a 	bl	8005a38 <remove_chain>
 8007564:	4603      	mov	r3, r0
 8007566:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800756a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800756e:	2b00      	cmp	r3, #0
 8007570:	d126      	bne.n	80075c0 <f_open+0x1a0>
							res = move_window(fs, sc);
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe f813 	bl	80055a2 <move_window>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007586:	3a01      	subs	r2, #1
 8007588:	611a      	str	r2, [r3, #16]
 800758a:	e019      	b.n	80075c0 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800758c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007590:	2b00      	cmp	r3, #0
 8007592:	d115      	bne.n	80075c0 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8007594:	7ebb      	ldrb	r3, [r7, #26]
 8007596:	f003 0310 	and.w	r3, r3, #16
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <f_open+0x186>
					res = FR_NO_FILE;
 800759e:	2304      	movs	r3, #4
 80075a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80075a4:	e00c      	b.n	80075c0 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d007      	beq.n	80075c0 <f_open+0x1a0>
 80075b0:	7ebb      	ldrb	r3, [r7, #26]
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <f_open+0x1a0>
						res = FR_DENIED;
 80075ba:	2307      	movs	r3, #7
 80075bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80075c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10f      	bne.n	80075e8 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80075c8:	79fb      	ldrb	r3, [r7, #7]
 80075ca:	f003 0308 	and.w	r3, r3, #8
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <f_open+0x1ba>
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80075e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80075e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f040 8092 	bne.w	8007716 <f_open+0x2f6>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075f6:	4611      	mov	r1, r2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe fcf3 	bl	8005fe4 <ld_clust>
 80075fe:	4602      	mov	r2, r0
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007606:	331c      	adds	r3, #28
 8007608:	4618      	mov	r0, r3
 800760a:	f7fd febd 	bl	8005388 <ld_dword>
 800760e:	4602      	mov	r2, r0
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	88da      	ldrh	r2, [r3, #6]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	79fa      	ldrb	r2, [r7, #7]
 8007626:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3328      	adds	r3, #40	@ 0x28
 800763e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007642:	2100      	movs	r1, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fb85 	bl	8007d54 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800764a:	79fb      	ldrb	r3, [r7, #7]
 800764c:	f003 0320 	and.w	r3, r3, #32
 8007650:	2b00      	cmp	r3, #0
 8007652:	d060      	beq.n	8007716 <f_open+0x2f6>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d05c      	beq.n	8007716 <f_open+0x2f6>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	895b      	ldrh	r3, [r3, #10]
 8007668:	025b      	lsls	r3, r3, #9
 800766a:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	657b      	str	r3, [r7, #84]	@ 0x54
 8007678:	e016      	b.n	80076a8 <f_open+0x288>
					clst = get_fat(&fp->obj, clst);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe f849 	bl	8005716 <get_fat>
 8007684:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007686:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007688:	2b01      	cmp	r3, #1
 800768a:	d802      	bhi.n	8007692 <f_open+0x272>
 800768c:	2302      	movs	r3, #2
 800768e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007692:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007698:	d102      	bne.n	80076a0 <f_open+0x280>
 800769a:	2301      	movs	r3, #1
 800769c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80076a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80076a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d103      	bne.n	80076b8 <f_open+0x298>
 80076b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d8e0      	bhi.n	800767a <f_open+0x25a>
				}
				fp->clust = clst;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076bc:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80076be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d127      	bne.n	8007716 <f_open+0x2f6>
 80076c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d022      	beq.n	8007716 <f_open+0x2f6>
					sc = clst2sect(fs, clst);
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fd ffff 	bl	80056d8 <clst2sect>
 80076da:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 80076dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d103      	bne.n	80076ea <f_open+0x2ca>
						res = FR_INT_ERR;
 80076e2:	2302      	movs	r3, #2
 80076e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80076e8:	e015      	b.n	8007716 <f_open+0x2f6>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80076ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076ec:	0a5a      	lsrs	r2, r3, #9
 80076ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076f0:	441a      	add	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	7858      	ldrb	r0, [r3, #1]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	69da      	ldr	r2, [r3, #28]
 8007704:	2301      	movs	r3, #1
 8007706:	f7fd fd91 	bl	800522c <disk_read>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <f_open+0x2f6>
 8007710:	2301      	movs	r3, #1
 8007712:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007716:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <f_open+0x304>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007724:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007728:	4618      	mov	r0, r3
 800772a:	3760      	adds	r7, #96	@ 0x60
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08c      	sub	sp, #48	@ 0x30
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f107 0210 	add.w	r2, r7, #16
 800774e:	4611      	mov	r1, r2
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff fde5 	bl	8007320 <validate>
 8007756:	4603      	mov	r3, r0
 8007758:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800775c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007760:	2b00      	cmp	r3, #0
 8007762:	d107      	bne.n	8007774 <f_write+0x44>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	7c5b      	ldrb	r3, [r3, #17]
 8007768:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800776c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <f_write+0x4a>
 8007774:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007778:	e13f      	b.n	80079fa <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	7c1b      	ldrb	r3, [r3, #16]
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <f_write+0x5a>
 8007786:	2307      	movs	r3, #7
 8007788:	e137      	b.n	80079fa <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	695a      	ldr	r2, [r3, #20]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	441a      	add	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	429a      	cmp	r2, r3
 8007798:	f080 8121 	bcs.w	80079de <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	43db      	mvns	r3, r3
 80077a2:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80077a4:	e11b      	b.n	80079de <f_write+0x2ae>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f040 80d7 	bne.w	8007962 <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	0a5b      	lsrs	r3, r3, #9
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	8952      	ldrh	r2, [r2, #10]
 80077be:	3a01      	subs	r2, #1
 80077c0:	4013      	ands	r3, r2
 80077c2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d137      	bne.n	800783a <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10c      	bne.n	80077ec <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80077d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10e      	bne.n	80077fc <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe f98d 	bl	8005b02 <create_chain>
 80077e8:	62b8      	str	r0, [r7, #40]	@ 0x28
 80077ea:	e007      	b.n	80077fc <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f7fe f984 	bl	8005b02 <create_chain>
 80077fa:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80077fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 80f2 	beq.w	80079e8 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007806:	2b01      	cmp	r3, #1
 8007808:	d104      	bne.n	8007814 <f_write+0xe4>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2202      	movs	r2, #2
 800780e:	745a      	strb	r2, [r3, #17]
 8007810:	2302      	movs	r3, #2
 8007812:	e0f2      	b.n	80079fa <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781a:	d104      	bne.n	8007826 <f_write+0xf6>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	745a      	strb	r2, [r3, #17]
 8007822:	2301      	movs	r3, #1
 8007824:	e0e9      	b.n	80079fa <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800782a:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d102      	bne.n	800783a <f_write+0x10a>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007838:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	7c1b      	ldrb	r3, [r3, #16]
 800783e:	b25b      	sxtb	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	da18      	bge.n	8007876 <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	7858      	ldrb	r0, [r3, #1]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	69da      	ldr	r2, [r3, #28]
 8007852:	2301      	movs	r3, #1
 8007854:	f7fd fd05 	bl	8005262 <disk_write>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d004      	beq.n	8007868 <f_write+0x138>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	745a      	strb	r2, [r3, #17]
 8007864:	2301      	movs	r3, #1
 8007866:	e0c8      	b.n	80079fa <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	7c1b      	ldrb	r3, [r3, #16]
 800786c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007870:	b2da      	uxtb	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	4619      	mov	r1, r3
 800787e:	4610      	mov	r0, r2
 8007880:	f7fd ff2a 	bl	80056d8 <clst2sect>
 8007884:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d104      	bne.n	8007896 <f_write+0x166>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2202      	movs	r2, #2
 8007890:	745a      	strb	r2, [r3, #17]
 8007892:	2302      	movs	r3, #2
 8007894:	e0b1      	b.n	80079fa <f_write+0x2ca>
			sect += csect;
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	4413      	add	r3, r2
 800789c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	0a5b      	lsrs	r3, r3, #9
 80078a2:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d03c      	beq.n	8007924 <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	4413      	add	r3, r2
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	8952      	ldrh	r2, [r2, #10]
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d905      	bls.n	80078c4 <f_write+0x194>
					cc = fs->csize - csect;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	895b      	ldrh	r3, [r3, #10]
 80078bc:	461a      	mov	r2, r3
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	7858      	ldrb	r0, [r3, #1]
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	69f9      	ldr	r1, [r7, #28]
 80078ce:	f7fd fcc8 	bl	8005262 <disk_write>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <f_write+0x1b2>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	745a      	strb	r2, [r3, #17]
 80078de:	2301      	movs	r3, #1
 80078e0:	e08b      	b.n	80079fa <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	69da      	ldr	r2, [r3, #28]
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	6a3a      	ldr	r2, [r7, #32]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d915      	bls.n	800791c <f_write+0x1ec>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	69da      	ldr	r2, [r3, #28]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	025b      	lsls	r3, r3, #9
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	4413      	add	r3, r2
 8007904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007908:	4619      	mov	r1, r3
 800790a:	f000 fa5d 	bl	8007dc8 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	7c1b      	ldrb	r3, [r3, #16]
 8007912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007916:	b2da      	uxtb	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	025b      	lsls	r3, r3, #9
 8007920:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007922:	e03f      	b.n	80079a4 <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	429a      	cmp	r2, r3
 800792c:	d016      	beq.n	800795c <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	695a      	ldr	r2, [r3, #20]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007936:	429a      	cmp	r2, r3
 8007938:	d210      	bcs.n	800795c <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	7858      	ldrb	r0, [r3, #1]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007944:	2301      	movs	r3, #1
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	f7fd fc70 	bl	800522c <disk_read>
 800794c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800794e:	2b00      	cmp	r3, #0
 8007950:	d004      	beq.n	800795c <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2201      	movs	r2, #1
 8007956:	745a      	strb	r2, [r3, #17]
 8007958:	2301      	movs	r3, #1
 800795a:	e04e      	b.n	80079fa <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800796e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	429a      	cmp	r2, r3
 8007976:	d901      	bls.n	800797c <f_write+0x24c>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798a:	4413      	add	r3, r2
 800798c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800798e:	69f9      	ldr	r1, [r7, #28]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 fa19 	bl	8007dc8 <memcpy>
		fp->flag |= FA_DIRTY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	7c1b      	ldrb	r3, [r3, #16]
 800799a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	607b      	str	r3, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b2:	441a      	add	r2, r3
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	69fa      	ldr	r2, [r7, #28]
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	4413      	add	r3, r2
 80079be:	61fb      	str	r3, [r7, #28]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	695a      	ldr	r2, [r3, #20]
 80079c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c6:	441a      	add	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	615a      	str	r2, [r3, #20]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68da      	ldr	r2, [r3, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	bf38      	it	cc
 80079d8:	461a      	movcc	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	60da      	str	r2, [r3, #12]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f47f aee0 	bne.w	80077a6 <f_write+0x76>
 80079e6:	e000      	b.n	80079ea <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80079e8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	7c1b      	ldrb	r3, [r3, #16]
 80079ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3730      	adds	r7, #48	@ 0x30
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b086      	sub	sp, #24
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f107 0208 	add.w	r2, r7, #8
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff fc84 	bl	8007320 <validate>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d168      	bne.n	8007af4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	7c1b      	ldrb	r3, [r3, #16]
 8007a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d062      	beq.n	8007af4 <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	7c1b      	ldrb	r3, [r3, #16]
 8007a32:	b25b      	sxtb	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da15      	bge.n	8007a64 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	7858      	ldrb	r0, [r3, #1]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69da      	ldr	r2, [r3, #28]
 8007a46:	2301      	movs	r3, #1
 8007a48:	f7fd fc0b 	bl	8005262 <disk_write>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <f_sync+0x54>
 8007a52:	2301      	movs	r3, #1
 8007a54:	e04f      	b.n	8007af6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7c1b      	ldrb	r3, [r3, #16]
 8007a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007a64:	f7fd fc70 	bl	8005348 <get_fattime>
 8007a68:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f7fd fd95 	bl	80055a2 <move_window>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d138      	bne.n	8007af4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a86:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	330b      	adds	r3, #11
 8007a8c:	781a      	ldrb	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	330b      	adds	r3, #11
 8007a92:	f042 0220 	orr.w	r2, r2, #32
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	68f9      	ldr	r1, [r7, #12]
 8007aa6:	f7fe fabc 	bl	8006022 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f103 021c 	add.w	r2, r3, #28
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	f7fd fca4 	bl	8005404 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3316      	adds	r3, #22
 8007ac0:	6939      	ldr	r1, [r7, #16]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fd fc9e 	bl	8005404 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3312      	adds	r3, #18
 8007acc:	2100      	movs	r1, #0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fd fc7d 	bl	80053ce <st_word>
					fs->wflag = 1;
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fd fd8d 	bl	80055fc <sync_fs>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	7c1b      	ldrb	r3, [r3, #16]
 8007aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff ff7b 	bl	8007a02 <f_sync>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10e      	bne.n	8007b34 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f107 0208 	add.w	r2, r7, #8
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff fbfe 	bl	8007320 <validate>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d102      	bne.n	8007b34 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	807b      	strh	r3, [r7, #2]
	WCHAR c = 0;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8007b50:	4b17      	ldr	r3, [pc, #92]	@ (8007bb0 <ff_uni2oem+0x70>)
 8007b52:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b58:	d802      	bhi.n	8007b60 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	81fb      	strh	r3, [r7, #14]
 8007b5e:	e01f      	b.n	8007ba0 <ff_uni2oem+0x60>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b66:	d21b      	bcs.n	8007ba0 <ff_uni2oem+0x60>
 8007b68:	887b      	ldrh	r3, [r7, #2]
 8007b6a:	f240 3252 	movw	r2, #850	@ 0x352
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d116      	bne.n	8007ba0 <ff_uni2oem+0x60>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8007b72:	2300      	movs	r3, #0
 8007b74:	81fb      	strh	r3, [r7, #14]
 8007b76:	e002      	b.n	8007b7e <ff_uni2oem+0x3e>
 8007b78:	89fb      	ldrh	r3, [r7, #14]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	81fb      	strh	r3, [r7, #14]
 8007b7e:	89fb      	ldrh	r3, [r7, #14]
 8007b80:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b82:	d808      	bhi.n	8007b96 <ff_uni2oem+0x56>
 8007b84:	89fb      	ldrh	r3, [r7, #14]
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d1f0      	bne.n	8007b78 <ff_uni2oem+0x38>
			c = (c + 0x80) & 0xFF;
 8007b96:	89fb      	ldrh	r3, [r7, #14]
 8007b98:	3380      	adds	r3, #128	@ 0x80
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007ba0:	89fb      	ldrh	r3, [r7, #14]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	08007f08 	.word	0x08007f08

08007bb4 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	460a      	mov	r2, r1
 8007bbe:	80fb      	strh	r3, [r7, #6]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	80bb      	strh	r3, [r7, #4]
	WCHAR c = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8007bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8007c08 <ff_oem2uni+0x54>)
 8007bca:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
 8007bcc:	88fb      	ldrh	r3, [r7, #6]
 8007bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bd0:	d802      	bhi.n	8007bd8 <ff_oem2uni+0x24>
		c = oem;
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	81fb      	strh	r3, [r7, #14]
 8007bd6:	e00f      	b.n	8007bf8 <ff_oem2uni+0x44>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 8007bd8:	88bb      	ldrh	r3, [r7, #4]
 8007bda:	f240 3252 	movw	r2, #850	@ 0x352
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d10a      	bne.n	8007bf8 <ff_oem2uni+0x44>
			if (oem < 0x100) c = p[oem - 0x80];
 8007be2:	88fb      	ldrh	r3, [r7, #6]
 8007be4:	2bff      	cmp	r3, #255	@ 0xff
 8007be6:	d807      	bhi.n	8007bf8 <ff_oem2uni+0x44>
 8007be8:	88fa      	ldrh	r2, [r7, #6]
 8007bea:	4b08      	ldr	r3, [pc, #32]	@ (8007c0c <ff_oem2uni+0x58>)
 8007bec:	4413      	add	r3, r2
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007bf8:	89fb      	ldrh	r3, [r7, #14]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	08007f08 	.word	0x08007f08
 8007c0c:	7fffff80 	.word	0x7fffff80

08007c10 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c1e:	d27d      	bcs.n	8007d1c <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 8007c24:	8a7b      	ldrh	r3, [r7, #18]
 8007c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c2a:	d201      	bcs.n	8007c30 <ff_wtoupper+0x20>
 8007c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8007d2c <ff_wtoupper+0x11c>)
 8007c2e:	e000      	b.n	8007c32 <ff_wtoupper+0x22>
 8007c30:	4b3f      	ldr	r3, [pc, #252]	@ (8007d30 <ff_wtoupper+0x120>)
 8007c32:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	1c9a      	adds	r2, r3, #2
 8007c38:	617a      	str	r2, [r7, #20]
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8007c3e:	8a3b      	ldrh	r3, [r7, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d069      	beq.n	8007d18 <ff_wtoupper+0x108>
 8007c44:	8a7a      	ldrh	r2, [r7, #18]
 8007c46:	8a3b      	ldrh	r3, [r7, #16]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d365      	bcc.n	8007d18 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	1c9a      	adds	r2, r3, #2
 8007c50:	617a      	str	r2, [r7, #20]
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	81fb      	strh	r3, [r7, #14]
 8007c56:	89fb      	ldrh	r3, [r7, #14]
 8007c58:	0a1b      	lsrs	r3, r3, #8
 8007c5a:	81bb      	strh	r3, [r7, #12]
 8007c5c:	89fb      	ldrh	r3, [r7, #14]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 8007c62:	8a7a      	ldrh	r2, [r7, #18]
 8007c64:	8a39      	ldrh	r1, [r7, #16]
 8007c66:	89fb      	ldrh	r3, [r7, #14]
 8007c68:	440b      	add	r3, r1
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	da4a      	bge.n	8007d04 <ff_wtoupper+0xf4>
				switch (cmd) {
 8007c6e:	89bb      	ldrh	r3, [r7, #12]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d850      	bhi.n	8007d16 <ff_wtoupper+0x106>
 8007c74:	a201      	add	r2, pc, #4	@ (adr r2, 8007c7c <ff_wtoupper+0x6c>)
 8007c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7a:	bf00      	nop
 8007c7c:	08007ca1 	.word	0x08007ca1
 8007c80:	08007cb3 	.word	0x08007cb3
 8007c84:	08007cc9 	.word	0x08007cc9
 8007c88:	08007cd1 	.word	0x08007cd1
 8007c8c:	08007cd9 	.word	0x08007cd9
 8007c90:	08007ce1 	.word	0x08007ce1
 8007c94:	08007ce9 	.word	0x08007ce9
 8007c98:	08007cf1 	.word	0x08007cf1
 8007c9c:	08007cf9 	.word	0x08007cf9
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8007ca0:	8a7a      	ldrh	r2, [r7, #18]
 8007ca2:	8a3b      	ldrh	r3, [r7, #16]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	4413      	add	r3, r2
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	827b      	strh	r3, [r7, #18]
 8007cb0:	e027      	b.n	8007d02 <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8007cb2:	8a7a      	ldrh	r2, [r7, #18]
 8007cb4:	8a3b      	ldrh	r3, [r7, #16]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	8a7a      	ldrh	r2, [r7, #18]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	827b      	strh	r3, [r7, #18]
 8007cc6:	e01c      	b.n	8007d02 <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 8007cc8:	8a7b      	ldrh	r3, [r7, #18]
 8007cca:	3b10      	subs	r3, #16
 8007ccc:	827b      	strh	r3, [r7, #18]
 8007cce:	e018      	b.n	8007d02 <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8007cd0:	8a7b      	ldrh	r3, [r7, #18]
 8007cd2:	3b20      	subs	r3, #32
 8007cd4:	827b      	strh	r3, [r7, #18]
 8007cd6:	e014      	b.n	8007d02 <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8007cd8:	8a7b      	ldrh	r3, [r7, #18]
 8007cda:	3b30      	subs	r3, #48	@ 0x30
 8007cdc:	827b      	strh	r3, [r7, #18]
 8007cde:	e010      	b.n	8007d02 <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8007ce0:	8a7b      	ldrh	r3, [r7, #18]
 8007ce2:	3b1a      	subs	r3, #26
 8007ce4:	827b      	strh	r3, [r7, #18]
 8007ce6:	e00c      	b.n	8007d02 <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 8007ce8:	8a7b      	ldrh	r3, [r7, #18]
 8007cea:	3308      	adds	r3, #8
 8007cec:	827b      	strh	r3, [r7, #18]
 8007cee:	e008      	b.n	8007d02 <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 8007cf0:	8a7b      	ldrh	r3, [r7, #18]
 8007cf2:	3b50      	subs	r3, #80	@ 0x50
 8007cf4:	827b      	strh	r3, [r7, #18]
 8007cf6:	e004      	b.n	8007d02 <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8007cf8:	8a7b      	ldrh	r3, [r7, #18]
 8007cfa:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007cfe:	827b      	strh	r3, [r7, #18]
 8007d00:	bf00      	nop
				}
				break;
 8007d02:	e008      	b.n	8007d16 <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8007d04:	89bb      	ldrh	r3, [r7, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d194      	bne.n	8007c34 <ff_wtoupper+0x24>
 8007d0a:	89fb      	ldrh	r3, [r7, #14]
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	4413      	add	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 8007d14:	e78e      	b.n	8007c34 <ff_wtoupper+0x24>
				break;
 8007d16:	bf00      	nop
		}
		uni = uc;
 8007d18:	8a7b      	ldrh	r3, [r7, #18]
 8007d1a:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8007d1c:	687b      	ldr	r3, [r7, #4]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	08008008 	.word	0x08008008
 8007d30:	080081fc 	.word	0x080081fc

08007d34 <memcmp>:
 8007d34:	b510      	push	{r4, lr}
 8007d36:	3901      	subs	r1, #1
 8007d38:	4402      	add	r2, r0
 8007d3a:	4290      	cmp	r0, r2
 8007d3c:	d101      	bne.n	8007d42 <memcmp+0xe>
 8007d3e:	2000      	movs	r0, #0
 8007d40:	e005      	b.n	8007d4e <memcmp+0x1a>
 8007d42:	7803      	ldrb	r3, [r0, #0]
 8007d44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	d001      	beq.n	8007d50 <memcmp+0x1c>
 8007d4c:	1b18      	subs	r0, r3, r4
 8007d4e:	bd10      	pop	{r4, pc}
 8007d50:	3001      	adds	r0, #1
 8007d52:	e7f2      	b.n	8007d3a <memcmp+0x6>

08007d54 <memset>:
 8007d54:	4402      	add	r2, r0
 8007d56:	4603      	mov	r3, r0
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d100      	bne.n	8007d5e <memset+0xa>
 8007d5c:	4770      	bx	lr
 8007d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d62:	e7f9      	b.n	8007d58 <memset+0x4>

08007d64 <strchr>:
 8007d64:	b2c9      	uxtb	r1, r1
 8007d66:	4603      	mov	r3, r0
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d6e:	b112      	cbz	r2, 8007d76 <strchr+0x12>
 8007d70:	428a      	cmp	r2, r1
 8007d72:	d1f9      	bne.n	8007d68 <strchr+0x4>
 8007d74:	4770      	bx	lr
 8007d76:	2900      	cmp	r1, #0
 8007d78:	bf18      	it	ne
 8007d7a:	2000      	movne	r0, #0
 8007d7c:	4770      	bx	lr
	...

08007d80 <__libc_init_array>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	4d0d      	ldr	r5, [pc, #52]	@ (8007db8 <__libc_init_array+0x38>)
 8007d84:	4c0d      	ldr	r4, [pc, #52]	@ (8007dbc <__libc_init_array+0x3c>)
 8007d86:	1b64      	subs	r4, r4, r5
 8007d88:	10a4      	asrs	r4, r4, #2
 8007d8a:	2600      	movs	r6, #0
 8007d8c:	42a6      	cmp	r6, r4
 8007d8e:	d109      	bne.n	8007da4 <__libc_init_array+0x24>
 8007d90:	4d0b      	ldr	r5, [pc, #44]	@ (8007dc0 <__libc_init_array+0x40>)
 8007d92:	4c0c      	ldr	r4, [pc, #48]	@ (8007dc4 <__libc_init_array+0x44>)
 8007d94:	f000 f826 	bl	8007de4 <_init>
 8007d98:	1b64      	subs	r4, r4, r5
 8007d9a:	10a4      	asrs	r4, r4, #2
 8007d9c:	2600      	movs	r6, #0
 8007d9e:	42a6      	cmp	r6, r4
 8007da0:	d105      	bne.n	8007dae <__libc_init_array+0x2e>
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da8:	4798      	blx	r3
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7ee      	b.n	8007d8c <__libc_init_array+0xc>
 8007dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007db2:	4798      	blx	r3
 8007db4:	3601      	adds	r6, #1
 8007db6:	e7f2      	b.n	8007d9e <__libc_init_array+0x1e>
 8007db8:	080082c0 	.word	0x080082c0
 8007dbc:	080082c0 	.word	0x080082c0
 8007dc0:	080082c0 	.word	0x080082c0
 8007dc4:	080082c4 	.word	0x080082c4

08007dc8 <memcpy>:
 8007dc8:	440a      	add	r2, r1
 8007dca:	4291      	cmp	r1, r2
 8007dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dd0:	d100      	bne.n	8007dd4 <memcpy+0xc>
 8007dd2:	4770      	bx	lr
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dde:	4291      	cmp	r1, r2
 8007de0:	d1f9      	bne.n	8007dd6 <memcpy+0xe>
 8007de2:	bd10      	pop	{r4, pc}

08007de4 <_init>:
 8007de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de6:	bf00      	nop
 8007de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dea:	bc08      	pop	{r3}
 8007dec:	469e      	mov	lr, r3
 8007dee:	4770      	bx	lr

08007df0 <_fini>:
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df2:	bf00      	nop
 8007df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df6:	bc08      	pop	{r3}
 8007df8:	469e      	mov	lr, r3
 8007dfa:	4770      	bx	lr
