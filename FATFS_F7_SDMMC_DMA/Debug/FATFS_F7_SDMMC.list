
FATFS_F7_SDMMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071fc  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  080073c4  080073c4  000083c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007878  08007878  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  08007878  08007878  00008878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007880  08007880  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007880  08007880  00008880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007884  08007884  00008884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007888  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020714  20000014  0800789c  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20020728  0800789c  00009728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d44c  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238b  00000000  00000000  00016490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00018820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e6  00000000  00000000  000193e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260d4  00000000  00000000  00019cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcb4  00000000  00000000  0003fda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9f0a  00000000  00000000  0004fa56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139960  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa4  00000000  00000000  001399a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0013c948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080073ac 	.word	0x080073ac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	080073ac 	.word	0x080073ac

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <BSP_SD_SDMMC_Init>:
 * @brief  Initializes the SD card device.
 * @retval SD status
 */
uint8_t
BSP_SD_SDMMC_Init (void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80004fe:	2300      	movs	r3, #0
 8000500:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_SDMMC_IsDetected() != SD_PRESENT)
 8000502:	f000 f896 	bl	8000632 <BSP_SD_SDMMC_IsDetected>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d001      	beq.n	8000510 <BSP_SD_SDMMC_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800050c:	2302      	movs	r3, #2
 800050e:	e00c      	b.n	800052a <BSP_SD_SDMMC_Init+0x32>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8000510:	4808      	ldr	r0, [pc, #32]	@ (8000534 <BSP_SD_SDMMC_Init+0x3c>)
 8000512:	f001 ff9d 	bl	8002450 <HAL_SD_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]

  /* Config 4 bit */
  sd_state = HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B);
 800051a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800051e:	4805      	ldr	r0, [pc, #20]	@ (8000534 <BSP_SD_SDMMC_Init+0x3c>)
 8000520:	f002 ff02 	bl	8003328 <HAL_SD_ConfigWideBusOperation>
 8000524:	4603      	mov	r3, r0
 8000526:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8000528:	79fb      	ldrb	r3, [r7, #7]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000030 	.word	0x20000030

08000538 <BSP_SD_SDMMC_ReadBlocks>:
uint8_t
BSP_SD_SDMMC_ReadBlocks (uint32_t *pData,
                         uint32_t  ReadAddr,
                         uint32_t  NumOfBlocks,
                         uint32_t  Timeout)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af02      	add	r7, sp, #8
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8000546:	2300      	movs	r3, #0
 8000548:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout)
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	68ba      	ldr	r2, [r7, #8]
 8000552:	68f9      	ldr	r1, [r7, #12]
 8000554:	4806      	ldr	r0, [pc, #24]	@ (8000570 <BSP_SD_SDMMC_ReadBlocks+0x38>)
 8000556:	f002 f833 	bl	80025c0 <HAL_SD_ReadBlocks>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <BSP_SD_SDMMC_ReadBlocks+0x2c>
      != HAL_OK)
  {
    sd_state = MSD_ERROR;
 8000560:	2301      	movs	r3, #1
 8000562:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8000564:	7dfb      	ldrb	r3, [r7, #23]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000030 	.word	0x20000030

08000574 <BSP_SD_SDMMC_WriteBlocks>:
uint8_t
BSP_SD_SDMMC_WriteBlocks (uint32_t *pData,
                          uint32_t  WriteAddr,
                          uint32_t  NumOfBlocks,
                          uint32_t  Timeout)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af02      	add	r7, sp, #8
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
 8000580:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	68f9      	ldr	r1, [r7, #12]
 8000590:	4806      	ldr	r0, [pc, #24]	@ (80005ac <BSP_SD_SDMMC_WriteBlocks+0x38>)
 8000592:	f002 f9f3 	bl	800297c <HAL_SD_WriteBlocks>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <BSP_SD_SDMMC_WriteBlocks+0x2c>
          &hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout)
      != HAL_OK)
  {
    sd_state = MSD_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80005a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000030 	.word	0x20000030

080005b0 <BSP_SD_SDMMC_GetCardInfo>:
 * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
 * @retval None
 */
__weak void
BSP_SD_SDMMC_GetCardInfo (HAL_SD_CardInfoTypeDef *CardInfo)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80005b8:	6879      	ldr	r1, [r7, #4]
 80005ba:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <BSP_SD_SDMMC_GetCardInfo+0x18>)
 80005bc:	f002 fe88 	bl	80032d0 <HAL_SD_GetCardInfo>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000030 	.word	0x20000030

080005cc <HAL_SD_AbortCallback>:
 * @param hsd: SD handle
 * @retval None
 */
void
HAL_SD_AbortCallback (SD_HandleTypeDef *hsd)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  BSP_SD_SDMMC_AbortCallback();
 80005d4:	f000 f818 	bl	8000608 <BSP_SD_SDMMC_AbortCallback>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <HAL_SD_TxCpltCallback>:
 * @param hsd: SD handle
 * @retval None
 */
void
HAL_SD_TxCpltCallback (SD_HandleTypeDef *hsd)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  BSP_SD_SDMMC_WriteCpltCallback();
 80005e8:	f000 f815 	bl	8000616 <BSP_SD_SDMMC_WriteCpltCallback>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <HAL_SD_RxCpltCallback>:
 * @param hsd: SD handle
 * @retval None
 */
void
HAL_SD_RxCpltCallback (SD_HandleTypeDef *hsd)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  BSP_SD_SDMMC_ReadCpltCallback();
 80005fc:	f000 f812 	bl	8000624 <BSP_SD_SDMMC_ReadCpltCallback>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <BSP_SD_SDMMC_AbortCallback>:
 * @retval None
 * @note empty (up to the user to fill it in or to remove it if useless)
 */
__weak void
BSP_SD_SDMMC_AbortCallback (void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <BSP_SD_SDMMC_WriteCpltCallback>:
 * @retval None
 * @note empty (up to the user to fill it in or to remove it if useless)
 */
__weak void
BSP_SD_SDMMC_WriteCpltCallback (void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <BSP_SD_SDMMC_ReadCpltCallback>:
 * @retval None
 * @note empty (up to the user to fill it in or to remove it if useless)
 */
__weak void
BSP_SD_SDMMC_ReadCpltCallback (void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <BSP_SD_SDMMC_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t
BSP_SD_SDMMC_IsDetected (void)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8000638:	2301      	movs	r3, #1
 800063a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	b2db      	uxtb	r3, r3
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <bufsize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int
bufsize (char *buf)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  int i = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  while (*buf++ != '\0')
 8000658:	e002      	b.n	8000660 <bufsize+0x14>
  {
    i++;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
  while (*buf++ != '\0')
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1f6      	bne.n	800065a <bufsize+0xe>
  }
  return i;
 800066c:	68fb      	ldr	r3, [r7, #12]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	memset(buffer, 0xFF, BUFFER_SIZE); // Fill buffer with data
 8000680:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000684:	21ff      	movs	r1, #255	@ 0xff
 8000686:	4820      	ldr	r0, [pc, #128]	@ (8000708 <main+0x8c>)
 8000688:	f006 fe48 	bl	800731c <memset>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800068c:	f000 f918 	bl	80008c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fa6f 	bl	8000b72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f84a 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f8d6 	bl	8000848 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800069c:	f000 f8b4 	bl	8000808 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */

  fr = f_mount(&SDFatFs_main, "", 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	491a      	ldr	r1, [pc, #104]	@ (800070c <main+0x90>)
 80006a4:	481a      	ldr	r0, [pc, #104]	@ (8000710 <main+0x94>)
 80006a6:	f006 f955 	bl	8006954 <f_mount>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <main+0x98>)
 80006b0:	701a      	strb	r2, [r3, #0]
  fr = f_open(&MyFile, "file3.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80006b2:	220a      	movs	r2, #10
 80006b4:	4918      	ldr	r1, [pc, #96]	@ (8000718 <main+0x9c>)
 80006b6:	4819      	ldr	r0, [pc, #100]	@ (800071c <main+0xa0>)
 80006b8:	f006 f996 	bl	80069e8 <f_open>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <main+0x98>)
 80006c2:	701a      	strb	r2, [r3, #0]

  /* Writing text */
  while (bytes_written < total_size)
 80006c4:	e014      	b.n	80006f0 <main+0x74>
  {
    fr = f_write(&MyFile, buffer, bufsize(buffer), &bw);
 80006c6:	4810      	ldr	r0, [pc, #64]	@ (8000708 <main+0x8c>)
 80006c8:	f7ff ffc0 	bl	800064c <bufsize>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <main+0xa4>)
 80006d2:	490d      	ldr	r1, [pc, #52]	@ (8000708 <main+0x8c>)
 80006d4:	4811      	ldr	r0, [pc, #68]	@ (800071c <main+0xa0>)
 80006d6:	f006 fb0f 	bl	8006cf8 <f_write>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <main+0x98>)
 80006e0:	701a      	strb	r2, [r3, #0]

    bytes_written += bw;
 80006e2:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <main+0xa8>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <main+0xa4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000724 <main+0xa8>)
 80006ee:	6013      	str	r3, [r2, #0]
  while (bytes_written < total_size)
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <main+0xa8>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <main+0xac>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d3e4      	bcc.n	80006c6 <main+0x4a>
  }
  f_close(&MyFile);
 80006fc:	4807      	ldr	r0, [pc, #28]	@ (800071c <main+0xa0>)
 80006fe:	f006 fce2 	bl	80070c6 <f_close>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000702:	bf00      	nop
 8000704:	e7fd      	b.n	8000702 <main+0x86>
 8000706:	bf00      	nop
 8000708:	20000514 	.word	0x20000514
 800070c:	080073c4 	.word	0x080073c4
 8000710:	200000b4 	.word	0x200000b4
 8000714:	20000000 	.word	0x20000000
 8000718:	080073c8 	.word	0x080073c8
 800071c:	200002ec 	.word	0x200002ec
 8000720:	20020514 	.word	0x20020514
 8000724:	20020518 	.word	0x20020518
 8000728:	20000004 	.word	0x20000004

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	@ 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	@ 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f006 fdee 	bl	800731c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	4b2b      	ldr	r3, [pc, #172]	@ (8000800 <SystemClock_Config+0xd4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	4a2a      	ldr	r2, [pc, #168]	@ (8000800 <SystemClock_Config+0xd4>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	@ 0x40
 800075c:	4b28      	ldr	r3, [pc, #160]	@ (8000800 <SystemClock_Config+0xd4>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <SystemClock_Config+0xd8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a25      	ldr	r2, [pc, #148]	@ (8000804 <SystemClock_Config+0xd8>)
 800076e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <SystemClock_Config+0xd8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000780:	2301      	movs	r3, #1
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000784:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000794:	2319      	movs	r3, #25
 8000796:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000798:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 800079c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007a2:	2309      	movs	r3, #9
 80007a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fe0a 	bl	80013c4 <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007b6:	f000 f8af 	bl	8000918 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ba:	f000 fdb3 	bl	8001324 <HAL_PWREx_EnableOverDrive>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007c4:	f000 f8a8 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	230f      	movs	r3, #15
 80007ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2302      	movs	r3, #2
 80007ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2107      	movs	r1, #7
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 f890 	bl	800190c <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007f2:	f000 f891 	bl	8000918 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	@ 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_SDMMC1_SD_Init+0x38>)
 800080e:	4a0d      	ldr	r2, [pc, #52]	@ (8000844 <MX_SDMMC1_SD_Init+0x3c>)
 8000810:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_SDMMC1_SD_Init+0x38>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_SDMMC1_SD_Init+0x38>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_SDMMC1_SD_Init+0x38>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_SDMMC1_SD_Init+0x38>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800082a:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <MX_SDMMC1_SD_Init+0x38>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000830:	4b03      	ldr	r3, [pc, #12]	@ (8000840 <MX_SDMMC1_SD_Init+0x38>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	20000030 	.word	0x20000030
 8000844:	40012c00 	.word	0x40012c00

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_GPIO_Init+0x74>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a1a      	ldr	r2, [pc, #104]	@ (80008bc <MX_GPIO_Init+0x74>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_GPIO_Init+0x74>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_GPIO_Init+0x74>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a14      	ldr	r2, [pc, #80]	@ (80008bc <MX_GPIO_Init+0x74>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_GPIO_Init+0x74>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_GPIO_Init+0x74>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a0e      	ldr	r2, [pc, #56]	@ (80008bc <MX_GPIO_Init+0x74>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_GPIO_Init+0x74>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_GPIO_Init+0x74>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a08      	ldr	r2, [pc, #32]	@ (80008bc <MX_GPIO_Init+0x74>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_GPIO_Init+0x74>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008d2:	f000 fae1 	bl	8000e98 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008d6:	2301      	movs	r3, #1
 80008d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008da:	2300      	movs	r3, #0
 80008dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008e2:	231f      	movs	r3, #31
 80008e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008e6:	2387      	movs	r3, #135	@ 0x87
 80008e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008ee:	2300      	movs	r3, #0
 80008f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008f2:	2301      	movs	r3, #1
 80008f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008f6:	2301      	movs	r3, #1
 80008f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000902:	463b      	mov	r3, r7
 8000904:	4618      	mov	r0, r3
 8000906:	f000 faff 	bl	8000f08 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800090a:	2004      	movs	r0, #4
 800090c:	f000 fadc 	bl	8000ec8 <HAL_MPU_Enable>

}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <HAL_MspInit+0x44>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_MspInit+0x44>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	@ 0x40
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <HAL_MspInit+0x44>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_MspInit+0x44>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <HAL_MspInit+0x44>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094c:	6453      	str	r3, [r2, #68]	@ 0x44
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_MspInit+0x44>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0ac      	sub	sp, #176	@ 0xb0
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	2284      	movs	r2, #132	@ 0x84
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f006 fcc5 	bl	800731c <memset>
  if(hsd->Instance==SDMMC1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a38      	ldr	r2, [pc, #224]	@ (8000a78 <HAL_SD_MspInit+0x10c>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d169      	bne.n	8000a70 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800099c:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 80009a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 f95c 	bl	8001c70 <HAL_RCCEx_PeriphCLKConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80009be:	f7ff ffab 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80009c2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a7c <HAL_SD_MspInit+0x110>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	4a2d      	ldr	r2, [pc, #180]	@ (8000a7c <HAL_SD_MspInit+0x110>)
 80009c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ce:	4b2b      	ldr	r3, [pc, #172]	@ (8000a7c <HAL_SD_MspInit+0x110>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b28      	ldr	r3, [pc, #160]	@ (8000a7c <HAL_SD_MspInit+0x110>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a27      	ldr	r2, [pc, #156]	@ (8000a7c <HAL_SD_MspInit+0x110>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <HAL_SD_MspInit+0x110>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	4b22      	ldr	r3, [pc, #136]	@ (8000a7c <HAL_SD_MspInit+0x110>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a21      	ldr	r2, [pc, #132]	@ (8000a7c <HAL_SD_MspInit+0x110>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <HAL_SD_MspInit+0x110>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000a0a:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a24:	230c      	movs	r3, #12
 8000a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4813      	ldr	r0, [pc, #76]	@ (8000a80 <HAL_SD_MspInit+0x114>)
 8000a32:	f000 facb 	bl	8000fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a36:	2304      	movs	r3, #4
 8000a38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a4e:	230c      	movs	r3, #12
 8000a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a54:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480a      	ldr	r0, [pc, #40]	@ (8000a84 <HAL_SD_MspInit+0x118>)
 8000a5c:	f000 fab6 	bl	8000fcc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2031      	movs	r0, #49	@ 0x31
 8000a66:	f000 f9e0 	bl	8000e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000a6a:	2031      	movs	r0, #49	@ 0x31
 8000a6c:	f000 f9f9 	bl	8000e62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8000a70:	bf00      	nop
 8000a72:	37b0      	adds	r7, #176	@ 0xb0
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40012c00 	.word	0x40012c00
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020800 	.word	0x40020800
 8000a84:	40020c00 	.word	0x40020c00

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <MemManage_Handler+0x4>

08000aa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <UsageFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ade:	f000 f885 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000aec:	4802      	ldr	r0, [pc, #8]	@ (8000af8 <SDMMC1_IRQHandler+0x10>)
 8000aee:	f002 f8cb 	bl	8002c88 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000030 	.word	0x20000030

08000afc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <SystemInit+0x20>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b06:	4a05      	ldr	r2, [pc, #20]	@ (8000b1c <SystemInit+0x20>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b24:	f7ff ffea 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b28:	480c      	ldr	r0, [pc, #48]	@ (8000b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b2a:	490d      	ldr	r1, [pc, #52]	@ (8000b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b40:	4c0a      	ldr	r4, [pc, #40]	@ (8000b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f006 fbfb 	bl	8007348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b52:	f7ff fd93 	bl	800067c <main>
  bx  lr    
 8000b56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b58:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b60:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b64:	08007888 	.word	0x08007888
  ldr r2, =_sbss
 8000b68:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b6c:	20020728 	.word	0x20020728

08000b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC_IRQHandler>

08000b72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b76:	2003      	movs	r0, #3
 8000b78:	f000 f94c 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7c:	200f      	movs	r0, #15
 8000b7e:	f000 f805 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b82:	f7ff fecf 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f967 	bl	8000e7e <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f000 f92f 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	@ (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000010 	.word	0x20000010
 8000be8:	2000000c 	.word	0x2000000c

08000bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000010 	.word	0x20000010
 8000c10:	2002051c 	.word	0x2002051c

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2002051c 	.word	0x2002051c

08000c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c34:	f7ff ffee 	bl	8000c14 <HAL_GetTick>
 8000c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	d005      	beq.n	8000c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c46:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <HAL_Delay+0x44>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c52:	bf00      	nop
 8000c54:	f7ff ffde 	bl	8000c14 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d8f7      	bhi.n	8000c54 <HAL_Delay+0x28>
  {
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000010 	.word	0x20000010

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00
 8000cb8:	05fa0000 	.word	0x05fa0000

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4907      	ldr	r1, [pc, #28]	@ (8000d10 <__NVIC_EnableIRQ+0x38>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	@ (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	@ (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	@ 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	@ 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f7ff ff8e 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff29 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff3e 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff8e 	bl	8000d68 <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff31 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffa2 	bl	8000dd0 <SysTick_Config>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e9c:	f3bf 8f5f 	dmb	sy
}
 8000ea0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <HAL_MPU_Disable+0x28>)
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	4a06      	ldr	r2, [pc, #24]	@ (8000ec0 <HAL_MPU_Disable+0x28>)
 8000ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eac:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000eae:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <HAL_MPU_Disable+0x2c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	605a      	str	r2, [r3, #4]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00
 8000ec4:	e000ed90 	.word	0xe000ed90

08000ec8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f00 <HAL_MPU_Enable+0x38>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <HAL_MPU_Enable+0x3c>)
 8000edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ede:	4a09      	ldr	r2, [pc, #36]	@ (8000f04 <HAL_MPU_Enable+0x3c>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee6:	f3bf 8f4f 	dsb	sy
}
 8000eea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eec:	f3bf 8f6f 	isb	sy
}
 8000ef0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed90 	.word	0xe000ed90
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	785a      	ldrb	r2, [r3, #1]
 8000f14:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <HAL_MPU_ConfigRegion+0x7c>)
 8000f16:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <HAL_MPU_ConfigRegion+0x7c>)
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	@ (8000f84 <HAL_MPU_ConfigRegion+0x7c>)
 8000f1e:	f023 0301 	bic.w	r3, r3, #1
 8000f22:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000f24:	4a17      	ldr	r2, [pc, #92]	@ (8000f84 <HAL_MPU_ConfigRegion+0x7c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7b1b      	ldrb	r3, [r3, #12]
 8000f30:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7adb      	ldrb	r3, [r3, #11]
 8000f36:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7a9b      	ldrb	r3, [r3, #10]
 8000f3e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	7b5b      	ldrb	r3, [r3, #13]
 8000f46:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	7b9b      	ldrb	r3, [r3, #14]
 8000f4e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7bdb      	ldrb	r3, [r3, #15]
 8000f56:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7a5b      	ldrb	r3, [r3, #9]
 8000f5e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7a1b      	ldrb	r3, [r3, #8]
 8000f66:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f68:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f72:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f74:	6113      	str	r3, [r2, #16]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed90 	.word	0xe000ed90

08000f88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d004      	beq.n	8000fa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2280      	movs	r2, #128	@ 0x80
 8000fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00c      	b.n	8000fc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2205      	movs	r2, #5
 8000faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0201 	bic.w	r2, r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e175      	b.n	80012d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 8164 	bne.w	80012d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_GPIO_Init+0x56>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d130      	bne.n	8001084 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	f003 0201 	and.w	r2, r3, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b03      	cmp	r3, #3
 800108e:	d017      	beq.n	80010c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80be 	beq.w	80012d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b66      	ldr	r3, [pc, #408]	@ (80012f0 <HAL_GPIO_Init+0x324>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	4a65      	ldr	r2, [pc, #404]	@ (80012f0 <HAL_GPIO_Init+0x324>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001160:	6453      	str	r3, [r2, #68]	@ 0x44
 8001162:	4b63      	ldr	r3, [pc, #396]	@ (80012f0 <HAL_GPIO_Init+0x324>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800116e:	4a61      	ldr	r2, [pc, #388]	@ (80012f4 <HAL_GPIO_Init+0x328>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a58      	ldr	r2, [pc, #352]	@ (80012f8 <HAL_GPIO_Init+0x32c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d037      	beq.n	800120a <HAL_GPIO_Init+0x23e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a57      	ldr	r2, [pc, #348]	@ (80012fc <HAL_GPIO_Init+0x330>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d031      	beq.n	8001206 <HAL_GPIO_Init+0x23a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a56      	ldr	r2, [pc, #344]	@ (8001300 <HAL_GPIO_Init+0x334>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d02b      	beq.n	8001202 <HAL_GPIO_Init+0x236>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a55      	ldr	r2, [pc, #340]	@ (8001304 <HAL_GPIO_Init+0x338>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d025      	beq.n	80011fe <HAL_GPIO_Init+0x232>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a54      	ldr	r2, [pc, #336]	@ (8001308 <HAL_GPIO_Init+0x33c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01f      	beq.n	80011fa <HAL_GPIO_Init+0x22e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a53      	ldr	r2, [pc, #332]	@ (800130c <HAL_GPIO_Init+0x340>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0x22a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a52      	ldr	r2, [pc, #328]	@ (8001310 <HAL_GPIO_Init+0x344>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x226>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a51      	ldr	r2, [pc, #324]	@ (8001314 <HAL_GPIO_Init+0x348>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x222>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a50      	ldr	r2, [pc, #320]	@ (8001318 <HAL_GPIO_Init+0x34c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x21e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	@ (800131c <HAL_GPIO_Init+0x350>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x21a>
 80011e2:	2309      	movs	r3, #9
 80011e4:	e012      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011e6:	230a      	movs	r3, #10
 80011e8:	e010      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011ea:	2308      	movs	r3, #8
 80011ec:	e00e      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011ee:	2307      	movs	r3, #7
 80011f0:	e00c      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011f2:	2306      	movs	r3, #6
 80011f4:	e00a      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011f6:	2305      	movs	r3, #5
 80011f8:	e008      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x240>
 80011fe:	2303      	movs	r3, #3
 8001200:	e004      	b.n	800120c <HAL_GPIO_Init+0x240>
 8001202:	2302      	movs	r3, #2
 8001204:	e002      	b.n	800120c <HAL_GPIO_Init+0x240>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x240>
 800120a:	2300      	movs	r3, #0
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	f002 0203 	and.w	r2, r2, #3
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	4093      	lsls	r3, r2
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800121c:	4935      	ldr	r1, [pc, #212]	@ (80012f4 <HAL_GPIO_Init+0x328>)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <HAL_GPIO_Init+0x354>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124e:	4a34      	ldr	r2, [pc, #208]	@ (8001320 <HAL_GPIO_Init+0x354>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001254:	4b32      	ldr	r3, [pc, #200]	@ (8001320 <HAL_GPIO_Init+0x354>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001278:	4a29      	ldr	r2, [pc, #164]	@ (8001320 <HAL_GPIO_Init+0x354>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800127e:	4b28      	ldr	r3, [pc, #160]	@ (8001320 <HAL_GPIO_Init+0x354>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001320 <HAL_GPIO_Init+0x354>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <HAL_GPIO_Init+0x354>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012cc:	4a14      	ldr	r2, [pc, #80]	@ (8001320 <HAL_GPIO_Init+0x354>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3301      	adds	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	2b0f      	cmp	r3, #15
 80012dc:	f67f ae86 	bls.w	8000fec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3724      	adds	r7, #36	@ 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40013800 	.word	0x40013800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020800 	.word	0x40020800
 8001304:	40020c00 	.word	0x40020c00
 8001308:	40021000 	.word	0x40021000
 800130c:	40021400 	.word	0x40021400
 8001310:	40021800 	.word	0x40021800
 8001314:	40021c00 	.word	0x40021c00
 8001318:	40022000 	.word	0x40022000
 800131c:	40022400 	.word	0x40022400
 8001320:	40013c00 	.word	0x40013c00

08001324 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	4a22      	ldr	r2, [pc, #136]	@ (80013bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	@ 0x40
 800133a:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <HAL_PWREx_EnableOverDrive+0x98>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001346:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001350:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001352:	f7ff fc5f 	bl	8000c14 <HAL_GetTick>
 8001356:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001358:	e009      	b.n	800136e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800135a:	f7ff fc5b 	bl	8000c14 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001368:	d901      	bls.n	800136e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e022      	b.n	80013b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800136e:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800137a:	d1ee      	bne.n	800135a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001386:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001388:	f7ff fc44 	bl	8000c14 <HAL_GetTick>
 800138c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800138e:	e009      	b.n	80013a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001390:	f7ff fc40 	bl	8000c14 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800139e:	d901      	bls.n	80013a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e007      	b.n	80013b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80013b0:	d1ee      	bne.n	8001390 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40007000 	.word	0x40007000

080013c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e291      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8087 	beq.w	80014f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e8:	4b96      	ldr	r3, [pc, #600]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 030c 	and.w	r3, r3, #12
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d00c      	beq.n	800140e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f4:	4b93      	ldr	r3, [pc, #588]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d112      	bne.n	8001426 <HAL_RCC_OscConfig+0x62>
 8001400:	4b90      	ldr	r3, [pc, #576]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800140c:	d10b      	bne.n	8001426 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140e:	4b8d      	ldr	r3, [pc, #564]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d06c      	beq.n	80014f4 <HAL_RCC_OscConfig+0x130>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d168      	bne.n	80014f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e26b      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x7a>
 8001430:	4b84      	ldr	r3, [pc, #528]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a83      	ldr	r2, [pc, #524]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	e02e      	b.n	800149c <HAL_RCC_OscConfig+0xd8>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x9c>
 8001446:	4b7f      	ldr	r3, [pc, #508]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a7e      	ldr	r2, [pc, #504]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 800144c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b7c      	ldr	r3, [pc, #496]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a7b      	ldr	r2, [pc, #492]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001458:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e01d      	b.n	800149c <HAL_RCC_OscConfig+0xd8>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0xc0>
 800146a:	4b76      	ldr	r3, [pc, #472]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a75      	ldr	r2, [pc, #468]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b73      	ldr	r3, [pc, #460]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a72      	ldr	r2, [pc, #456]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0xd8>
 8001484:	4b6f      	ldr	r3, [pc, #444]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a6e      	ldr	r2, [pc, #440]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 800148a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b6c      	ldr	r3, [pc, #432]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a6b      	ldr	r2, [pc, #428]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800149a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fbb6 	bl	8000c14 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fbb2 	bl	8000c14 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	@ 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e21f      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b61      	ldr	r3, [pc, #388]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0xe8>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fba2 	bl	8000c14 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fb9e 	bl	8000c14 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	@ 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e20b      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e6:	4b57      	ldr	r3, [pc, #348]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x110>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d069      	beq.n	80015d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001502:	4b50      	ldr	r3, [pc, #320]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00b      	beq.n	8001526 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150e:	4b4d      	ldr	r3, [pc, #308]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b08      	cmp	r3, #8
 8001518:	d11c      	bne.n	8001554 <HAL_RCC_OscConfig+0x190>
 800151a:	4b4a      	ldr	r3, [pc, #296]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d116      	bne.n	8001554 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	4b47      	ldr	r3, [pc, #284]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <HAL_RCC_OscConfig+0x17a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e1df      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153e:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	493d      	ldr	r1, [pc, #244]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	e040      	b.n	80015d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d023      	beq.n	80015a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800155c:	4b39      	ldr	r3, [pc, #228]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a38      	ldr	r2, [pc, #224]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fb54 	bl	8000c14 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001570:	f7ff fb50 	bl	8000c14 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1bd      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001582:	4b30      	ldr	r3, [pc, #192]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158e:	4b2d      	ldr	r3, [pc, #180]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4929      	ldr	r1, [pc, #164]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
 80015a2:	e018      	b.n	80015d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a4:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a26      	ldr	r2, [pc, #152]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fb30 	bl	8000c14 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fb2c 	bl	8000c14 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e199      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d038      	beq.n	8001654 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d019      	beq.n	800161e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ea:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 80015ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ee:	4a15      	ldr	r2, [pc, #84]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7ff fb0d 	bl	8000c14 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fe:	f7ff fb09 	bl	8000c14 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e176      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x23a>
 800161c:	e01a      	b.n	8001654 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001622:	4a08      	ldr	r2, [pc, #32]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162a:	f7ff faf3 	bl	8000c14 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001632:	f7ff faef 	bl	8000c14 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d903      	bls.n	8001648 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e15c      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
 8001644:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	4b91      	ldr	r3, [pc, #580]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 800164a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1ee      	bne.n	8001632 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a4 	beq.w	80017aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001662:	4b8b      	ldr	r3, [pc, #556]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10d      	bne.n	800168a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b88      	ldr	r3, [pc, #544]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	4a87      	ldr	r2, [pc, #540]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	@ 0x40
 800167a:	4b85      	ldr	r3, [pc, #532]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001686:	2301      	movs	r3, #1
 8001688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168a:	4b82      	ldr	r3, [pc, #520]	@ (8001894 <HAL_RCC_OscConfig+0x4d0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d118      	bne.n	80016c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001696:	4b7f      	ldr	r3, [pc, #508]	@ (8001894 <HAL_RCC_OscConfig+0x4d0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a7e      	ldr	r2, [pc, #504]	@ (8001894 <HAL_RCC_OscConfig+0x4d0>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a2:	f7ff fab7 	bl	8000c14 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016aa:	f7ff fab3 	bl	8000c14 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b64      	cmp	r3, #100	@ 0x64
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e120      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016bc:	4b75      	ldr	r3, [pc, #468]	@ (8001894 <HAL_RCC_OscConfig+0x4d0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x31a>
 80016d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d4:	4a6e      	ldr	r2, [pc, #440]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6713      	str	r3, [r2, #112]	@ 0x70
 80016dc:	e02d      	b.n	800173a <HAL_RCC_OscConfig+0x376>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x33c>
 80016e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ea:	4a69      	ldr	r2, [pc, #420]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f2:	4b67      	ldr	r3, [pc, #412]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f6:	4a66      	ldr	r2, [pc, #408]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 80016f8:	f023 0304 	bic.w	r3, r3, #4
 80016fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016fe:	e01c      	b.n	800173a <HAL_RCC_OscConfig+0x376>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b05      	cmp	r3, #5
 8001706:	d10c      	bne.n	8001722 <HAL_RCC_OscConfig+0x35e>
 8001708:	4b61      	ldr	r3, [pc, #388]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170c:	4a60      	ldr	r2, [pc, #384]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6713      	str	r3, [r2, #112]	@ 0x70
 8001714:	4b5e      	ldr	r3, [pc, #376]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001718:	4a5d      	ldr	r2, [pc, #372]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001720:	e00b      	b.n	800173a <HAL_RCC_OscConfig+0x376>
 8001722:	4b5b      	ldr	r3, [pc, #364]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001726:	4a5a      	ldr	r2, [pc, #360]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001728:	f023 0301 	bic.w	r3, r3, #1
 800172c:	6713      	str	r3, [r2, #112]	@ 0x70
 800172e:	4b58      	ldr	r3, [pc, #352]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001732:	4a57      	ldr	r2, [pc, #348]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001734:	f023 0304 	bic.w	r3, r3, #4
 8001738:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d015      	beq.n	800176e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001742:	f7ff fa67 	bl	8000c14 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fa63 	bl	8000c14 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e0ce      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	4b4b      	ldr	r3, [pc, #300]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0ee      	beq.n	800174a <HAL_RCC_OscConfig+0x386>
 800176c:	e014      	b.n	8001798 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176e:	f7ff fa51 	bl	8000c14 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001774:	e00a      	b.n	800178c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff fa4d 	bl	8000c14 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e0b8      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178c:	4b40      	ldr	r3, [pc, #256]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1ee      	bne.n	8001776 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d105      	bne.n	80017aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179e:	4b3c      	ldr	r3, [pc, #240]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 80017a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 80a4 	beq.w	80018fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b4:	4b36      	ldr	r3, [pc, #216]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d06b      	beq.n	8001898 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d149      	bne.n	800185c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c8:	4b31      	ldr	r3, [pc, #196]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a30      	ldr	r2, [pc, #192]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 80017ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fa1e 	bl	8000c14 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff fa1a 	bl	8000c14 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e087      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	4b28      	ldr	r3, [pc, #160]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001808:	019b      	lsls	r3, r3, #6
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	3b01      	subs	r3, #1
 8001814:	041b      	lsls	r3, r3, #16
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	4313      	orrs	r3, r2
 8001820:	4a1b      	ldr	r2, [pc, #108]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001822:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001826:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a18      	ldr	r2, [pc, #96]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 800182e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff f9ee 	bl	8000c14 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f9ea 	bl	8000c14 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e057      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x478>
 800185a:	e04f      	b.n	80018fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0b      	ldr	r2, [pc, #44]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001862:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff f9d4 	bl	8000c14 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff f9d0 	bl	8000c14 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e03d      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x4ac>
 800188e:	e035      	b.n	80018fc <HAL_RCC_OscConfig+0x538>
 8001890:	40023800 	.word	0x40023800
 8001894:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_RCC_OscConfig+0x544>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d028      	beq.n	80018f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d121      	bne.n	80018f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d11a      	bne.n	80018f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d111      	bne.n	80018f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	3b01      	subs	r3, #1
 80018e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d107      	bne.n	80018f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0d0      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d910      	bls.n	8001954 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b67      	ldr	r3, [pc, #412]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 020f 	bic.w	r2, r3, #15
 800193a:	4965      	ldr	r1, [pc, #404]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b63      	ldr	r3, [pc, #396]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0b8      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800196c:	4b59      	ldr	r3, [pc, #356]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a58      	ldr	r2, [pc, #352]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001972:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001976:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001984:	4b53      	ldr	r3, [pc, #332]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a52      	ldr	r2, [pc, #328]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 800198a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800198e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b50      	ldr	r3, [pc, #320]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	494d      	ldr	r1, [pc, #308]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d040      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b47      	ldr	r3, [pc, #284]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d115      	bne.n	80019ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e07f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ce:	4b41      	ldr	r3, [pc, #260]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e073      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019de:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e06b      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ee:	4b39      	ldr	r3, [pc, #228]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f023 0203 	bic.w	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4936      	ldr	r1, [pc, #216]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a00:	f7ff f908 	bl	8000c14 <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a08:	f7ff f904 	bl	8000c14 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e053      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 020c 	and.w	r2, r3, #12
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d1eb      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a30:	4b27      	ldr	r3, [pc, #156]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d210      	bcs.n	8001a60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b24      	ldr	r3, [pc, #144]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 020f 	bic.w	r2, r3, #15
 8001a46:	4922      	ldr	r1, [pc, #136]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e032      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4916      	ldr	r1, [pc, #88]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	490e      	ldr	r1, [pc, #56]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a9e:	f000 f821 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	490a      	ldr	r1, [pc, #40]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ab0:	5ccb      	ldrb	r3, [r1, r3]
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	4a09      	ldr	r2, [pc, #36]	@ (8001adc <HAL_RCC_ClockConfig+0x1d0>)
 8001ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1d4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f864 	bl	8000b8c <HAL_InitTick>

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08007428 	.word	0x08007428
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	2000000c 	.word	0x2000000c

08001ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae8:	b090      	sub	sp, #64	@ 0x40
 8001aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8001af0:	2300      	movs	r3, #0
 8001af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001af4:	2300      	movs	r3, #0
 8001af6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001afc:	4b59      	ldr	r3, [pc, #356]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d00d      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x40>
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	f200 80a1 	bhi.w	8001c50 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x34>
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b16:	e09b      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b53      	ldr	r3, [pc, #332]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b1c:	e09b      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b1e:	4b53      	ldr	r3, [pc, #332]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b22:	e098      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b24:	4b4f      	ldr	r3, [pc, #316]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b2e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d028      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	099b      	lsrs	r3, r3, #6
 8001b40:	2200      	movs	r2, #0
 8001b42:	623b      	str	r3, [r7, #32]
 8001b44:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4b47      	ldr	r3, [pc, #284]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b50:	fb03 f201 	mul.w	r2, r3, r1
 8001b54:	2300      	movs	r3, #0
 8001b56:	fb00 f303 	mul.w	r3, r0, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a43      	ldr	r2, [pc, #268]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b5e:	fba0 1202 	umull	r1, r2, r0, r2
 8001b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b64:	460a      	mov	r2, r1
 8001b66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b6a:	4413      	add	r3, r2
 8001b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b70:	2200      	movs	r2, #0
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	61fa      	str	r2, [r7, #28]
 8001b76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b7e:	f7fe fb43 	bl	8000208 <__aeabi_uldivmod>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4613      	mov	r3, r2
 8001b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b8a:	e053      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8c:	4b35      	ldr	r3, [pc, #212]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	099b      	lsrs	r3, r3, #6
 8001b92:	2200      	movs	r2, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	617a      	str	r2, [r7, #20]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b9e:	f04f 0b00 	mov.w	fp, #0
 8001ba2:	4652      	mov	r2, sl
 8001ba4:	465b      	mov	r3, fp
 8001ba6:	f04f 0000 	mov.w	r0, #0
 8001baa:	f04f 0100 	mov.w	r1, #0
 8001bae:	0159      	lsls	r1, r3, #5
 8001bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb4:	0150      	lsls	r0, r2, #5
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	ebb2 080a 	subs.w	r8, r2, sl
 8001bbe:	eb63 090b 	sbc.w	r9, r3, fp
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bd6:	ebb2 0408 	subs.w	r4, r2, r8
 8001bda:	eb63 0509 	sbc.w	r5, r3, r9
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	00eb      	lsls	r3, r5, #3
 8001be8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bec:	00e2      	lsls	r2, r4, #3
 8001bee:	4614      	mov	r4, r2
 8001bf0:	461d      	mov	r5, r3
 8001bf2:	eb14 030a 	adds.w	r3, r4, sl
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	eb45 030b 	adc.w	r3, r5, fp
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	028b      	lsls	r3, r1, #10
 8001c0e:	4621      	mov	r1, r4
 8001c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c14:	4621      	mov	r1, r4
 8001c16:	028a      	lsls	r2, r1, #10
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	60fa      	str	r2, [r7, #12]
 8001c24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c28:	f7fe faee 	bl	8000208 <__aeabi_uldivmod>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4613      	mov	r3, r2
 8001c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	0c1b      	lsrs	r3, r3, #16
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c4e:	e002      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3740      	adds	r7, #64	@ 0x40
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	00f42400 	.word	0x00f42400
 8001c6c:	017d7840 	.word	0x017d7840

08001c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d012      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c98:	4b69      	ldr	r3, [pc, #420]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a68      	ldr	r2, [pc, #416]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001ca2:	6093      	str	r3, [r2, #8]
 8001ca4:	4b66      	ldr	r3, [pc, #408]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cac:	4964      	ldr	r1, [pc, #400]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d017      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cca:	4b5d      	ldr	r3, [pc, #372]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cd0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd8:	4959      	ldr	r1, [pc, #356]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ce8:	d101      	bne.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d017      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d06:	4b4e      	ldr	r3, [pc, #312]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d0c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	494a      	ldr	r1, [pc, #296]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d24:	d101      	bne.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 808b 	beq.w	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d54:	4b3a      	ldr	r3, [pc, #232]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	4a39      	ldr	r2, [pc, #228]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d60:	4b37      	ldr	r3, [pc, #220]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d6c:	4b35      	ldr	r3, [pc, #212]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a34      	ldr	r2, [pc, #208]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d78:	f7fe ff4c 	bl	8000c14 <HAL_GetTick>
 8001d7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d80:	f7fe ff48 	bl	8000c14 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	@ 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e357      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d92:	4b2c      	ldr	r3, [pc, #176]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d9e:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001da6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d035      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d02e      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dbc:	4b20      	ldr	r3, [pc, #128]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dc4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dca:	4a1d      	ldr	r2, [pc, #116]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ddc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001dde:	4a18      	ldr	r2, [pc, #96]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001de4:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d114      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7fe ff10 	bl	8000c14 <HAL_GetTick>
 8001df4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df6:	e00a      	b.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7fe ff0c 	bl	8000c14 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e319      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0ee      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e26:	d111      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e34:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e36:	400b      	ands	r3, r1
 8001e38:	4901      	ldr	r1, [pc, #4]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40007000 	.word	0x40007000
 8001e48:	0ffffcff 	.word	0x0ffffcff
 8001e4c:	4baa      	ldr	r3, [pc, #680]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4aa9      	ldr	r2, [pc, #676]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e52:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e56:	6093      	str	r3, [r2, #8]
 8001e58:	4ba7      	ldr	r3, [pc, #668]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e64:	49a4      	ldr	r1, [pc, #656]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d010      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e76:	4ba0      	ldr	r3, [pc, #640]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e7c:	4a9e      	ldr	r2, [pc, #632]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e86:	4b9c      	ldr	r3, [pc, #624]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e88:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e90:	4999      	ldr	r1, [pc, #612]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ea4:	4b94      	ldr	r3, [pc, #592]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eaa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eb2:	4991      	ldr	r1, [pc, #580]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ec6:	4b8c      	ldr	r3, [pc, #560]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ecc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ed4:	4988      	ldr	r1, [pc, #544]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ee8:	4b83      	ldr	r3, [pc, #524]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ef6:	4980      	ldr	r1, [pc, #512]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f0a:	4b7b      	ldr	r3, [pc, #492]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f18:	4977      	ldr	r1, [pc, #476]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f2c:	4b72      	ldr	r3, [pc, #456]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f32:	f023 0203 	bic.w	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3a:	496f      	ldr	r1, [pc, #444]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f4e:	4b6a      	ldr	r3, [pc, #424]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f54:	f023 020c 	bic.w	r2, r3, #12
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f5c:	4966      	ldr	r1, [pc, #408]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f70:	4b61      	ldr	r3, [pc, #388]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f76:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7e:	495e      	ldr	r1, [pc, #376]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f92:	4b59      	ldr	r3, [pc, #356]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f98:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa0:	4955      	ldr	r1, [pc, #340]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fb4:	4b50      	ldr	r3, [pc, #320]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc2:	494d      	ldr	r1, [pc, #308]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001fd6:	4b48      	ldr	r3, [pc, #288]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fdc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe4:	4944      	ldr	r1, [pc, #272]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002006:	493c      	ldr	r1, [pc, #240]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800201a:	4b37      	ldr	r3, [pc, #220]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002020:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002028:	4933      	ldr	r1, [pc, #204]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800203c:	4b2e      	ldr	r3, [pc, #184]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002042:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800204a:	492b      	ldr	r1, [pc, #172]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d011      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800205e:	4b26      	ldr	r3, [pc, #152]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002064:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800206c:	4922      	ldr	r1, [pc, #136]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002078:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800207c:	d101      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800208e:	2301      	movs	r3, #1
 8002090:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800209e:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ac:	4912      	ldr	r1, [pc, #72]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00b      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020c0:	4b0d      	ldr	r3, [pc, #52]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020d0:	4909      	ldr	r1, [pc, #36]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d006      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80d9 	beq.w	800229e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020ec:	4b02      	ldr	r3, [pc, #8]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a01      	ldr	r2, [pc, #4]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80020f6:	e001      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80020f8:	40023800 	.word	0x40023800
 80020fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020fe:	f7fe fd89 	bl	8000c14 <HAL_GetTick>
 8002102:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002106:	f7fe fd85 	bl	8000c14 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	@ 0x64
 8002112:	d901      	bls.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e194      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002118:	4b6c      	ldr	r3, [pc, #432]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d021      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002134:	2b00      	cmp	r3, #0
 8002136:	d11d      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002138:	4b64      	ldr	r3, [pc, #400]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800213a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800213e:	0c1b      	lsrs	r3, r3, #16
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002146:	4b61      	ldr	r3, [pc, #388]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800214c:	0e1b      	lsrs	r3, r3, #24
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	019a      	lsls	r2, r3, #6
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	061b      	lsls	r3, r3, #24
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	071b      	lsls	r3, r3, #28
 800216c:	4957      	ldr	r1, [pc, #348]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002184:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002192:	2b00      	cmp	r3, #0
 8002194:	d02e      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800219e:	d129      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021a0:	4b4a      	ldr	r3, [pc, #296]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021a6:	0c1b      	lsrs	r3, r3, #16
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021ae:	4b47      	ldr	r3, [pc, #284]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021b4:	0f1b      	lsrs	r3, r3, #28
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	019a      	lsls	r2, r3, #6
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	061b      	lsls	r3, r3, #24
 80021ce:	431a      	orrs	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	071b      	lsls	r3, r3, #28
 80021d4:	493d      	ldr	r1, [pc, #244]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021dc:	4b3b      	ldr	r3, [pc, #236]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021e2:	f023 021f 	bic.w	r2, r3, #31
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	3b01      	subs	r3, #1
 80021ec:	4937      	ldr	r1, [pc, #220]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01d      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002200:	4b32      	ldr	r3, [pc, #200]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002206:	0e1b      	lsrs	r3, r3, #24
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800220e:	4b2f      	ldr	r3, [pc, #188]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002214:	0f1b      	lsrs	r3, r3, #28
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	019a      	lsls	r2, r3, #6
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	041b      	lsls	r3, r3, #16
 8002228:	431a      	orrs	r2, r3
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	431a      	orrs	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	071b      	lsls	r3, r3, #28
 8002234:	4925      	ldr	r1, [pc, #148]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d011      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	019a      	lsls	r2, r3, #6
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	061b      	lsls	r3, r3, #24
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	071b      	lsls	r3, r3, #28
 8002264:	4919      	ldr	r1, [pc, #100]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800226c:	4b17      	ldr	r3, [pc, #92]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a16      	ldr	r2, [pc, #88]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002272:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002278:	f7fe fccc 	bl	8000c14 <HAL_GetTick>
 800227c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002280:	f7fe fcc8 	bl	8000c14 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	@ 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0d7      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002292:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	f040 80cd 	bne.w	8002440 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a08      	ldr	r2, [pc, #32]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b2:	f7fe fcaf 	bl	8000c14 <HAL_GetTick>
 80022b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022ba:	f7fe fcab 	bl	8000c14 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b64      	cmp	r3, #100	@ 0x64
 80022c6:	d903      	bls.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0ba      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80022cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022d0:	4b5e      	ldr	r3, [pc, #376]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022dc:	d0ed      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d02e      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d12a      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002306:	4b51      	ldr	r3, [pc, #324]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002314:	4b4d      	ldr	r3, [pc, #308]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231a:	0f1b      	lsrs	r3, r3, #28
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	019a      	lsls	r2, r3, #6
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	061b      	lsls	r3, r3, #24
 8002334:	431a      	orrs	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	071b      	lsls	r3, r3, #28
 800233a:	4944      	ldr	r1, [pc, #272]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002342:	4b42      	ldr	r3, [pc, #264]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002348:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	3b01      	subs	r3, #1
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	493d      	ldr	r1, [pc, #244]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d022      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800236c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002370:	d11d      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002372:	4b36      	ldr	r3, [pc, #216]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002378:	0e1b      	lsrs	r3, r3, #24
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002380:	4b32      	ldr	r3, [pc, #200]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002386:	0f1b      	lsrs	r3, r3, #28
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	019a      	lsls	r2, r3, #6
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	041b      	lsls	r3, r3, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	071b      	lsls	r3, r3, #28
 80023a6:	4929      	ldr	r1, [pc, #164]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d028      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023ba:	4b24      	ldr	r3, [pc, #144]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c0:	0e1b      	lsrs	r3, r3, #24
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023c8:	4b20      	ldr	r3, [pc, #128]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	0c1b      	lsrs	r3, r3, #16
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	019a      	lsls	r2, r3, #6
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	431a      	orrs	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	071b      	lsls	r3, r3, #28
 80023ee:	4917      	ldr	r1, [pc, #92]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002404:	4911      	ldr	r1, [pc, #68]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800240c:	4b0f      	ldr	r3, [pc, #60]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0e      	ldr	r2, [pc, #56]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002418:	f7fe fbfc 	bl	8000c14 <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002420:	f7fe fbf8 	bl	8000c14 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	@ 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e007      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002432:	4b06      	ldr	r3, [pc, #24]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800243a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800243e:	d1ef      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3720      	adds	r7, #32
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800

08002450 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e022      	b.n	80024a8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7fe fa79 	bl	800096c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2203      	movs	r2, #3
 800247e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f814 	bl	80024b0 <HAL_SD_InitCard>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e00a      	b.n	80024a8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80024b0:	b5b0      	push	{r4, r5, r7, lr}
 80024b2:	b08e      	sub	sp, #56	@ 0x38
 80024b4:	af04      	add	r7, sp, #16
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80024cc:	2376      	movs	r3, #118	@ 0x76
 80024ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681d      	ldr	r5, [r3, #0]
 80024d4:	466c      	mov	r4, sp
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e8:	4628      	mov	r0, r5
 80024ea:	f001 fbd9 	bl	8003ca0 <SDMMC_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80024f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e059      	b.n	80025b4 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800250e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f001 fc0d 	bl	8003d34 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002528:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800252a:	2002      	movs	r0, #2
 800252c:	f7fe fb7e 	bl	8000c2c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f001 f8ef 	bl	8003714 <SD_PowerON>
 8002536:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e02e      	b.n	80025b4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f001 f80e 	bl	8003578 <SD_InitCard>
 800255c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00b      	beq.n	800257c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e01b      	b.n	80025b4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002584:	4618      	mov	r0, r3
 8002586:	f001 fc67 	bl	8003e58 <SDMMC_CmdBlockLength>
 800258a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00f      	beq.n	80025b2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a09      	ldr	r2, [pc, #36]	@ (80025bc <HAL_SD_InitCard+0x10c>)
 8002598:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3728      	adds	r7, #40	@ 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bdb0      	pop	{r4, r5, r7, pc}
 80025bc:	004005ff 	.word	0x004005ff

080025c0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b092      	sub	sp, #72	@ 0x48
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80025ce:	f7fe fb21 	bl	8000c14 <HAL_GetTick>
 80025d2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d107      	bne.n	80025f2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1bd      	b.n	800296e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	f040 81b0 	bne.w	8002960 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002606:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	441a      	add	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002610:	429a      	cmp	r2, r3
 8002612:	d907      	bls.n	8002624 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002618:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e1a4      	b.n	800296e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2203      	movs	r2, #3
 8002628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2200      	movs	r2, #0
 8002632:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002638:	2b01      	cmp	r3, #1
 800263a:	d002      	beq.n	8002642 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800263c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263e:	025b      	lsls	r3, r3, #9
 8002640:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
 8002646:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	025b      	lsls	r3, r3, #9
 800264c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800264e:	2390      	movs	r3, #144	@ 0x90
 8002650:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002652:	2302      	movs	r3, #2
 8002654:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800265a:	2301      	movs	r3, #1
 800265c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f107 0214 	add.w	r2, r7, #20
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f001 fbc9 	bl	8003e00 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d90a      	bls.n	800268a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2202      	movs	r2, #2
 8002678:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002680:	4618      	mov	r0, r3
 8002682:	f001 fc2d 	bl	8003ee0 <SDMMC_CmdReadMultiBlock>
 8002686:	6478      	str	r0, [r7, #68]	@ 0x44
 8002688:	e009      	b.n	800269e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002696:	4618      	mov	r0, r3
 8002698:	f001 fc00 	bl	8003e9c <SDMMC_CmdReadSingleBlock>
 800269c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800269e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d012      	beq.n	80026ca <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a7a      	ldr	r2, [pc, #488]	@ (8002894 <HAL_SD_ReadBlocks+0x2d4>)
 80026aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026b2:	431a      	orrs	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e151      	b.n	800296e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80026ce:	e061      	b.n	8002794 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d03c      	beq.n	8002758 <HAL_SD_ReadBlocks+0x198>
 80026de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d039      	beq.n	8002758 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80026e8:	e033      	b.n	8002752 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 fb02 	bl	8003cf8 <SDMMC_ReadFIFO>
 80026f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80026f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80026fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002700:	3301      	adds	r3, #1
 8002702:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002706:	3b01      	subs	r3, #1
 8002708:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800270a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	b2da      	uxtb	r2, r3
 8002710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002712:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002716:	3301      	adds	r3, #1
 8002718:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800271a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800271c:	3b01      	subs	r3, #1
 800271e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002722:	0c1b      	lsrs	r3, r3, #16
 8002724:	b2da      	uxtb	r2, r3
 8002726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002728:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800272a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272c:	3301      	adds	r3, #1
 800272e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002732:	3b01      	subs	r3, #1
 8002734:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002738:	0e1b      	lsrs	r3, r3, #24
 800273a:	b2da      	uxtb	r2, r3
 800273c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800273e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002742:	3301      	adds	r3, #1
 8002744:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002748:	3b01      	subs	r3, #1
 800274a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800274c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800274e:	3301      	adds	r3, #1
 8002750:	643b      	str	r3, [r7, #64]	@ 0x40
 8002752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002754:	2b07      	cmp	r3, #7
 8002756:	d9c8      	bls.n	80026ea <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002758:	f7fe fa5c 	bl	8000c14 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002764:	429a      	cmp	r2, r3
 8002766:	d902      	bls.n	800276e <HAL_SD_ReadBlocks+0x1ae>
 8002768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800276a:	2b00      	cmp	r3, #0
 800276c:	d112      	bne.n	8002794 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a48      	ldr	r2, [pc, #288]	@ (8002894 <HAL_SD_ReadBlocks+0x2d4>)
 8002774:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0ec      	b.n	800296e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d096      	beq.n	80026d0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d022      	beq.n	80027f6 <HAL_SD_ReadBlocks+0x236>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d91f      	bls.n	80027f6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d01b      	beq.n	80027f6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 fbf2 	bl	8003fac <SDMMC_CmdStopTransfer>
 80027c8:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80027ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d012      	beq.n	80027f6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002894 <HAL_SD_ReadBlocks+0x2d4>)
 80027d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027de:	431a      	orrs	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0bb      	b.n	800296e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d012      	beq.n	800282a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a22      	ldr	r2, [pc, #136]	@ (8002894 <HAL_SD_ReadBlocks+0x2d4>)
 800280a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002810:	f043 0208 	orr.w	r2, r3, #8
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e0a1      	b.n	800296e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d012      	beq.n	800285e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a15      	ldr	r2, [pc, #84]	@ (8002894 <HAL_SD_ReadBlocks+0x2d4>)
 800283e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002844:	f043 0202 	orr.w	r2, r3, #2
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e087      	b.n	800296e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d064      	beq.n	8002936 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a08      	ldr	r2, [pc, #32]	@ (8002894 <HAL_SD_ReadBlocks+0x2d4>)
 8002872:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002878:	f043 0220 	orr.w	r2, r3, #32
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06d      	b.n	800296e <HAL_SD_ReadBlocks+0x3ae>
 8002892:	bf00      	nop
 8002894:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f001 fa2b 	bl	8003cf8 <SDMMC_ReadFIFO>
 80028a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80028a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80028ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ae:	3301      	adds	r3, #1
 80028b0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80028b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028b4:	3b01      	subs	r3, #1
 80028b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80028b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80028c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c4:	3301      	adds	r3, #1
 80028c6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80028c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ca:	3b01      	subs	r3, #1
 80028cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80028ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80028d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028da:	3301      	adds	r3, #1
 80028dc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80028de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e0:	3b01      	subs	r3, #1
 80028e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80028e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e6:	0e1b      	lsrs	r3, r3, #24
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ec:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80028ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f0:	3301      	adds	r3, #1
 80028f2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80028f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f6:	3b01      	subs	r3, #1
 80028f8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80028fa:	f7fe f98b 	bl	8000c14 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002906:	429a      	cmp	r2, r3
 8002908:	d902      	bls.n	8002910 <HAL_SD_ReadBlocks+0x350>
 800290a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800290c:	2b00      	cmp	r3, #0
 800290e:	d112      	bne.n	8002936 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <HAL_SD_ReadBlocks+0x3b8>)
 8002916:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e01b      	b.n	800296e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_SD_ReadBlocks+0x38a>
 8002944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1a6      	bne.n	8002898 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002952:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	e006      	b.n	800296e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002964:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3748      	adds	r7, #72	@ 0x48
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	004005ff 	.word	0x004005ff

0800297c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b092      	sub	sp, #72	@ 0x48
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800298a:	f7fe f943 	bl	8000c14 <HAL_GetTick>
 800298e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d107      	bne.n	80029ae <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e165      	b.n	8002c7a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	f040 8158 	bne.w	8002c6c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80029c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	441a      	add	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d907      	bls.n	80029e0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e14c      	b.n	8002c7a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2203      	movs	r2, #3
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2200      	movs	r2, #0
 80029ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d002      	beq.n	80029fe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80029f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fa:	025b      	lsls	r3, r3, #9
 80029fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002a02:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	025b      	lsls	r3, r3, #9
 8002a08:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002a0a:	2390      	movs	r3, #144	@ 0x90
 8002a0c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002a16:	2301      	movs	r3, #1
 8002a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f107 0218 	add.w	r2, r7, #24
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 f9eb 	bl	8003e00 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d90a      	bls.n	8002a46 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f001 fa93 	bl	8003f68 <SDMMC_CmdWriteMultiBlock>
 8002a42:	6478      	str	r0, [r7, #68]	@ 0x44
 8002a44:	e009      	b.n	8002a5a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2210      	movs	r2, #16
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 fa66 	bl	8003f24 <SDMMC_CmdWriteSingleBlock>
 8002a58:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d012      	beq.n	8002a86 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a87      	ldr	r2, [pc, #540]	@ (8002c84 <HAL_SD_WriteBlocks+0x308>)
 8002a66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0f9      	b.n	8002c7a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002a8a:	e065      	b.n	8002b58 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d040      	beq.n	8002b1c <HAL_SD_WriteBlocks+0x1a0>
 8002a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d03d      	beq.n	8002b1c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aa4:	e037      	b.n	8002b16 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aae:	3301      	adds	r3, #1
 8002ab0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	021a      	lsls	r2, r3, #8
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002acc:	3b01      	subs	r3, #1
 8002ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	041a      	lsls	r2, r3, #16
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ade:	3301      	adds	r3, #1
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	061a      	lsls	r2, r3, #24
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af6:	3301      	adds	r3, #1
 8002af8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002afc:	3b01      	subs	r3, #1
 8002afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f107 0214 	add.w	r2, r7, #20
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 f901 	bl	8003d12 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b12:	3301      	adds	r3, #1
 8002b14:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b18:	2b07      	cmp	r3, #7
 8002b1a:	d9c4      	bls.n	8002aa6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002b1c:	f7fe f87a 	bl	8000c14 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d902      	bls.n	8002b32 <HAL_SD_WriteBlocks+0x1b6>
 8002b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d112      	bne.n	8002b58 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a53      	ldr	r2, [pc, #332]	@ (8002c84 <HAL_SD_WriteBlocks+0x308>)
 8002b38:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b40:	431a      	orrs	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e090      	b.n	8002c7a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5e:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d092      	beq.n	8002a8c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d022      	beq.n	8002bba <HAL_SD_WriteBlocks+0x23e>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d91f      	bls.n	8002bba <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d01b      	beq.n	8002bba <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 fa10 	bl	8003fac <SDMMC_CmdStopTransfer>
 8002b8c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d012      	beq.n	8002bba <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a3a      	ldr	r2, [pc, #232]	@ (8002c84 <HAL_SD_WriteBlocks+0x308>)
 8002b9a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e05f      	b.n	8002c7a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d012      	beq.n	8002bee <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002c84 <HAL_SD_WriteBlocks+0x308>)
 8002bce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd4:	f043 0208 	orr.w	r2, r3, #8
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e045      	b.n	8002c7a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d012      	beq.n	8002c22 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a20      	ldr	r2, [pc, #128]	@ (8002c84 <HAL_SD_WriteBlocks+0x308>)
 8002c02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c08:	f043 0202 	orr.w	r2, r3, #2
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e02b      	b.n	8002c7a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d012      	beq.n	8002c56 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a13      	ldr	r2, [pc, #76]	@ (8002c84 <HAL_SD_WriteBlocks+0x308>)
 8002c36:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3c:	f043 0210 	orr.w	r2, r3, #16
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e011      	b.n	8002c7a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002c5e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e006      	b.n	8002c7a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c70:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3748      	adds	r7, #72	@ 0x48
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	004005ff 	.word	0x004005ff

08002c88 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_SD_IRQHandler+0x2e>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 ff4f 	bl	8003b52 <SD_Read_IT>
 8002cb4:	e15a      	b.n	8002f6c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 808d 	beq.w	8002de0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cce:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4b9a      	ldr	r3, [pc, #616]	@ (8002f44 <HAL_SD_IRQHandler+0x2bc>)
 8002cdc:	400b      	ands	r3, r1
 8002cde:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d039      	beq.n	8002d6e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d104      	bne.n	8002d0e <HAL_SD_IRQHandler+0x86>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d011      	beq.n	8002d32 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f001 f94a 	bl	8003fac <SDMMC_CmdStopTransfer>
 8002d18:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f921 	bl	8002f74 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002d3a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d104      	bne.n	8002d5e <HAL_SD_IRQHandler+0xd6>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fd fc48 	bl	80005f4 <HAL_SD_RxCpltCallback>
 8002d64:	e102      	b.n	8002f6c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fd fc3a 	bl	80005e0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d6c:	e0fe      	b.n	8002f6c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80f9 	beq.w	8002f6c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d011      	beq.n	8002da8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 f90f 	bl	8003fac <SDMMC_CmdStopTransfer>
 8002d8e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f8e6 	bl	8002f74 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 80dc 	bne.w	8002f6c <HAL_SD_IRQHandler+0x2e4>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 80d6 	bne.w	8002f6c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0208 	bic.w	r2, r2, #8
 8002dce:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7fd fc01 	bl	80005e0 <HAL_SD_TxCpltCallback>
}
 8002dde:	e0c5      	b.n	8002f6c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_SD_IRQHandler+0x178>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fefb 	bl	8003bf4 <SD_Write_IT>
 8002dfe:	e0b5      	b.n	8002f6c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e06:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 80ae 	beq.w	8002f6c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e22:	f043 0202 	orr.w	r2, r3, #2
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3c:	f043 0208 	orr.w	r2, r3, #8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e56:	f043 0220 	orr.w	r2, r3, #32
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e70:	f043 0210 	orr.w	r2, r3, #16
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002e80:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8002e90:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 f888 	bl	8003fac <SDMMC_CmdStopTransfer>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f857 	bl	8002f74 <HAL_SD_ErrorCallback>
}
 8002ec6:	e051      	b.n	8002f6c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d04c      	beq.n	8002f6c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d104      	bne.n	8002ee6 <HAL_SD_IRQHandler+0x25e>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d011      	beq.n	8002f0a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eea:	4a17      	ldr	r2, [pc, #92]	@ (8002f48 <HAL_SD_IRQHandler+0x2c0>)
 8002eec:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe f848 	bl	8000f88 <HAL_DMA_Abort_IT>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d036      	beq.n	8002f6c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 faca 	bl	800349c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002f08:	e030      	b.n	8002f6c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d104      	bne.n	8002f1e <HAL_SD_IRQHandler+0x296>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d018      	beq.n	8002f50 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	4a0a      	ldr	r2, [pc, #40]	@ (8002f4c <HAL_SD_IRQHandler+0x2c4>)
 8002f24:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe f82c 	bl	8000f88 <HAL_DMA_Abort_IT>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01a      	beq.n	8002f6c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fae5 	bl	800350a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002f40:	e014      	b.n	8002f6c <HAL_SD_IRQHandler+0x2e4>
 8002f42:	bf00      	nop
 8002f44:	ffff3ec5 	.word	0xffff3ec5
 8002f48:	0800349d 	.word	0x0800349d
 8002f4c:	0800350b 	.word	0x0800350b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fd fb31 	bl	80005cc <HAL_SD_AbortCallback>
}
 8002f6a:	e7ff      	b.n	8002f6c <HAL_SD_IRQHandler+0x2e4>
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f96:	0f9b      	lsrs	r3, r3, #30
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fb4:	0e1b      	lsrs	r3, r3, #24
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc6:	0c1b      	lsrs	r3, r3, #16
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fe8:	0d1b      	lsrs	r3, r3, #20
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003006:	0bdb      	lsrs	r3, r3, #15
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	b2da      	uxtb	r2, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003018:	0b9b      	lsrs	r3, r3, #14
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	b2da      	uxtb	r2, r3
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800302a:	0b5b      	lsrs	r3, r3, #13
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	b2da      	uxtb	r2, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800303c:	0b1b      	lsrs	r3, r3, #12
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	b2da      	uxtb	r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2200      	movs	r2, #0
 800304e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003054:	2b00      	cmp	r3, #0
 8003056:	d163      	bne.n	8003120 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800305c:	009a      	lsls	r2, r3, #2
 800305e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003062:	4013      	ands	r3, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003068:	0f92      	lsrs	r2, r2, #30
 800306a:	431a      	orrs	r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003074:	0edb      	lsrs	r3, r3, #27
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	b2da      	uxtb	r2, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003086:	0e1b      	lsrs	r3, r3, #24
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	b2da      	uxtb	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003098:	0d5b      	lsrs	r3, r3, #21
 800309a:	b2db      	uxtb	r3, r3
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030aa:	0c9b      	lsrs	r3, r3, #18
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030bc:	0bdb      	lsrs	r3, r3, #15
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	7e1b      	ldrb	r3, [r3, #24]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	3302      	adds	r3, #2
 80030e0:	2201      	movs	r2, #1
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80030ea:	fb03 f202 	mul.w	r2, r3, r2
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	7a1b      	ldrb	r3, [r3, #8]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	2201      	movs	r2, #1
 80030fe:	409a      	lsls	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800310c:	0a52      	lsrs	r2, r2, #9
 800310e:	fb03 f202 	mul.w	r2, r3, r2
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800311c:	661a      	str	r2, [r3, #96]	@ 0x60
 800311e:	e031      	b.n	8003184 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003124:	2b01      	cmp	r3, #1
 8003126:	d11d      	bne.n	8003164 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800312c:	041b      	lsls	r3, r3, #16
 800312e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003136:	0c1b      	lsrs	r3, r3, #16
 8003138:	431a      	orrs	r2, r3
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	3301      	adds	r3, #1
 8003144:	029a      	lsls	r2, r3, #10
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003158:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	661a      	str	r2, [r3, #96]	@ 0x60
 8003162:	e00f      	b.n	8003184 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a58      	ldr	r2, [pc, #352]	@ (80032cc <HAL_SD_GetCardCSD+0x344>)
 800316a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e09d      	b.n	80032c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003188:	0b9b      	lsrs	r3, r3, #14
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	b2da      	uxtb	r2, r3
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800319a:	09db      	lsrs	r3, r3, #7
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	0fdb      	lsrs	r3, r3, #31
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c8:	0f5b      	lsrs	r3, r3, #29
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031da:	0e9b      	lsrs	r3, r3, #26
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ec:	0d9b      	lsrs	r3, r3, #22
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fe:	0d5b      	lsrs	r3, r3, #21
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	b2da      	uxtb	r2, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321a:	0c1b      	lsrs	r3, r3, #16
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	b2da      	uxtb	r2, r3
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322e:	0bdb      	lsrs	r3, r3, #15
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	b2da      	uxtb	r2, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003242:	0b9b      	lsrs	r3, r3, #14
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	b2da      	uxtb	r2, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003256:	0b5b      	lsrs	r3, r3, #13
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	b2da      	uxtb	r2, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326a:	0b1b      	lsrs	r3, r3, #12
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	b2da      	uxtb	r2, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327e:	0a9b      	lsrs	r3, r3, #10
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	b2da      	uxtb	r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	b2da      	uxtb	r2, r3
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	004005ff 	.word	0x004005ff

080032d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003328:	b5b0      	push	{r4, r5, r7, lr}
 800332a:	b08e      	sub	sp, #56	@ 0x38
 800332c:	af04      	add	r7, sp, #16
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2203      	movs	r2, #3
 800333c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003344:	2b03      	cmp	r3, #3
 8003346:	d02e      	beq.n	80033a6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800334e:	d106      	bne.n	800335e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003354:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	639a      	str	r2, [r3, #56]	@ 0x38
 800335c:	e029      	b.n	80033b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003364:	d10a      	bne.n	800337c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fa8a 	bl	8003880 <SD_WideBus_Enable>
 800336c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	639a      	str	r2, [r3, #56]	@ 0x38
 800337a:	e01a      	b.n	80033b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10a      	bne.n	8003398 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fac7 	bl	8003916 <SD_WideBus_Disable>
 8003388:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	639a      	str	r2, [r3, #56]	@ 0x38
 8003396:	e00c      	b.n	80033b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80033a4:	e005      	b.n	80033b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033aa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a26      	ldr	r2, [pc, #152]	@ (8003458 <HAL_SD_ConfigWideBusOperation+0x130>)
 80033c0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80033d0:	e01f      	b.n	8003412 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681d      	ldr	r5, [r3, #0]
 80033f8:	466c      	mov	r4, sp
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003402:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800340c:	4628      	mov	r0, r5
 800340e:	f000 fc47 	bl	8003ca0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fd1c 	bl	8003e58 <SDMMC_CmdBlockLength>
 8003420:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00c      	beq.n	8003442 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <HAL_SD_ConfigWideBusOperation+0x130>)
 800342e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800344a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800344e:	4618      	mov	r0, r3
 8003450:	3728      	adds	r7, #40	@ 0x28
 8003452:	46bd      	mov	sp, r7
 8003454:	bdb0      	pop	{r4, r5, r7, pc}
 8003456:	bf00      	nop
 8003458:	004005ff 	.word	0x004005ff

0800345c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003468:	f107 030c 	add.w	r3, r7, #12
 800346c:	4619      	mov	r1, r3
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f9de 	bl	8003830 <SD_SendStatus>
 8003474:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	0a5b      	lsrs	r3, r3, #9
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003492:	693b      	ldr	r3, [r7, #16]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f240 523a 	movw	r2, #1338	@ 0x53a
 80034b2:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff ffd1 	bl	800345c <HAL_SD_GetCardState>
 80034ba:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b06      	cmp	r3, #6
 80034ce:	d002      	beq.n	80034d6 <SD_DMATxAbort+0x3a>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d10a      	bne.n	80034ec <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fd66 	bl	8003fac <SDMMC_CmdStopTransfer>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e6:	431a      	orrs	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d103      	bne.n	80034fc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7fd f869 	bl	80005cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80034fa:	e002      	b.n	8003502 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff fd39 	bl	8002f74 <HAL_SD_ErrorCallback>
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003520:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f7ff ff9a 	bl	800345c <HAL_SD_GetCardState>
 8003528:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b06      	cmp	r3, #6
 800353c:	d002      	beq.n	8003544 <SD_DMARxAbort+0x3a>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b05      	cmp	r3, #5
 8003542:	d10a      	bne.n	800355a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fd2f 	bl	8003fac <SDMMC_CmdStopTransfer>
 800354e:	4602      	mov	r2, r0
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003554:	431a      	orrs	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7fd f832 	bl	80005cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003568:	e002      	b.n	8003570 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7ff fd02 	bl	8002f74 <HAL_SD_ErrorCallback>
}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003578:	b5b0      	push	{r4, r5, r7, lr}
 800357a:	b094      	sub	sp, #80	@ 0x50
 800357c:	af04      	add	r7, sp, #16
 800357e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003580:	2301      	movs	r3, #1
 8003582:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fbe1 	bl	8003d50 <SDMMC_GetPowerState>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d102      	bne.n	800359a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003594:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003598:	e0b8      	b.n	800370c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d02f      	beq.n	8003602 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fe0b 	bl	80041c2 <SDMMC_CmdSendCID>
 80035ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80035ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <SD_InitCard+0x40>
    {
      return errorstate;
 80035b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b6:	e0a9      	b.n	800370c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fc0b 	bl	8003dda <SDMMC_GetResponse>
 80035c4:	4602      	mov	r2, r0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2104      	movs	r1, #4
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fc02 	bl	8003dda <SDMMC_GetResponse>
 80035d6:	4602      	mov	r2, r0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2108      	movs	r1, #8
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fbf9 	bl	8003dda <SDMMC_GetResponse>
 80035e8:	4602      	mov	r2, r0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	210c      	movs	r1, #12
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fbf0 	bl	8003dda <SDMMC_GetResponse>
 80035fa:	4602      	mov	r2, r0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	2b03      	cmp	r3, #3
 8003608:	d00d      	beq.n	8003626 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f107 020e 	add.w	r2, r7, #14
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fe11 	bl	800423c <SDMMC_CmdSetRelAdd>
 800361a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800361c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <SD_InitCard+0xae>
    {
      return errorstate;
 8003622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003624:	e072      	b.n	800370c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	2b03      	cmp	r3, #3
 800362c:	d036      	beq.n	800369c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800362e:	89fb      	ldrh	r3, [r7, #14]
 8003630:	461a      	mov	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363e:	041b      	lsls	r3, r3, #16
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f000 fddb 	bl	80041fe <SDMMC_CmdSendCSD>
 8003648:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800364a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003652:	e05b      	b.n	800370c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fbbd 	bl	8003dda <SDMMC_GetResponse>
 8003660:	4602      	mov	r2, r0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2104      	movs	r1, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fbb4 	bl	8003dda <SDMMC_GetResponse>
 8003672:	4602      	mov	r2, r0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2108      	movs	r1, #8
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fbab 	bl	8003dda <SDMMC_GetResponse>
 8003684:	4602      	mov	r2, r0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	210c      	movs	r1, #12
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fba2 	bl	8003dda <SDMMC_GetResponse>
 8003696:	4602      	mov	r2, r0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2104      	movs	r1, #4
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fb99 	bl	8003dda <SDMMC_GetResponse>
 80036a8:	4603      	mov	r3, r0
 80036aa:	0d1a      	lsrs	r2, r3, #20
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80036b0:	f107 0310 	add.w	r3, r7, #16
 80036b4:	4619      	mov	r1, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fc66 	bl	8002f88 <HAL_SD_GetCardCSD>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80036c6:	e021      	b.n	800370c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d0:	041b      	lsls	r3, r3, #16
 80036d2:	2200      	movs	r2, #0
 80036d4:	461c      	mov	r4, r3
 80036d6:	4615      	mov	r5, r2
 80036d8:	4622      	mov	r2, r4
 80036da:	462b      	mov	r3, r5
 80036dc:	4608      	mov	r0, r1
 80036de:	f000 fc87 	bl	8003ff0 <SDMMC_CmdSelDesel>
 80036e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80036e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <SD_InitCard+0x176>
  {
    return errorstate;
 80036ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ec:	e00e      	b.n	800370c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681d      	ldr	r5, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	466c      	mov	r4, sp
 80036f6:	f103 0210 	add.w	r2, r3, #16
 80036fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80036fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003700:	3304      	adds	r3, #4
 8003702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003704:	4628      	mov	r0, r5
 8003706:	f000 facb 	bl	8003ca0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3740      	adds	r7, #64	@ 0x40
 8003710:	46bd      	mov	sp, r7
 8003712:	bdb0      	pop	{r4, r5, r7, pc}

08003714 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fc82 	bl	8004036 <SDMMC_CmdGoIdleState>
 8003732:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <SD_PowerON+0x2a>
  {
    return errorstate;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	e072      	b.n	8003824 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fc95 	bl	8004072 <SDMMC_CmdOperCond>
 8003748:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fc6b 	bl	8004036 <SDMMC_CmdGoIdleState>
 8003760:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	e05b      	b.n	8003824 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003776:	2b01      	cmp	r3, #1
 8003778:	d137      	bne.n	80037ea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fc95 	bl	80040b0 <SDMMC_CmdAppCommand>
 8003786:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d02d      	beq.n	80037ea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800378e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003792:	e047      	b.n	8003824 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2100      	movs	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fc88 	bl	80040b0 <SDMMC_CmdAppCommand>
 80037a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <SD_PowerON+0x98>
    {
      return errorstate;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	e03b      	b.n	8003824 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	491e      	ldr	r1, [pc, #120]	@ (800382c <SD_PowerON+0x118>)
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fc9e 	bl	80040f4 <SDMMC_CmdAppOperCommand>
 80037b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80037c4:	e02e      	b.n	8003824 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fb04 	bl	8003dda <SDMMC_GetResponse>
 80037d2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	0fdb      	lsrs	r3, r3, #31
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <SD_PowerON+0xcc>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <SD_PowerON+0xce>
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]

    count++;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	3301      	adds	r3, #1
 80037e8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d802      	bhi.n	80037fa <SD_PowerON+0xe6>
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0cc      	beq.n	8003794 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003800:	4293      	cmp	r3, r2
 8003802:	d902      	bls.n	800380a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003804:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003808:	e00c      	b.n	8003824 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44
 800381a:	e002      	b.n	8003822 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	c1100000 	.word	0xc1100000

08003830 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d102      	bne.n	8003846 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003840:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003844:	e018      	b.n	8003878 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384e:	041b      	lsls	r3, r3, #16
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f000 fd13 	bl	800427e <SDMMC_CmdSendStatus>
 8003858:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	e009      	b.n	8003878 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fab5 	bl	8003dda <SDMMC_GetResponse>
 8003870:	4602      	mov	r2, r0
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	2300      	movs	r3, #0
 800388e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fa9f 	bl	8003dda <SDMMC_GetResponse>
 800389c:	4603      	mov	r3, r0
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038a6:	d102      	bne.n	80038ae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80038a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80038ac:	e02f      	b.n	800390e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80038ae:	f107 030c 	add.w	r3, r7, #12
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f879 	bl	80039ac <SD_FindSCR>
 80038ba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	e023      	b.n	800390e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01c      	beq.n	800390a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d8:	041b      	lsls	r3, r3, #16
 80038da:	4619      	mov	r1, r3
 80038dc:	4610      	mov	r0, r2
 80038de:	f000 fbe7 	bl	80040b0 <SDMMC_CmdAppCommand>
 80038e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	e00f      	b.n	800390e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2102      	movs	r1, #2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fc21 	bl	800413c <SDMMC_CmdBusWidth>
 80038fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	e003      	b.n	800390e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003906:	2300      	movs	r3, #0
 8003908:	e001      	b.n	800390e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800390a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b086      	sub	sp, #24
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fa54 	bl	8003dda <SDMMC_GetResponse>
 8003932:	4603      	mov	r3, r0
 8003934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003938:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800393c:	d102      	bne.n	8003944 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800393e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003942:	e02f      	b.n	80039a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003944:	f107 030c 	add.w	r3, r7, #12
 8003948:	4619      	mov	r1, r3
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f82e 	bl	80039ac <SD_FindSCR>
 8003950:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	e023      	b.n	80039a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01c      	beq.n	80039a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396e:	041b      	lsls	r3, r3, #16
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f000 fb9c 	bl	80040b0 <SDMMC_CmdAppCommand>
 8003978:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	e00f      	b.n	80039a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fbd6 	bl	800413c <SDMMC_CmdBusWidth>
 8003990:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	e003      	b.n	80039a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800399c:	2300      	movs	r3, #0
 800399e:	e001      	b.n	80039a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80039a0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80039ac:	b590      	push	{r4, r7, lr}
 80039ae:	b08f      	sub	sp, #60	@ 0x3c
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80039b6:	f7fd f92d 	bl	8000c14 <HAL_GetTick>
 80039ba:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80039c0:	2300      	movs	r3, #0
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2108      	movs	r1, #8
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fa40 	bl	8003e58 <SDMMC_CmdBlockLength>
 80039d8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80039da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80039e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e2:	e0b2      	b.n	8003b4a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ec:	041b      	lsls	r3, r3, #16
 80039ee:	4619      	mov	r1, r3
 80039f0:	4610      	mov	r0, r2
 80039f2:	f000 fb5d 	bl	80040b0 <SDMMC_CmdAppCommand>
 80039f6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <SD_FindSCR+0x56>
  {
    return errorstate;
 80039fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a00:	e0a3      	b.n	8003b4a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003a02:	f04f 33ff 	mov.w	r3, #4294967295
 8003a06:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003a08:	2308      	movs	r3, #8
 8003a0a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8003a0c:	2330      	movs	r3, #48	@ 0x30
 8003a0e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003a10:	2302      	movs	r3, #2
 8003a12:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f107 0210 	add.w	r2, r7, #16
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f9ea 	bl	8003e00 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fba5 	bl	8004180 <SDMMC_CmdSendSCR>
 8003a36:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d02a      	beq.n	8003a94 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a40:	e083      	b.n	8003b4a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00f      	beq.n	8003a70 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6819      	ldr	r1, [r3, #0]
 8003a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	f107 0208 	add.w	r2, r7, #8
 8003a5c:	18d4      	adds	r4, r2, r3
 8003a5e:	4608      	mov	r0, r1
 8003a60:	f000 f94a 	bl	8003cf8 <SDMMC_ReadFIFO>
 8003a64:	4603      	mov	r3, r0
 8003a66:	6023      	str	r3, [r4, #0]
      index++;
 8003a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a6e:	e006      	b.n	8003a7e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d012      	beq.n	8003aa4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003a7e:	f7fd f8c9 	bl	8000c14 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8c:	d102      	bne.n	8003a94 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003a8e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003a92:	e05a      	b.n	8003b4a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9a:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0cf      	beq.n	8003a42 <SD_FindSCR+0x96>
 8003aa2:	e000      	b.n	8003aa6 <SD_FindSCR+0xfa>
      break;
 8003aa4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003abc:	2308      	movs	r3, #8
 8003abe:	e044      	b.n	8003b4a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e037      	b.n	8003b4a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2220      	movs	r2, #32
 8003aee:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003af0:	2320      	movs	r3, #32
 8003af2:	e02a      	b.n	8003b4a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003afc:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	061a      	lsls	r2, r3, #24
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003b0a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003b14:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	0e1b      	lsrs	r3, r3, #24
 8003b1a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1e:	601a      	str	r2, [r3, #0]
    scr++;
 8003b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b22:	3304      	adds	r3, #4
 8003b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	061a      	lsls	r2, r3, #24
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003b32:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	0a1b      	lsrs	r3, r3, #8
 8003b38:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003b3c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	0e1b      	lsrs	r3, r3, #24
 8003b42:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b46:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	373c      	adds	r7, #60	@ 0x3c
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd90      	pop	{r4, r7, pc}

08003b52 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d03f      	beq.n	8003bec <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	e033      	b.n	8003bda <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f8be 	bl	8003cf8 <SDMMC_ReadFIFO>
 8003b7c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	0a1b      	lsrs	r3, r3, #8
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	0c1b      	lsrs	r3, r3, #16
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	0e1b      	lsrs	r3, r3, #24
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b07      	cmp	r3, #7
 8003bde:	d9c8      	bls.n	8003b72 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8003bec:	bf00      	nop
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d043      	beq.n	8003c96 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e037      	b.n	8003c84 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	021a      	lsls	r2, r3, #8
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	041a      	lsls	r2, r3, #16
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	061a      	lsls	r2, r3, #24
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3301      	adds	r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f107 0208 	add.w	r2, r7, #8
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 f84a 	bl	8003d12 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	3301      	adds	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2b07      	cmp	r3, #7
 8003c88:	d9c4      	bls.n	8003c14 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8003c96:	bf00      	nop
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	b480      	push	{r7}
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	f107 001c 	add.w	r0, r7, #28
 8003cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003cb6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003cba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8003cbe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8003cc2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003cc6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8003cca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	4b07      	ldr	r3, [pc, #28]	@ (8003cf4 <SDMMC_Init+0x54>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	b004      	add	sp, #16
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	ffff8100 	.word	0xffff8100

08003cf8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2203      	movs	r2, #3
 8003d40:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d8a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003d90:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003d96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <SDMMC_SendCommand+0x50>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	fffff000 	.word	0xfffff000

08003dc0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	b2db      	uxtb	r3, r3
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3314      	adds	r3, #20
 8003de8:	461a      	mov	r2, r3
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	4413      	add	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
}  
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003e26:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003e2c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003e32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0

}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003e66:	2310      	movs	r3, #16
 8003e68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003e6a:	2340      	movs	r3, #64	@ 0x40
 8003e6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003e72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003e78:	f107 0308 	add.w	r3, r7, #8
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff ff74 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8003e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e88:	2110      	movs	r1, #16
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa1a 	bl	80042c4 <SDMMC_GetCmdResp1>
 8003e90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e92:	69fb      	ldr	r3, [r7, #28]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3720      	adds	r7, #32
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003eaa:	2311      	movs	r3, #17
 8003eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003eae:	2340      	movs	r3, #64	@ 0x40
 8003eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003eb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003eba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003ebc:	f107 0308 	add.w	r3, r7, #8
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff ff52 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8003ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ecc:	2111      	movs	r1, #17
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9f8 	bl	80042c4 <SDMMC_GetCmdResp1>
 8003ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003eee:	2312      	movs	r3, #18
 8003ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003ef2:	2340      	movs	r3, #64	@ 0x40
 8003ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003efa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003efe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003f00:	f107 0308 	add.w	r3, r7, #8
 8003f04:	4619      	mov	r1, r3
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ff30 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8003f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f10:	2112      	movs	r1, #18
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f9d6 	bl	80042c4 <SDMMC_GetCmdResp1>
 8003f18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003f32:	2318      	movs	r3, #24
 8003f34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003f36:	2340      	movs	r3, #64	@ 0x40
 8003f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003f44:	f107 0308 	add.w	r3, r7, #8
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ff0e 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8003f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f54:	2118      	movs	r1, #24
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f9b4 	bl	80042c4 <SDMMC_GetCmdResp1>
 8003f5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3720      	adds	r7, #32
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003f76:	2319      	movs	r3, #25
 8003f78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003f7a:	2340      	movs	r3, #64	@ 0x40
 8003f7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003f88:	f107 0308 	add.w	r3, r7, #8
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff feec 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8003f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f98:	2119      	movs	r1, #25
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f992 	bl	80042c4 <SDMMC_GetCmdResp1>
 8003fa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003fb8:	230c      	movs	r3, #12
 8003fba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003fbc:	2340      	movs	r3, #64	@ 0x40
 8003fbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003fc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003fca:	f107 0308 	add.w	r3, r7, #8
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff fecb 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8003fd6:	4a05      	ldr	r2, [pc, #20]	@ (8003fec <SDMMC_CmdStopTransfer+0x40>)
 8003fd8:	210c      	movs	r1, #12
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f972 	bl	80042c4 <SDMMC_GetCmdResp1>
 8003fe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	05f5e100 	.word	0x05f5e100

08003ff0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	@ 0x28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004000:	2307      	movs	r3, #7
 8004002:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004004:	2340      	movs	r3, #64	@ 0x40
 8004006:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004008:	2300      	movs	r3, #0
 800400a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800400c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004010:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004012:	f107 0310 	add.w	r3, r7, #16
 8004016:	4619      	mov	r1, r3
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f7ff fea7 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800401e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004022:	2107      	movs	r1, #7
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f94d 	bl	80042c4 <SDMMC_GetCmdResp1>
 800402a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800402e:	4618      	mov	r0, r3
 8004030:	3728      	adds	r7, #40	@ 0x28
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b088      	sub	sp, #32
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800404e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004052:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004054:	f107 0308 	add.w	r3, r7, #8
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fe86 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fb67 	bl	8004734 <SDMMC_GetCmdError>
 8004066:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004068:	69fb      	ldr	r3, [r7, #28]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b088      	sub	sp, #32
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800407a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800407e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004080:	2308      	movs	r3, #8
 8004082:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004084:	2340      	movs	r3, #64	@ 0x40
 8004086:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800408c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004090:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004092:	f107 0308 	add.w	r3, r7, #8
 8004096:	4619      	mov	r1, r3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff fe67 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fafa 	bl	8004698 <SDMMC_GetCmdResp7>
 80040a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040a6:	69fb      	ldr	r3, [r7, #28]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80040be:	2337      	movs	r3, #55	@ 0x37
 80040c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80040c2:	2340      	movs	r3, #64	@ 0x40
 80040c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80040ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80040d0:	f107 0308 	add.w	r3, r7, #8
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fe48 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80040dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e0:	2137      	movs	r1, #55	@ 0x37
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8ee 	bl	80042c4 <SDMMC_GetCmdResp1>
 80040e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040ea:	69fb      	ldr	r3, [r7, #28]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	4b0d      	ldr	r3, [pc, #52]	@ (8004138 <SDMMC_CmdAppOperCommand+0x44>)
 8004102:	4313      	orrs	r3, r2
 8004104:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004106:	2329      	movs	r3, #41	@ 0x29
 8004108:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800410a:	2340      	movs	r3, #64	@ 0x40
 800410c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004112:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004116:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004118:	f107 0308 	add.w	r3, r7, #8
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff fe24 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fa03 	bl	8004530 <SDMMC_GetCmdResp3>
 800412a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800412c:	69fb      	ldr	r3, [r7, #28]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	80100000 	.word	0x80100000

0800413c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800414a:	2306      	movs	r3, #6
 800414c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800414e:	2340      	movs	r3, #64	@ 0x40
 8004150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004156:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800415a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800415c:	f107 0308 	add.w	r3, r7, #8
 8004160:	4619      	mov	r1, r3
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff fe02 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8004168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416c:	2106      	movs	r1, #6
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8a8 	bl	80042c4 <SDMMC_GetCmdResp1>
 8004174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004176:	69fb      	ldr	r3, [r7, #28]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800418c:	2333      	movs	r3, #51	@ 0x33
 800418e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004190:	2340      	movs	r3, #64	@ 0x40
 8004192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004198:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800419c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800419e:	f107 0308 	add.w	r3, r7, #8
 80041a2:	4619      	mov	r1, r3
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fde1 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80041aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ae:	2133      	movs	r1, #51	@ 0x33
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f887 	bl	80042c4 <SDMMC_GetCmdResp1>
 80041b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041b8:	69fb      	ldr	r3, [r7, #28]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b088      	sub	sp, #32
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80041ce:	2302      	movs	r3, #2
 80041d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80041d2:	23c0      	movs	r3, #192	@ 0xc0
 80041d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80041da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80041e0:	f107 0308 	add.w	r3, r7, #8
 80041e4:	4619      	mov	r1, r3
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff fdc0 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f957 	bl	80044a0 <SDMMC_GetCmdResp2>
 80041f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041f4:	69fb      	ldr	r3, [r7, #28]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3720      	adds	r7, #32
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b088      	sub	sp, #32
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800420c:	2309      	movs	r3, #9
 800420e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004210:	23c0      	movs	r3, #192	@ 0xc0
 8004212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800421c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800421e:	f107 0308 	add.w	r3, r7, #8
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff fda1 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f938 	bl	80044a0 <SDMMC_GetCmdResp2>
 8004230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004232:	69fb      	ldr	r3, [r7, #28]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800424a:	2303      	movs	r3, #3
 800424c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800424e:	2340      	movs	r3, #64	@ 0x40
 8004250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800425a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800425c:	f107 0308 	add.w	r3, r7, #8
 8004260:	4619      	mov	r1, r3
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff fd82 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	2103      	movs	r1, #3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f99d 	bl	80045ac <SDMMC_GetCmdResp6>
 8004272:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004274:	69fb      	ldr	r3, [r7, #28]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b088      	sub	sp, #32
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800428c:	230d      	movs	r3, #13
 800428e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004290:	2340      	movs	r3, #64	@ 0x40
 8004292:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800429c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800429e:	f107 0308 	add.w	r3, r7, #8
 80042a2:	4619      	mov	r1, r3
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff fd61 	bl	8003d6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80042aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ae:	210d      	movs	r1, #13
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f807 	bl	80042c4 <SDMMC_GetCmdResp1>
 80042b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042b8:	69fb      	ldr	r3, [r7, #28]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	460b      	mov	r3, r1
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80042d2:	4b70      	ldr	r3, [pc, #448]	@ (8004494 <SDMMC_GetCmdResp1+0x1d0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a70      	ldr	r2, [pc, #448]	@ (8004498 <SDMMC_GetCmdResp1+0x1d4>)
 80042d8:	fba2 2303 	umull	r2, r3, r2, r3
 80042dc:	0a5a      	lsrs	r2, r3, #9
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	fb02 f303 	mul.w	r3, r2, r3
 80042e4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	1e5a      	subs	r2, r3, #1
 80042ea:	61fa      	str	r2, [r7, #28]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80042f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80042f4:	e0c9      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0ef      	beq.n	80042e6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1ea      	bne.n	80042e6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d004      	beq.n	8004326 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2204      	movs	r2, #4
 8004320:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004322:	2304      	movs	r3, #4
 8004324:	e0b1      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004338:	2301      	movs	r3, #1
 800433a:	e0a6      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	22c5      	movs	r2, #197	@ 0xc5
 8004340:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f7ff fd3c 	bl	8003dc0 <SDMMC_GetCommandResponse>
 8004348:	4603      	mov	r3, r0
 800434a:	461a      	mov	r2, r3
 800434c:	7afb      	ldrb	r3, [r7, #11]
 800434e:	4293      	cmp	r3, r2
 8004350:	d001      	beq.n	8004356 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004352:	2301      	movs	r3, #1
 8004354:	e099      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004356:	2100      	movs	r1, #0
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff fd3e 	bl	8003dda <SDMMC_GetResponse>
 800435e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4b4e      	ldr	r3, [pc, #312]	@ (800449c <SDMMC_GetCmdResp1+0x1d8>)
 8004364:	4013      	ands	r3, r2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800436a:	2300      	movs	r3, #0
 800436c:	e08d      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	da02      	bge.n	800437a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004374:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004378:	e087      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004384:	2340      	movs	r3, #64	@ 0x40
 8004386:	e080      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004392:	2380      	movs	r3, #128	@ 0x80
 8004394:	e079      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80043a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043a4:	e071      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80043b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043b4:	e069      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80043c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043c4:	e061      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80043d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80043d4:	e059      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80043e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043e4:	e051      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80043f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043f4:	e049      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004400:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004404:	e041      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004410:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004414:	e039      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004420:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004424:	e031      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004430:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004434:	e029      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004440:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004444:	e021      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004450:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004454:	e019      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004460:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004464:	e011      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004470:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004474:	e009      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004480:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004484:	e001      	b.n	800448a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004486:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800448a:	4618      	mov	r0, r3
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000008 	.word	0x20000008
 8004498:	10624dd3 	.word	0x10624dd3
 800449c:	fdffe008 	.word	0xfdffe008

080044a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004528 <SDMMC_GetCmdResp2+0x88>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1f      	ldr	r2, [pc, #124]	@ (800452c <SDMMC_GetCmdResp2+0x8c>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	0a5b      	lsrs	r3, r3, #9
 80044b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b8:	fb02 f303 	mul.w	r3, r2, r3
 80044bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1e5a      	subs	r2, r3, #1
 80044c2:	60fa      	str	r2, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d102      	bne.n	80044ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80044c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80044cc:	e026      	b.n	800451c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0ef      	beq.n	80044be <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1ea      	bne.n	80044be <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2204      	movs	r2, #4
 80044f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80044fa:	2304      	movs	r3, #4
 80044fc:	e00e      	b.n	800451c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d004      	beq.n	8004514 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004510:	2301      	movs	r3, #1
 8004512:	e003      	b.n	800451c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	22c5      	movs	r2, #197	@ 0xc5
 8004518:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	20000008 	.word	0x20000008
 800452c:	10624dd3 	.word	0x10624dd3

08004530 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004538:	4b1a      	ldr	r3, [pc, #104]	@ (80045a4 <SDMMC_GetCmdResp3+0x74>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1a      	ldr	r2, [pc, #104]	@ (80045a8 <SDMMC_GetCmdResp3+0x78>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	0a5b      	lsrs	r3, r3, #9
 8004544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004548:	fb02 f303 	mul.w	r3, r2, r3
 800454c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1e5a      	subs	r2, r3, #1
 8004552:	60fa      	str	r2, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d102      	bne.n	800455e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004558:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800455c:	e01b      	b.n	8004596 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004562:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0ef      	beq.n	800454e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ea      	bne.n	800454e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2204      	movs	r2, #4
 8004588:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800458a:	2304      	movs	r3, #4
 800458c:	e003      	b.n	8004596 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	22c5      	movs	r2, #197	@ 0xc5
 8004592:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000008 	.word	0x20000008
 80045a8:	10624dd3 	.word	0x10624dd3

080045ac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	460b      	mov	r3, r1
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045ba:	4b35      	ldr	r3, [pc, #212]	@ (8004690 <SDMMC_GetCmdResp6+0xe4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a35      	ldr	r2, [pc, #212]	@ (8004694 <SDMMC_GetCmdResp6+0xe8>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	0a5b      	lsrs	r3, r3, #9
 80045c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	1e5a      	subs	r2, r3, #1
 80045d4:	61fa      	str	r2, [r7, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d102      	bne.n	80045e0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80045da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80045de:	e052      	b.n	8004686 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0ef      	beq.n	80045d0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1ea      	bne.n	80045d0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d004      	beq.n	8004610 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2204      	movs	r2, #4
 800460a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800460c:	2304      	movs	r3, #4
 800460e:	e03a      	b.n	8004686 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004622:	2301      	movs	r3, #1
 8004624:	e02f      	b.n	8004686 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff fbca 	bl	8003dc0 <SDMMC_GetCommandResponse>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	7afb      	ldrb	r3, [r7, #11]
 8004632:	4293      	cmp	r3, r2
 8004634:	d001      	beq.n	800463a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004636:	2301      	movs	r3, #1
 8004638:	e025      	b.n	8004686 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	22c5      	movs	r2, #197	@ 0xc5
 800463e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004640:	2100      	movs	r1, #0
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7ff fbc9 	bl	8003dda <SDMMC_GetResponse>
 8004648:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d106      	bne.n	8004662 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	0c1b      	lsrs	r3, r3, #16
 8004658:	b29a      	uxth	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800465e:	2300      	movs	r3, #0
 8004660:	e011      	b.n	8004686 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800466c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004670:	e009      	b.n	8004686 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800467c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004680:	e001      	b.n	8004686 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004682:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	3720      	adds	r7, #32
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000008 	.word	0x20000008
 8004694:	10624dd3 	.word	0x10624dd3

08004698 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046a0:	4b22      	ldr	r3, [pc, #136]	@ (800472c <SDMMC_GetCmdResp7+0x94>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a22      	ldr	r2, [pc, #136]	@ (8004730 <SDMMC_GetCmdResp7+0x98>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	0a5b      	lsrs	r3, r3, #9
 80046ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1e5a      	subs	r2, r3, #1
 80046ba:	60fa      	str	r2, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80046c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80046c4:	e02c      	b.n	8004720 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0ef      	beq.n	80046b6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1ea      	bne.n	80046b6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d004      	beq.n	80046f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2204      	movs	r2, #4
 80046f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80046f2:	2304      	movs	r3, #4
 80046f4:	e014      	b.n	8004720 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d004      	beq.n	800470c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004708:	2301      	movs	r3, #1
 800470a:	e009      	b.n	8004720 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2240      	movs	r2, #64	@ 0x40
 800471c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800471e:	2300      	movs	r3, #0
  
}
 8004720:	4618      	mov	r0, r3
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	20000008 	.word	0x20000008
 8004730:	10624dd3 	.word	0x10624dd3

08004734 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800473c:	4b11      	ldr	r3, [pc, #68]	@ (8004784 <SDMMC_GetCmdError+0x50>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a11      	ldr	r2, [pc, #68]	@ (8004788 <SDMMC_GetCmdError+0x54>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	0a5b      	lsrs	r3, r3, #9
 8004748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474c:	fb02 f303 	mul.w	r3, r2, r3
 8004750:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1e5a      	subs	r2, r3, #1
 8004756:	60fa      	str	r2, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d102      	bne.n	8004762 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800475c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004760:	e009      	b.n	8004776 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f1      	beq.n	8004752 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	22c5      	movs	r2, #197	@ 0xc5
 8004772:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000008 	.word	0x20000008
 8004788:	10624dd3 	.word	0x10624dd3

0800478c <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS
disk_status(BYTE pdrv /* Physical drive nmuber to identify the drive */
)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	71fb      	strb	r3, [r7, #7]
  if (pdrv)
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <disk_status+0x14>
  {
    return STA_NOINIT;
 800479c:	2301      	movs	r3, #1
 800479e:	e002      	b.n	80047a6 <disk_status+0x1a>
  }
  return Stat;
 80047a0:	4b04      	ldr	r3, [pc, #16]	@ (80047b4 <disk_status+0x28>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b2db      	uxtb	r3, r3
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000011 	.word	0x20000011

080047b8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS
disk_initialize(BYTE pdrv /* Physical drive nmuber to identify the drive */
)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80047c2:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <disk_initialize+0x38>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	701a      	strb	r2, [r3, #0]
  if (BSP_SD_SDMMC_Init() == MSD_OK)
 80047c8:	f7fb fe96 	bl	80004f8 <BSP_SD_SDMMC_Init>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d107      	bne.n	80047e2 <disk_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80047d2:	4b07      	ldr	r3, [pc, #28]	@ (80047f0 <disk_initialize+0x38>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	4b04      	ldr	r3, [pc, #16]	@ (80047f0 <disk_initialize+0x38>)
 80047e0:	701a      	strb	r2, [r3, #0]
  }
  return Stat;
 80047e2:	4b03      	ldr	r3, [pc, #12]	@ (80047f0 <disk_initialize+0x38>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	b2db      	uxtb	r3, r3
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000011 	.word	0x20000011

080047f4 <disk_read>:
disk_read(BYTE  pdrv,   /* Physical drive nmuber to identify the drive */
          BYTE *buff,   /* Data buffer to store read data */
          LBA_t sector, /* Start sector in LBA */
          UINT  count   /* Number of sectors to read */
)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	4603      	mov	r3, r0
 8004802:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	75fb      	strb	r3, [r7, #23]

  if (BSP_SD_SDMMC_ReadBlocks(
 8004808:	f247 5330 	movw	r3, #30000	@ 0x7530
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	68b8      	ldr	r0, [r7, #8]
 8004812:	f7fb fe91 	bl	8000538 <BSP_SD_SDMMC_ReadBlocks>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <disk_read+0x2c>
          (uint32_t *)buff, (uint32_t)(sector), count, SD_TIMEOUT)
      == MSD_OK)
  {
    res = RES_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004820:	7dfb      	ldrb	r3, [r7, #23]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <disk_write>:
 * @retval DRESULT: Operation result
 */

DRESULT
disk_write(BYTE pdrv, const BYTE *buff, LBA_t sector, UINT count)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b086      	sub	sp, #24
 800482e:	af00      	add	r7, sp, #0
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
 8004836:	4603      	mov	r3, r0
 8004838:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	75fb      	strb	r3, [r7, #23]

  if (BSP_SD_SDMMC_WriteBlocks(
 800483e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	68b8      	ldr	r0, [r7, #8]
 8004848:	f7fb fe94 	bl	8000574 <BSP_SD_SDMMC_WriteBlocks>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <disk_write+0x2c>
          (uint32_t *)buff, (uint32_t)(sector), count, SD_TIMEOUT)
      == MSD_OK)
  {
    res = RES_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004856:	7dfb      	ldrb	r3, [r7, #23]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <disk_ioctl>:
DRESULT
disk_ioctl(BYTE  pdrv, /* Physical drive nmuber (0..) */
           BYTE  cmd,  /* Control code */
           void *buff  /* Buffer to send/receive control data */
)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08c      	sub	sp, #48	@ 0x30
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	603a      	str	r2, [r7, #0]
 800486a:	71fb      	strb	r3, [r7, #7]
 800486c:	460b      	mov	r3, r1
 800486e:	71bb      	strb	r3, [r7, #6]
  DRESULT               res = RES_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_SDMMC_CardInfo CardInfo;

  if (Stat & STA_NOINIT)
 8004876:	4b25      	ldr	r3, [pc, #148]	@ (800490c <disk_ioctl+0xac>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <disk_ioctl+0x28>
  {
    return RES_NOTRDY;
 8004884:	2303      	movs	r3, #3
 8004886:	e03c      	b.n	8004902 <disk_ioctl+0xa2>
  }

  switch (cmd)
 8004888:	79bb      	ldrb	r3, [r7, #6]
 800488a:	2b03      	cmp	r3, #3
 800488c:	d834      	bhi.n	80048f8 <disk_ioctl+0x98>
 800488e:	a201      	add	r2, pc, #4	@ (adr r2, 8004894 <disk_ioctl+0x34>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	080048a5 	.word	0x080048a5
 8004898:	080048ad 	.word	0x080048ad
 800489c:	080048c5 	.word	0x080048c5
 80048a0:	080048df 	.word	0x080048df
  {
    /* Make sure that no pending write process */
    case CTRL_SYNC:
      res = RES_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      break;
 80048aa:	e028      	b.n	80048fe <disk_ioctl+0x9e>

    /* Get number of sectors on the disk (DWORD) */
    case GET_SECTOR_COUNT:
    	BSP_SD_SDMMC_GetCardInfo(&CardInfo);
 80048ac:	f107 030c 	add.w	r3, r7, #12
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fb fe7d 	bl	80005b0 <BSP_SD_SDMMC_GetCardInfo>
      *(DWORD *)buff = CardInfo.LogBlockNbr;
 80048b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	601a      	str	r2, [r3, #0]
      res            = RES_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      break;
 80048c2:	e01c      	b.n	80048fe <disk_ioctl+0x9e>

    /* Get R/W sector size (WORD) */
    case GET_SECTOR_SIZE:
    	BSP_SD_SDMMC_GetCardInfo(&CardInfo);
 80048c4:	f107 030c 	add.w	r3, r7, #12
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fb fe71 	bl	80005b0 <BSP_SD_SDMMC_GetCardInfo>
      *(WORD *)buff = CardInfo.LogBlockSize;
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	801a      	strh	r2, [r3, #0]
      res           = RES_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      break;
 80048dc:	e00f      	b.n	80048fe <disk_ioctl+0x9e>

    /* Get erase block size in unit of sector (DWORD) */
    case GET_BLOCK_SIZE:
    	BSP_SD_SDMMC_GetCardInfo(&CardInfo);
 80048de:	f107 030c 	add.w	r3, r7, #12
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fb fe64 	bl	80005b0 <BSP_SD_SDMMC_GetCardInfo>
      *(DWORD *)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80048e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ea:	0a5a      	lsrs	r2, r3, #9
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	601a      	str	r2, [r3, #0]
      res            = RES_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      break;
 80048f6:	e002      	b.n	80048fe <disk_ioctl+0x9e>

    default:
      res = RES_PARERR;
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80048fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004902:	4618      	mov	r0, r3
 8004904:	3730      	adds	r7, #48	@ 0x30
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000011 	.word	0x20000011

08004910 <get_fattime>:
 * @param  None
 * @retval Time in DWORD
 */
__weak DWORD
get_fattime (void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return 0;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3301      	adds	r3, #1
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004930:	89fb      	ldrh	r3, [r7, #14]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	b21a      	sxth	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	b21b      	sxth	r3, r3
 800493c:	4313      	orrs	r3, r2
 800493e:	b21b      	sxth	r3, r3
 8004940:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004942:	89fb      	ldrh	r3, [r7, #14]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3303      	adds	r3, #3
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	3202      	adds	r2, #2
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	3201      	adds	r2, #1
 8004976:	7812      	ldrb	r2, [r2, #0]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	7812      	ldrb	r2, [r2, #0]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
	return rv;
 8004988:	68fb      	ldr	r3, [r7, #12]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	460b      	mov	r3, r1
 80049a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	887a      	ldrh	r2, [r7, #2]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	887b      	ldrh	r3, [r7, #2]
 80049b0:	0a1b      	lsrs	r3, r3, #8
 80049b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	887a      	ldrh	r2, [r7, #2]
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	0a1b      	lsrs	r3, r3, #8
 80049e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	607a      	str	r2, [r7, #4]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	607a      	str	r2, [r7, #4]
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <dbc_1st+0x14>
 8004a34:	2300      	movs	r3, #0
 8004a36:	e000      	b.n	8004a3a <dbc_1st+0x16>
#endif
	return 0;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <dbc_2nd+0x14>
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <dbc_2nd+0x16>
#endif
	return 0;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	617a      	str	r2, [r7, #20]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 8004a80:	8a7b      	ldrh	r3, [r7, #18]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff ffcd 	bl	8004a24 <dbc_1st>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d015      	beq.n	8004abc <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	617a      	str	r2, [r7, #20]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 8004a9a:	7c7b      	ldrb	r3, [r7, #17]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff ffd2 	bl	8004a46 <dbc_2nd>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d102      	bne.n	8004aae <tchar2uni+0x46>
 8004aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aac:	e01d      	b.n	8004aea <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 8004aae:	8a7b      	ldrh	r3, [r7, #18]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	7c7b      	ldrb	r3, [r7, #17]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 8004abc:	8a7b      	ldrh	r3, [r7, #18]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00d      	beq.n	8004ade <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 8004ac2:	8a7b      	ldrh	r3, [r7, #18]
 8004ac4:	f240 3152 	movw	r1, #850	@ 0x352
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f002 fb57 	bl	800717c <ff_oem2uni>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 8004ad2:	8a7b      	ldrh	r3, [r7, #18]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <tchar2uni+0x76>
 8004ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8004adc:	e005      	b.n	8004aea <tchar2uni+0x82>
	}
	uc = wc;
 8004ade:	8a7b      	ldrh	r3, [r7, #18]
 8004ae0:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	601a      	str	r2, [r3, #0]
	return uc;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	791b      	ldrb	r3, [r3, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d02c      	beq.n	8004b60 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	7858      	ldrb	r0, [r3, #1]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b14:	2301      	movs	r3, #1
 8004b16:	f7ff fe88 	bl	800482a <disk_write>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d11d      	bne.n	8004b5c <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2e:	1ad2      	subs	r2, r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d213      	bcs.n	8004b60 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	78db      	ldrb	r3, [r3, #3]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d10f      	bne.n	8004b60 <sync_window+0x6e>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	7858      	ldrb	r0, [r3, #1]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	441a      	add	r2, r3
 8004b54:	2301      	movs	r3, #1
 8004b56:	f7ff fe68 	bl	800482a <disk_write>
 8004b5a:	e001      	b.n	8004b60 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d01b      	beq.n	8004bba <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff ffb5 	bl	8004af2 <sync_window>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d113      	bne.n	8004bba <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	7858      	ldrb	r0, [r3, #1]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	f7ff fe28 	bl	80047f4 <disk_read>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d004      	beq.n	8004bb4 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8004baa:	f04f 33ff 	mov.w	r3, #4294967295
 8004bae:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ff90 	bl	8004af2 <sync_window>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d158      	bne.n	8004c8e <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d148      	bne.n	8004c76 <sync_fs+0xb2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	795b      	ldrb	r3, [r3, #5]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d144      	bne.n	8004c76 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3338      	adds	r3, #56	@ 0x38
 8004bf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f002 fb90 	bl	800731c <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3338      	adds	r3, #56	@ 0x38
 8004c00:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004c04:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fec4 	bl	8004996 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3338      	adds	r3, #56	@ 0x38
 8004c12:	4921      	ldr	r1, [pc, #132]	@ (8004c98 <sync_fs+0xd4>)
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fed9 	bl	80049cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3338      	adds	r3, #56	@ 0x38
 8004c1e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004c22:	491e      	ldr	r1, [pc, #120]	@ (8004c9c <sync_fs+0xd8>)
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fed1 	bl	80049cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3338      	adds	r3, #56	@ 0x38
 8004c2e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f7ff fec7 	bl	80049cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3338      	adds	r3, #56	@ 0x38
 8004c42:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f7ff febd 	bl	80049cc <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	7858      	ldrb	r0, [r3, #1]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f7ff fddd 	bl	800482a <disk_write>
			fs->fsi_flag = 0;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fdee 	bl	8004860 <disk_ioctl>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <sync_fs+0xca>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	41615252 	.word	0x41615252
 8004c9c:	61417272 	.word	0x61417272

08004ca0 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	3b02      	subs	r3, #2
 8004cae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	3b02      	subs	r3, #2
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d301      	bcc.n	8004cc0 <clst2sect+0x20>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e008      	b.n	8004cd2 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	895b      	ldrh	r3, [r3, #10]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
 8004cd0:	4413      	add	r3, r2
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b086      	sub	sp, #24
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d904      	bls.n	8004cfe <get_fat+0x20>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d302      	bcc.n	8004d04 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004cfe:	2301      	movs	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	e08e      	b.n	8004e22 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004d04:	f04f 33ff 	mov.w	r3, #4294967295
 8004d08:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d061      	beq.n	8004dd6 <get_fat+0xf8>
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	dc7b      	bgt.n	8004e0e <get_fat+0x130>
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d002      	beq.n	8004d20 <get_fat+0x42>
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d041      	beq.n	8004da2 <get_fat+0xc4>
 8004d1e:	e076      	b.n	8004e0e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	0a5b      	lsrs	r3, r3, #9
 8004d36:	4413      	add	r3, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6938      	ldr	r0, [r7, #16]
 8004d3c:	f7ff ff15 	bl	8004b6a <move_window>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d166      	bne.n	8004e14 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	60fa      	str	r2, [r7, #12]
 8004d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4413      	add	r3, r2
 8004d54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	0a5b      	lsrs	r3, r3, #9
 8004d62:	4413      	add	r3, r2
 8004d64:	4619      	mov	r1, r3
 8004d66:	6938      	ldr	r0, [r7, #16]
 8004d68:	f7ff feff 	bl	8004b6a <move_window>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d152      	bne.n	8004e18 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d80:	021b      	lsls	r3, r3, #8
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <get_fat+0xba>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	e002      	b.n	8004d9e <get_fat+0xc0>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9e:	617b      	str	r3, [r7, #20]
			break;
 8004da0:	e03f      	b.n	8004e22 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	4413      	add	r3, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	6938      	ldr	r0, [r7, #16]
 8004db0:	f7ff fedb 	bl	8004b6a <move_window>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d130      	bne.n	8004e1c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004dc8:	4413      	add	r3, r2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff fda8 	bl	8004920 <ld_word>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	617b      	str	r3, [r7, #20]
			break;
 8004dd4:	e025      	b.n	8004e22 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	09db      	lsrs	r3, r3, #7
 8004dde:	4413      	add	r3, r2
 8004de0:	4619      	mov	r1, r3
 8004de2:	6938      	ldr	r0, [r7, #16]
 8004de4:	f7ff fec1 	bl	8004b6a <move_window>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d118      	bne.n	8004e20 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004dfc:	4413      	add	r3, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fda6 	bl	8004950 <ld_dword>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e0a:	617b      	str	r3, [r7, #20]
			break;
 8004e0c:	e009      	b.n	8004e22 <get_fat+0x144>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 8004e0e:	2301      	movs	r3, #1
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e006      	b.n	8004e22 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e14:	bf00      	nop
 8004e16:	e004      	b.n	8004e22 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e18:	bf00      	nop
 8004e1a:	e002      	b.n	8004e22 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004e1c:	bf00      	nop
 8004e1e:	e000      	b.n	8004e22 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e20:	bf00      	nop
		}
	}

	return val;
 8004e22:	697b      	ldr	r3, [r7, #20]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b089      	sub	sp, #36	@ 0x24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	f240 80d9 	bls.w	8004ff6 <put_fat+0x1ca>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	f080 80d3 	bcs.w	8004ff6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	f000 8096 	beq.w	8004f86 <put_fat+0x15a>
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	f300 80cb 	bgt.w	8004ff6 <put_fat+0x1ca>
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d002      	beq.n	8004e6a <put_fat+0x3e>
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d06e      	beq.n	8004f46 <put_fat+0x11a>
 8004e68:	e0c5      	b.n	8004ff6 <put_fat+0x1ca>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4413      	add	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	0a5b      	lsrs	r3, r3, #9
 8004e80:	4413      	add	r3, r2
 8004e82:	4619      	mov	r1, r3
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f7ff fe70 	bl	8004b6a <move_window>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e8e:	7ffb      	ldrb	r3, [r7, #31]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f040 80a9 	bne.w	8004fe8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	1c59      	adds	r1, r3, #1
 8004ea0:	61b9      	str	r1, [r7, #24]
 8004ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea6:	4413      	add	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00d      	beq.n	8004ed0 <put_fat+0xa4>
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	b25b      	sxtb	r3, r3
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	b25a      	sxtb	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	b25b      	sxtb	r3, r3
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	b25b      	sxtb	r3, r3
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	e001      	b.n	8004ed4 <put_fat+0xa8>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	0a5b      	lsrs	r3, r3, #9
 8004ee6:	4413      	add	r3, r2
 8004ee8:	4619      	mov	r1, r3
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f7ff fe3d 	bl	8004b6a <move_window>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ef4:	7ffb      	ldrb	r3, [r7, #31]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d178      	bne.n	8004fec <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f06:	4413      	add	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <put_fat+0xf0>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	091b      	lsrs	r3, r3, #4
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	e00e      	b.n	8004f3a <put_fat+0x10e>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	b25b      	sxtb	r3, r3
 8004f22:	f023 030f 	bic.w	r3, r3, #15
 8004f26:	b25a      	sxtb	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	b25b      	sxtb	r3, r3
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	b25b      	sxtb	r3, r3
 8004f34:	4313      	orrs	r3, r2
 8004f36:	b25b      	sxtb	r3, r3
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	711a      	strb	r2, [r3, #4]
			break;
 8004f44:	e057      	b.n	8004ff6 <put_fat+0x1ca>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	0a1b      	lsrs	r3, r3, #8
 8004f4e:	4413      	add	r3, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7ff fe09 	bl	8004b6a <move_window>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f5c:	7ffb      	ldrb	r3, [r7, #31]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d146      	bne.n	8004ff0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004f70:	4413      	add	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	b292      	uxth	r2, r2
 8004f76:	4611      	mov	r1, r2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff fd0c 	bl	8004996 <st_word>
			fs->wflag = 1;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	711a      	strb	r2, [r3, #4]
			break;
 8004f84:	e037      	b.n	8004ff6 <put_fat+0x1ca>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	09db      	lsrs	r3, r3, #7
 8004f8e:	4413      	add	r3, r2
 8004f90:	4619      	mov	r1, r3
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f7ff fde9 	bl	8004b6a <move_window>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f9c:	7ffb      	ldrb	r3, [r7, #31]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d128      	bne.n	8004ff4 <put_fat+0x1c8>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004fb6:	4413      	add	r3, r2
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fcc9 	bl	8004950 <ld_dword>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004fc4:	4323      	orrs	r3, r4
 8004fc6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004fd6:	4413      	add	r3, r2
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff fcf6 	bl	80049cc <st_dword>
			fs->wflag = 1;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	711a      	strb	r2, [r3, #4]
			break;
 8004fe6:	e006      	b.n	8004ff6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004fe8:	bf00      	nop
 8004fea:	e004      	b.n	8004ff6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004fec:	bf00      	nop
 8004fee:	e002      	b.n	8004ff6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004ff0:	bf00      	nop
 8004ff2:	e000      	b.n	8004ff6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004ff4:	bf00      	nop
		}
	}
	return res;
 8004ff6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3724      	adds	r7, #36	@ 0x24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd90      	pop	{r4, r7, pc}

08005000 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d904      	bls.n	8005026 <remove_chain+0x26>
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	429a      	cmp	r2, r3
 8005024:	d301      	bcc.n	800502a <remove_chain+0x2a>
 8005026:	2302      	movs	r3, #2
 8005028:	e04b      	b.n	80050c2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00c      	beq.n	800504a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005030:	f04f 32ff 	mov.w	r2, #4294967295
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	69b8      	ldr	r0, [r7, #24]
 8005038:	f7ff fef8 	bl	8004e2c <put_fat>
 800503c:	4603      	mov	r3, r0
 800503e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005040:	7ffb      	ldrb	r3, [r7, #31]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <remove_chain+0x4a>
 8005046:	7ffb      	ldrb	r3, [r7, #31]
 8005048:	e03b      	b.n	80050c2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f7ff fe46 	bl	8004cde <get_fat>
 8005052:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d031      	beq.n	80050be <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <remove_chain+0x64>
 8005060:	2302      	movs	r3, #2
 8005062:	e02e      	b.n	80050c2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d101      	bne.n	8005070 <remove_chain+0x70>
 800506c:	2301      	movs	r3, #1
 800506e:	e028      	b.n	80050c2 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005070:	2200      	movs	r2, #0
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	69b8      	ldr	r0, [r7, #24]
 8005076:	f7ff fed9 	bl	8004e2c <put_fat>
 800507a:	4603      	mov	r3, r0
 800507c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800507e:	7ffb      	ldrb	r3, [r7, #31]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <remove_chain+0x88>
 8005084:	7ffb      	ldrb	r3, [r7, #31]
 8005086:	e01c      	b.n	80050c2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	3b02      	subs	r3, #2
 8005092:	429a      	cmp	r2, r3
 8005094:	d20b      	bcs.n	80050ae <remove_chain+0xae>
			fs->free_clst++;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	795b      	ldrb	r3, [r3, #5]
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d3c6      	bcc.n	800504a <remove_chain+0x4a>
 80050bc:	e000      	b.n	80050c0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80050be:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b088      	sub	sp, #32
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10d      	bne.n	80050fc <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <create_chain+0x2c>
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d31b      	bcc.n	800512e <create_chain+0x64>
 80050f6:	2301      	movs	r3, #1
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	e018      	b.n	800512e <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff fded 	bl	8004cde <get_fat>
 8005104:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d801      	bhi.n	8005110 <create_chain+0x46>
 800510c:	2301      	movs	r3, #1
 800510e:	e0a9      	b.n	8005264 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005116:	d101      	bne.n	800511c <create_chain+0x52>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	e0a3      	b.n	8005264 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	429a      	cmp	r2, r3
 8005124:	d201      	bcs.n	800512a <create_chain+0x60>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	e09c      	b.n	8005264 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <create_chain+0x70>
 8005136:	2300      	movs	r3, #0
 8005138:	e094      	b.n	8005264 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d129      	bne.n	800519a <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	3301      	adds	r3, #1
 800514a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	429a      	cmp	r2, r3
 8005154:	d301      	bcc.n	800515a <create_chain+0x90>
 8005156:	2302      	movs	r3, #2
 8005158:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800515a:	69f9      	ldr	r1, [r7, #28]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff fdbe 	bl	8004cde <get_fat>
 8005162:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d003      	beq.n	8005172 <create_chain+0xa8>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d101      	bne.n	8005176 <create_chain+0xac>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	e076      	b.n	8005264 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00e      	beq.n	800519a <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d906      	bls.n	8005196 <create_chain+0xcc>
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	429a      	cmp	r2, r3
 8005190:	d201      	bcs.n	8005196 <create_chain+0xcc>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d129      	bne.n	80051f4 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	3301      	adds	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d307      	bcc.n	80051c4 <create_chain+0xfa>
					ncl = 2;
 80051b4:	2302      	movs	r3, #2
 80051b6:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d901      	bls.n	80051c4 <create_chain+0xfa>
 80051c0:	2300      	movs	r3, #0
 80051c2:	e04f      	b.n	8005264 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80051c4:	69f9      	ldr	r1, [r7, #28]
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff fd89 	bl	8004cde <get_fat>
 80051cc:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00e      	beq.n	80051f2 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d003      	beq.n	80051e2 <create_chain+0x118>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d101      	bne.n	80051e6 <create_chain+0x11c>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	e03e      	b.n	8005264 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d1da      	bne.n	80051a4 <create_chain+0xda>
 80051ee:	2300      	movs	r3, #0
 80051f0:	e038      	b.n	8005264 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 80051f2:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295
 80051f8:	69f9      	ldr	r1, [r7, #28]
 80051fa:	6938      	ldr	r0, [r7, #16]
 80051fc:	f7ff fe16 	bl	8004e2c <put_fat>
 8005200:	4603      	mov	r3, r0
 8005202:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005204:	7dfb      	ldrb	r3, [r7, #23]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <create_chain+0x154>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d006      	beq.n	800521e <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	6839      	ldr	r1, [r7, #0]
 8005214:	6938      	ldr	r0, [r7, #16]
 8005216:	f7ff fe09 	bl	8004e2c <put_fat>
 800521a:	4603      	mov	r3, r0
 800521c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800521e:	7dfb      	ldrb	r3, [r7, #23]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d116      	bne.n	8005252 <create_chain+0x188>
		fs->last_clst = ncl;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	695a      	ldr	r2, [r3, #20]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	3b02      	subs	r3, #2
 8005234:	429a      	cmp	r2, r3
 8005236:	d804      	bhi.n	8005242 <create_chain+0x178>
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	1e5a      	subs	r2, r3, #1
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	795b      	ldrb	r3, [r3, #5]
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	b2da      	uxtb	r2, r3
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	715a      	strb	r2, [r3, #5]
 8005250:	e007      	b.n	8005262 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005252:	7dfb      	ldrb	r3, [r7, #23]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d102      	bne.n	800525e <create_chain+0x194>
 8005258:	f04f 33ff 	mov.w	r3, #4294967295
 800525c:	e000      	b.n	8005260 <create_chain+0x196>
 800525e:	2301      	movs	r3, #1
 8005260:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005262:	69fb      	ldr	r3, [r7, #28]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3720      	adds	r7, #32
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fc3b 	bl	8004af2 <sync_window>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <dir_clear+0x1a>
 8005282:	2301      	movs	r3, #1
 8005284:	e036      	b.n	80052f4 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8005286:	6839      	ldr	r1, [r7, #0]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff fd09 	bl	8004ca0 <clst2sect>
 800528e:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	635a      	str	r2, [r3, #52]	@ 0x34
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3338      	adds	r3, #56	@ 0x38
 800529a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f002 f83b 	bl	800731c <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3338      	adds	r3, #56	@ 0x38
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	2301      	movs	r3, #1
 80052ae:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	e003      	b.n	80052be <dir_clear+0x52>
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4413      	add	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	895b      	ldrh	r3, [r3, #10]
 80052c2:	461a      	mov	r2, r3
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d20b      	bcs.n	80052e2 <dir_clear+0x76>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	7858      	ldrb	r0, [r3, #1]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	441a      	add	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	f7ff faa7 	bl	800482a <disk_write>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0e9      	beq.n	80052b6 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	895b      	ldrh	r3, [r3, #10]
 80052e6:	461a      	mov	r2, r3
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4293      	cmp	r3, r2
 80052ec:	bf14      	ite	ne
 80052ee:	2301      	movne	r3, #1
 80052f0:	2300      	moveq	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005312:	d204      	bcs.n	800531e <dir_sdi+0x22>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f003 031f 	and.w	r3, r3, #31
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <dir_sdi+0x26>
		return FR_INT_ERR;
 800531e:	2302      	movs	r3, #2
 8005320:	e063      	b.n	80053ea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <dir_sdi+0x46>
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d902      	bls.n	8005342 <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10c      	bne.n	8005362 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	8912      	ldrh	r2, [r2, #8]
 8005350:	4293      	cmp	r3, r2
 8005352:	d301      	bcc.n	8005358 <dir_sdi+0x5c>
 8005354:	2302      	movs	r3, #2
 8005356:	e048      	b.n	80053ea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	619a      	str	r2, [r3, #24]
 8005360:	e029      	b.n	80053b6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	895b      	ldrh	r3, [r3, #10]
 8005366:	025b      	lsls	r3, r3, #9
 8005368:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800536a:	e019      	b.n	80053a0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6979      	ldr	r1, [r7, #20]
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fcb4 	bl	8004cde <get_fat>
 8005376:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	d101      	bne.n	8005384 <dir_sdi+0x88>
 8005380:	2301      	movs	r3, #1
 8005382:	e032      	b.n	80053ea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d904      	bls.n	8005394 <dir_sdi+0x98>
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	429a      	cmp	r2, r3
 8005392:	d301      	bcc.n	8005398 <dir_sdi+0x9c>
 8005394:	2302      	movs	r3, #2
 8005396:	e028      	b.n	80053ea <dir_sdi+0xee>
			ofs -= csz;
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d2e1      	bcs.n	800536c <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 80053a8:	6979      	ldr	r1, [r7, #20]
 80053aa:	6938      	ldr	r0, [r7, #16]
 80053ac:	f7ff fc78 	bl	8004ca0 <clst2sect>
 80053b0:	4602      	mov	r2, r0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <dir_sdi+0xcc>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e010      	b.n	80053ea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699a      	ldr	r2, [r3, #24]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	0a5b      	lsrs	r3, r3, #9
 80053d0:	441a      	add	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e2:	441a      	add	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b086      	sub	sp, #24
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	3320      	adds	r3, #32
 8005408:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005410:	d302      	bcc.n	8005418 <dir_next+0x26>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <dir_next+0x32>
 8005420:	2304      	movs	r3, #4
 8005422:	e078      	b.n	8005516 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542a:	2b00      	cmp	r3, #0
 800542c:	d166      	bne.n	80054fc <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	8912      	ldrh	r2, [r2, #8]
 8005448:	4293      	cmp	r3, r2
 800544a:	d357      	bcc.n	80054fc <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	619a      	str	r2, [r3, #24]
 8005452:	2304      	movs	r3, #4
 8005454:	e05f      	b.n	8005516 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	0a5b      	lsrs	r3, r3, #9
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	8952      	ldrh	r2, [r2, #10]
 800545e:	3a01      	subs	r2, #1
 8005460:	4013      	ands	r3, r2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d14a      	bne.n	80054fc <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f7ff fc35 	bl	8004cde <get_fat>
 8005474:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d801      	bhi.n	8005480 <dir_next+0x8e>
 800547c:	2302      	movs	r3, #2
 800547e:	e04a      	b.n	8005516 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005486:	d101      	bne.n	800548c <dir_next+0x9a>
 8005488:	2301      	movs	r3, #1
 800548a:	e044      	b.n	8005516 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	429a      	cmp	r2, r3
 8005494:	d328      	bcc.n	80054e8 <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d104      	bne.n	80054a6 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	619a      	str	r2, [r3, #24]
 80054a2:	2304      	movs	r3, #4
 80054a4:	e037      	b.n	8005516 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f7ff fe0b 	bl	80050ca <create_chain>
 80054b4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <dir_next+0xce>
 80054bc:	2307      	movs	r3, #7
 80054be:	e02a      	b.n	8005516 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <dir_next+0xd8>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e025      	b.n	8005516 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d101      	bne.n	80054d6 <dir_next+0xe4>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e01f      	b.n	8005516 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 80054d6:	6979      	ldr	r1, [r7, #20]
 80054d8:	6938      	ldr	r0, [r7, #16]
 80054da:	f7ff fec7 	bl	800526c <dir_clear>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <dir_next+0xf6>
 80054e4:	2301      	movs	r3, #1
 80054e6:	e016      	b.n	8005516 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 80054ee:	6979      	ldr	r1, [r7, #20]
 80054f0:	6938      	ldr	r0, [r7, #16]
 80054f2:	f7ff fbd5 	bl	8004ca0 <clst2sect>
 80054f6:	4602      	mov	r2, r0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550e:	441a      	add	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800552e:	2100      	movs	r1, #0
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fee3 	bl	80052fc <dir_sdi>
 8005536:	4603      	mov	r3, r0
 8005538:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800553a:	7dfb      	ldrb	r3, [r7, #23]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d12b      	bne.n	8005598 <dir_alloc+0x7a>
		n = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	4619      	mov	r1, r3
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f7ff fb0d 	bl	8004b6a <move_window>
 8005550:	4603      	mov	r3, r0
 8005552:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005554:	7dfb      	ldrb	r3, [r7, #23]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d11d      	bne.n	8005596 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2be5      	cmp	r3, #229	@ 0xe5
 8005562:	d004      	beq.n	800556e <dir_alloc+0x50>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d107      	bne.n	800557e <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	3301      	adds	r3, #1
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d102      	bne.n	8005582 <dir_alloc+0x64>
 800557c:	e00c      	b.n	8005598 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800557e:	2300      	movs	r3, #0
 8005580:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8005582:	2101      	movs	r1, #1
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff ff34 	bl	80053f2 <dir_next>
 800558a:	4603      	mov	r3, r0
 800558c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800558e:	7dfb      	ldrb	r3, [r7, #23]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0d7      	beq.n	8005544 <dir_alloc+0x26>
 8005594:	e000      	b.n	8005598 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005596:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	2b04      	cmp	r3, #4
 800559c:	d101      	bne.n	80055a2 <dir_alloc+0x84>
 800559e:	2307      	movs	r3, #7
 80055a0:	75fb      	strb	r3, [r7, #23]
	return res;
 80055a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	331a      	adds	r3, #26
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff f9b0 	bl	8004920 <ld_word>
 80055c0:	4603      	mov	r3, r0
 80055c2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d109      	bne.n	80055e0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	3314      	adds	r3, #20
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff f9a5 	bl	8004920 <ld_word>
 80055d6:	4603      	mov	r3, r0
 80055d8:	041b      	lsls	r3, r3, #16
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80055e0:	68fb      	ldr	r3, [r7, #12]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	331a      	adds	r3, #26
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	b292      	uxth	r2, r2
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff f9c8 	bl	8004996 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b03      	cmp	r3, #3
 800560c:	d109      	bne.n	8005622 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f103 0214 	add.w	r2, r3, #20
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	b29b      	uxth	r3, r3
 800561a:	4619      	mov	r1, r3
 800561c:	4610      	mov	r0, r2
 800561e:	f7ff f9ba 	bl	8004996 <st_word>
	}
}
 8005622:	bf00      	nop
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800562c:	b590      	push	{r4, r7, lr}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	331a      	adds	r3, #26
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff f970 	bl	8004920 <ld_word>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <cmp_lfn+0x1e>
 8005646:	2300      	movs	r3, #0
 8005648:	e058      	b.n	80056fc <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005652:	1e5a      	subs	r2, r3, #1
 8005654:	4613      	mov	r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005660:	2301      	movs	r3, #1
 8005662:	81fb      	strh	r3, [r7, #14]
 8005664:	2300      	movs	r3, #0
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	e032      	b.n	80056d0 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800566a:	4a26      	ldr	r2, [pc, #152]	@ (8005704 <cmp_lfn+0xd8>)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	4413      	add	r3, r2
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff f951 	bl	8004920 <ld_word>
 800567e:	4603      	mov	r3, r0
 8005680:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 8005682:	89fb      	ldrh	r3, [r7, #14]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d019      	beq.n	80056bc <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2bff      	cmp	r3, #255	@ 0xff
 800568c:	d811      	bhi.n	80056b2 <cmp_lfn+0x86>
 800568e:	89bb      	ldrh	r3, [r7, #12]
 8005690:	4618      	mov	r0, r3
 8005692:	f001 fda1 	bl	80071d8 <ff_wtoupper>
 8005696:	4604      	mov	r4, r0
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	617a      	str	r2, [r7, #20]
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 fd96 	bl	80071d8 <ff_wtoupper>
 80056ac:	4603      	mov	r3, r0
 80056ae:	429c      	cmp	r4, r3
 80056b0:	d001      	beq.n	80056b6 <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 80056b2:	2300      	movs	r3, #0
 80056b4:	e022      	b.n	80056fc <cmp_lfn+0xd0>
			}
			wc = uc;
 80056b6:	89bb      	ldrh	r3, [r7, #12]
 80056b8:	81fb      	strh	r3, [r7, #14]
 80056ba:	e006      	b.n	80056ca <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80056bc:	89bb      	ldrh	r3, [r7, #12]
 80056be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d001      	beq.n	80056ca <cmp_lfn+0x9e>
 80056c6:	2300      	movs	r3, #0
 80056c8:	e018      	b.n	80056fc <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	3301      	adds	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b0c      	cmp	r3, #12
 80056d4:	d9c9      	bls.n	800566a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <cmp_lfn+0xce>
 80056e2:	89fb      	ldrh	r3, [r7, #14]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <cmp_lfn+0xce>
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4413      	add	r3, r2
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <cmp_lfn+0xce>
 80056f6:	2300      	movs	r3, #0
 80056f8:	e000      	b.n	80056fc <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 80056fa:	2301      	movs	r3, #1
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	bd90      	pop	{r4, r7, pc}
 8005704:	08007438 	.word	0x08007438

08005708 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	4611      	mov	r1, r2
 8005714:	461a      	mov	r2, r3
 8005716:	460b      	mov	r3, r1
 8005718:	71fb      	strb	r3, [r7, #7]
 800571a:	4613      	mov	r3, r2
 800571c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	330d      	adds	r3, #13
 8005722:	79ba      	ldrb	r2, [r7, #6]
 8005724:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	330b      	adds	r3, #11
 800572a:	220f      	movs	r2, #15
 800572c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	330c      	adds	r3, #12
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	331a      	adds	r3, #26
 800573a:	2100      	movs	r1, #0
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff f92a 	bl	8004996 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	1e5a      	subs	r2, r3, #1
 8005746:	4613      	mov	r3, r2
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	82fb      	strh	r3, [r7, #22]
 8005756:	2300      	movs	r3, #0
 8005758:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800575a:	8afb      	ldrh	r3, [r7, #22]
 800575c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005760:	4293      	cmp	r3, r2
 8005762:	d007      	beq.n	8005774 <put_lfn+0x6c>
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	61fa      	str	r2, [r7, #28]
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005774:	4a17      	ldr	r2, [pc, #92]	@ (80057d4 <put_lfn+0xcc>)
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	4413      	add	r3, r2
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4413      	add	r3, r2
 8005782:	8afa      	ldrh	r2, [r7, #22]
 8005784:	4611      	mov	r1, r2
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff f905 	bl	8004996 <st_word>
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
 800578c:	8afb      	ldrh	r3, [r7, #22]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d102      	bne.n	8005798 <put_lfn+0x90>
 8005792:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005796:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	3301      	adds	r3, #1
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b0c      	cmp	r3, #12
 80057a2:	d9da      	bls.n	800575a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80057a4:	8afb      	ldrh	r3, [r7, #22]
 80057a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d006      	beq.n	80057bc <put_lfn+0xb4>
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d103      	bne.n	80057c4 <put_lfn+0xbc>
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057c2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	79fa      	ldrb	r2, [r7, #7]
 80057c8:	701a      	strb	r2, [r3, #0]
}
 80057ca:	bf00      	nop
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	08007438 	.word	0x08007438

080057d8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN in directory form */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08c      	sub	sp, #48	@ 0x30
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sreg;


	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 80057e6:	220b      	movs	r2, #11
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f001 fdd0 	bl	8007390 <memcpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b05      	cmp	r3, #5
 80057f4:	d929      	bls.n	800584a <gen_numname+0x72>
		sreg = seq;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 80057fa:	e020      	b.n	800583e <gen_numname+0x66>
			wc = *lfn++;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	1c9a      	adds	r2, r3, #2
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005806:	2300      	movs	r3, #0
 8005808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800580a:	e015      	b.n	8005838 <gen_numname+0x60>
				sreg = (sreg << 1) + (wc & 1);
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	005a      	lsls	r2, r3, #1
 8005810:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	4413      	add	r3, r2
 8005818:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800581a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800581c:	085b      	lsrs	r3, r3, #1
 800581e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sreg & 0x10000) sreg ^= 0x11021;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <gen_numname+0x5a>
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	4b3c      	ldr	r3, [pc, #240]	@ (8005920 <gen_numname+0x148>)
 800582e:	4053      	eors	r3, r2
 8005830:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	3301      	adds	r3, #1
 8005836:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583a:	2b0f      	cmp	r3, #15
 800583c:	d9e6      	bls.n	800580c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1da      	bne.n	80057fc <gen_numname+0x24>
			}
		}
		seq = (UINT)sreg;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	603b      	str	r3, [r7, #0]
	}

	/* Make suffix (~ + hexadecimal) */
	i = 7;
 800584a:	2307      	movs	r3, #7
 800584c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	b2db      	uxtb	r3, r3
 8005858:	3330      	adds	r3, #48	@ 0x30
 800585a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	091b      	lsrs	r3, r3, #4
 8005862:	603b      	str	r3, [r7, #0]
		if (c > '9') c += 7;
 8005864:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005868:	2b39      	cmp	r3, #57	@ 0x39
 800586a:	d904      	bls.n	8005876 <gen_numname+0x9e>
 800586c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005870:	3307      	adds	r3, #7
 8005872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005878:	1e5a      	subs	r2, r3, #1
 800587a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800587c:	3330      	adds	r3, #48	@ 0x30
 800587e:	443b      	add	r3, r7
 8005880:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005884:	f803 2c1c 	strb.w	r2, [r3, #-28]
	} while (i && seq);
 8005888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <gen_numname+0xbc>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1dc      	bne.n	800584e <gen_numname+0x76>
	ns[i] = '~';
 8005894:	f107 0214 	add.w	r2, r7, #20
 8005898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589a:	4413      	add	r3, r2
 800589c:	227e      	movs	r2, #126	@ 0x7e
 800589e:	701a      	strb	r2, [r3, #0]

	/* Append the suffix to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 80058a0:	2300      	movs	r3, #0
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058a4:	e014      	b.n	80058d0 <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	4413      	add	r3, r2
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff f8b8 	bl	8004a24 <dbc_1st>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <gen_numname+0xf2>
			if (j == i - 1) break;
 80058ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058bc:	3b01      	subs	r3, #1
 80058be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d010      	beq.n	80058e6 <gen_numname+0x10e>
			j++;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	3301      	adds	r3, #1
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	3301      	adds	r3, #1
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d207      	bcs.n	80058e8 <gen_numname+0x110>
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	4413      	add	r3, r2
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d1e0      	bne.n	80058a6 <gen_numname+0xce>
 80058e4:	e000      	b.n	80058e8 <gen_numname+0x110>
			if (j == i - 1) break;
 80058e6:	bf00      	nop
		}
	}
	do {	/* Append the suffix */
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80058e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ea:	2b07      	cmp	r3, #7
 80058ec:	d807      	bhi.n	80058fe <gen_numname+0x126>
 80058ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80058f4:	3330      	adds	r3, #48	@ 0x30
 80058f6:	443b      	add	r3, r7
 80058f8:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80058fc:	e000      	b.n	8005900 <gen_numname+0x128>
 80058fe:	2120      	movs	r1, #32
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	627a      	str	r2, [r7, #36]	@ 0x24
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	460a      	mov	r2, r1
 800590c:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	2b07      	cmp	r3, #7
 8005912:	d9e9      	bls.n	80058e8 <gen_numname+0x110>
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop
 8005918:	3730      	adds	r7, #48	@ 0x30
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	00011021 	.word	0x00011021

08005924 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005930:	230b      	movs	r3, #11
 8005932:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	b2da      	uxtb	r2, r3
 8005938:	0852      	lsrs	r2, r2, #1
 800593a:	01db      	lsls	r3, r3, #7
 800593c:	4313      	orrs	r3, r2
 800593e:	b2da      	uxtb	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	1c59      	adds	r1, r3, #1
 8005944:	6079      	str	r1, [r7, #4]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	4413      	add	r3, r2
 800594a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	3b01      	subs	r3, #1
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1ed      	bne.n	8005934 <sum_sfn+0x10>
	return sum;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b086      	sub	sp, #24
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005974:	2100      	movs	r1, #0
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fcc0 	bl	80052fc <dir_sdi>
 800597c:	4603      	mov	r3, r0
 800597e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <dir_find+0x24>
 8005986:	7dfb      	ldrb	r3, [r7, #23]
 8005988:	e0a9      	b.n	8005ade <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800598a:	23ff      	movs	r3, #255	@ 0xff
 800598c:	753b      	strb	r3, [r7, #20]
 800598e:	7d3b      	ldrb	r3, [r7, #20]
 8005990:	757b      	strb	r3, [r7, #21]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f04f 32ff 	mov.w	r2, #4294967295
 8005998:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	4619      	mov	r1, r3
 80059a0:	6938      	ldr	r0, [r7, #16]
 80059a2:	f7ff f8e2 	bl	8004b6a <move_window>
 80059a6:	4603      	mov	r3, r0
 80059a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80059aa:	7dfb      	ldrb	r3, [r7, #23]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f040 8090 	bne.w	8005ad2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80059ba:	7dbb      	ldrb	r3, [r7, #22]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <dir_find+0x60>
 80059c0:	2304      	movs	r3, #4
 80059c2:	75fb      	strb	r3, [r7, #23]
 80059c4:	e08a      	b.n	8005adc <dir_find+0x176>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	330b      	adds	r3, #11
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059d2:	73fb      	strb	r3, [r7, #15]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	7bfa      	ldrb	r2, [r7, #15]
 80059d8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80059da:	7dbb      	ldrb	r3, [r7, #22]
 80059dc:	2be5      	cmp	r3, #229	@ 0xe5
 80059de:	d007      	beq.n	80059f0 <dir_find+0x8a>
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <dir_find+0x98>
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	2b0f      	cmp	r3, #15
 80059ee:	d006      	beq.n	80059fe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80059f0:	23ff      	movs	r3, #255	@ 0xff
 80059f2:	757b      	strb	r3, [r7, #21]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f04f 32ff 	mov.w	r2, #4294967295
 80059fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80059fc:	e05e      	b.n	8005abc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	2b0f      	cmp	r3, #15
 8005a02:	d136      	bne.n	8005a72 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8005a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d154      	bne.n	8005abc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005a12:	7dbb      	ldrb	r3, [r7, #22]
 8005a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	7b5b      	ldrb	r3, [r3, #13]
 8005a22:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005a24:	7dbb      	ldrb	r3, [r7, #22]
 8005a26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a2a:	75bb      	strb	r3, [r7, #22]
 8005a2c:	7dbb      	ldrb	r3, [r7, #22]
 8005a2e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	62da      	str	r2, [r3, #44]	@ 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005a38:	7dba      	ldrb	r2, [r7, #22]
 8005a3a:	7d7b      	ldrb	r3, [r7, #21]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d115      	bne.n	8005a6c <dir_find+0x106>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	330d      	adds	r3, #13
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	7d3a      	ldrb	r2, [r7, #20]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d10e      	bne.n	8005a6c <dir_find+0x106>
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	4619      	mov	r1, r3
 8005a58:	4610      	mov	r0, r2
 8005a5a:	f7ff fde7 	bl	800562c <cmp_lfn>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <dir_find+0x106>
 8005a64:	7d7b      	ldrb	r3, [r7, #21]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e000      	b.n	8005a6e <dir_find+0x108>
 8005a6c:	23ff      	movs	r3, #255	@ 0xff
 8005a6e:	757b      	strb	r3, [r7, #21]
 8005a70:	e024      	b.n	8005abc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005a72:	7d7b      	ldrb	r3, [r7, #21]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d109      	bne.n	8005a8c <dir_find+0x126>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff ff51 	bl	8005924 <sum_sfn>
 8005a82:	4603      	mov	r3, r0
 8005a84:	461a      	mov	r2, r3
 8005a86:	7d3b      	ldrb	r3, [r7, #20]
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d024      	beq.n	8005ad6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <dir_find+0x14a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69d8      	ldr	r0, [r3, #28]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3320      	adds	r3, #32
 8005aa2:	220b      	movs	r2, #11
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f001 fc29 	bl	80072fc <memcmp>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d014      	beq.n	8005ada <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005ab0:	23ff      	movs	r3, #255	@ 0xff
 8005ab2:	757b      	strb	r3, [r7, #21]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aba:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005abc:	2100      	movs	r1, #0
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff fc97 	bl	80053f2 <dir_next>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f43f af65 	beq.w	800599a <dir_find+0x34>
 8005ad0:	e004      	b.n	8005adc <dir_find+0x176>
		if (res != FR_OK) break;
 8005ad2:	bf00      	nop
 8005ad4:	e002      	b.n	8005adc <dir_find+0x176>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005ad6:	bf00      	nop
 8005ad8:	e000      	b.n	8005adc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005ada:	bf00      	nop

	return res;
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08c      	sub	sp, #48	@ 0x30
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	61fb      	str	r3, [r7, #28]
#if FF_USE_LFN		/* LFN configuration */
	UINT n, len, n_ent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8005afc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <dir_register+0x20>
 8005b04:	2306      	movs	r3, #6
 8005b06:	e0e0      	b.n	8005cca <dir_register+0x1e2>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 8005b08:	2300      	movs	r3, #0
 8005b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b0c:	e002      	b.n	8005b14 <dir_register+0x2c>
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	3301      	adds	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1f4      	bne.n	8005b0e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT/FAT32 volume */
	memcpy(sn, dp->fn, 12);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f103 0220 	add.w	r2, r3, #32
 8005b2a:	f107 030c 	add.w	r3, r7, #12
 8005b2e:	6810      	ldr	r0, [r2, #0]
 8005b30:	6851      	ldr	r1, [r2, #4]
 8005b32:	6892      	ldr	r2, [r2, #8]
 8005b34:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d032      	beq.n	8005ba6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2240      	movs	r2, #64	@ 0x40
 8005b44:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		for (n = 1; n < 100; n++) {
 8005b48:	2301      	movs	r3, #1
 8005b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b4c:	e016      	b.n	8005b7c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f103 0020 	add.w	r0, r3, #32
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	f107 010c 	add.w	r1, r7, #12
 8005b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5e:	f7ff fe3b 	bl	80057d8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff feff 	bl	8005966 <dir_find>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b78:	3301      	adds	r3, #1
 8005b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7e:	2b63      	cmp	r3, #99	@ 0x63
 8005b80:	d9e5      	bls.n	8005b4e <dir_register+0x66>
 8005b82:	e000      	b.n	8005b86 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005b84:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b88:	2b64      	cmp	r3, #100	@ 0x64
 8005b8a:	d101      	bne.n	8005b90 <dir_register+0xa8>
 8005b8c:	2307      	movs	r3, #7
 8005b8e:	e09c      	b.n	8005cca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005b90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d002      	beq.n	8005b9e <dir_register+0xb6>
 8005b98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b9c:	e095      	b.n	8005cca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005b9e:	7dfa      	ldrb	r2, [r7, #23]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	}

	/* Create an SFN with/without LFNs. */
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <dir_register+0xd8>
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	4a47      	ldr	r2, [pc, #284]	@ (8005cd4 <dir_register+0x1ec>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	089b      	lsrs	r3, r3, #2
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <dir_register+0xda>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 8005bc4:	6a39      	ldr	r1, [r7, #32]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fca9 	bl	800551e <dir_alloc>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 8005bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d148      	bne.n	8005c6c <dir_register+0x184>
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	623b      	str	r3, [r7, #32]
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d042      	beq.n	8005c6c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	015b      	lsls	r3, r3, #5
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff fb82 	bl	80052fc <dir_sdi>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d132      	bne.n	8005c6c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3320      	adds	r3, #32
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff fe8a 	bl	8005924 <sum_sfn>
 8005c10:	4603      	mov	r3, r0
 8005c12:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	69f8      	ldr	r0, [r7, #28]
 8005c1c:	f7fe ffa5 	bl	8004b6a <move_window>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005c26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d11d      	bne.n	8005c6a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	68d8      	ldr	r0, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69d9      	ldr	r1, [r3, #28]
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	7efb      	ldrb	r3, [r7, #27]
 8005c3c:	f7ff fd64 	bl	8005708 <put_lfn>
				fs->wflag = 1;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2201      	movs	r2, #1
 8005c44:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8005c46:	2100      	movs	r1, #0
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff fbd2 	bl	80053f2 <dir_next>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --n_ent);
 8005c54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d107      	bne.n	8005c6c <dir_register+0x184>
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	623b      	str	r3, [r7, #32]
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1d5      	bne.n	8005c14 <dir_register+0x12c>
 8005c68:	e000      	b.n	8005c6c <dir_register+0x184>
				if (res != FR_OK) break;
 8005c6a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d128      	bne.n	8005cc6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	69f8      	ldr	r0, [r7, #28]
 8005c7c:	f7fe ff75 	bl	8004b6a <move_window>
 8005c80:	4603      	mov	r3, r0
 8005c82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005c86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d11b      	bne.n	8005cc6 <dir_register+0x1de>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	2220      	movs	r2, #32
 8005c94:	2100      	movs	r1, #0
 8005c96:	4618      	mov	r0, r3
 8005c98:	f001 fb40 	bl	800731c <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69d8      	ldr	r0, [r3, #28]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3320      	adds	r3, #32
 8005ca4:	220b      	movs	r2, #11
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	f001 fb72 	bl	8007390 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	f002 0218 	and.w	r2, r2, #24
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8005cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3730      	adds	r7, #48	@ 0x30
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	4ec4ec4f 	.word	0x4ec4ec4f

08005cd8 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	@ 0x28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
	DWORD uc;
	UINT i, ni, si, di;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60bb      	str	r3, [r7, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8005cf4:	f107 0308 	add.w	r3, r7, #8
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fe feb5 	bl	8004a68 <tchar2uni>
 8005cfe:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d06:	d101      	bne.n	8005d0c <create_name+0x34>
 8005d08:	2306      	movs	r3, #6
 8005d0a:	e209      	b.n	8006120 <create_name+0x448>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d12:	d309      	bcc.n	8005d28 <create_name+0x50>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	0c19      	lsrs	r1, r3, #16
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	617a      	str	r2, [r7, #20]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	b28a      	uxth	r2, r1
 8005d26:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 8005d2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d2e:	2b1f      	cmp	r3, #31
 8005d30:	d920      	bls.n	8005d74 <create_name+0x9c>
 8005d32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d34:	2b2f      	cmp	r3, #47	@ 0x2f
 8005d36:	d01d      	beq.n	8005d74 <create_name+0x9c>
 8005d38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d3a:	2b5c      	cmp	r3, #92	@ 0x5c
 8005d3c:	d01a      	beq.n	8005d74 <create_name+0x9c>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005d3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d40:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d42:	d809      	bhi.n	8005d58 <create_name+0x80>
 8005d44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d46:	4619      	mov	r1, r3
 8005d48:	4894      	ldr	r0, [pc, #592]	@ (8005f9c <create_name+0x2c4>)
 8005d4a:	f001 faef 	bl	800732c <strchr>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <create_name+0x80>
 8005d54:	2306      	movs	r3, #6
 8005d56:	e1e3      	b.n	8006120 <create_name+0x448>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2bfe      	cmp	r3, #254	@ 0xfe
 8005d5c:	d901      	bls.n	8005d62 <create_name+0x8a>
 8005d5e:	2306      	movs	r3, #6
 8005d60:	e1de      	b.n	8006120 <create_name+0x448>
		lfn[di++] = wc;				/* Store the Unicode character */
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	617a      	str	r2, [r7, #20]
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d70:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 8005d72:	e7bf      	b.n	8005cf4 <create_name+0x1c>
	}
	if (wc < ' ') {				/* Stopped at end of the path? */
 8005d74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d76:	2b1f      	cmp	r3, #31
 8005d78:	d806      	bhi.n	8005d88 <create_name+0xb0>
		cf = NS_LAST;			/* Last segment */
 8005d7a:	2304      	movs	r3, #4
 8005d7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005d80:	e014      	b.n	8005dac <create_name+0xd4>
	} else {					/* Stopped at a separator */
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	3301      	adds	r3, #1
 8005d86:	60bb      	str	r3, [r7, #8]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8005d8e:	d0f8      	beq.n	8005d82 <create_name+0xaa>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b5c      	cmp	r3, #92	@ 0x5c
 8005d96:	d0f4      	beq.n	8005d82 <create_name+0xaa>
		cf = 0;					/* Next segment may follow */
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b1f      	cmp	r3, #31
 8005da4:	d802      	bhi.n	8005dac <create_name+0xd4>
 8005da6:	2304      	movs	r3, #4
 8005da8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}
	*path = p;					/* Return pointer to the next segment */
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	601a      	str	r2, [r3, #0]

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d109      	bne.n	8005dcc <create_name+0xf4>
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005dbe:	4413      	add	r3, r2
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dca:	d015      	beq.n	8005df8 <create_name+0x120>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d14d      	bne.n	8005e6e <create_name+0x196>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005dd8:	4413      	add	r3, r2
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4413      	add	r3, r2
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005de4:	d143      	bne.n	8005e6e <create_name+0x196>
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4b6d      	ldr	r3, [pc, #436]	@ (8005fa0 <create_name+0x2c8>)
 8005dea:	4413      	add	r3, r2
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4413      	add	r3, r2
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005df6:	d13a      	bne.n	8005e6e <create_name+0x196>
		lfn[di] = 0;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	2200      	movs	r2, #0
 8005e02:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 8005e04:	2300      	movs	r3, #0
 8005e06:	623b      	str	r3, [r7, #32]
 8005e08:	e00f      	b.n	8005e2a <create_name+0x152>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8005e0a:	6a3a      	ldr	r2, [r7, #32]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d201      	bcs.n	8005e16 <create_name+0x13e>
 8005e12:	212e      	movs	r1, #46	@ 0x2e
 8005e14:	e000      	b.n	8005e18 <create_name+0x140>
 8005e16:	2120      	movs	r1, #32
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	3320      	adds	r3, #32
 8005e20:	460a      	mov	r2, r1
 8005e22:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	3301      	adds	r3, #1
 8005e28:	623b      	str	r3, [r7, #32]
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	2b0a      	cmp	r3, #10
 8005e2e:	d9ec      	bls.n	8005e0a <create_name+0x132>
		}
		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
 8005e30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e34:	f043 0320 	orr.w	r3, r3, #32
 8005e38:	b2d9      	uxtb	r1, r3
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	4413      	add	r3, r2
 8005e40:	3320      	adds	r3, #32
 8005e42:	460a      	mov	r2, r1
 8005e44:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e16a      	b.n	8006120 <create_name+0x448>
	}
#endif
	while (di) {					/* Snip off trailing spaces and dots if exist */
		wc = lfn[di - 1];
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005e50:	4413      	add	r3, r2
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4413      	add	r3, r2
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc != ' ' && wc != '.') break;
 8005e5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d002      	beq.n	8005e68 <create_name+0x190>
 8005e62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e64:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e66:	d106      	bne.n	8005e76 <create_name+0x19e>
		di--;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	617b      	str	r3, [r7, #20]
	while (di) {					/* Snip off trailing spaces and dots if exist */
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1ea      	bne.n	8005e4a <create_name+0x172>
 8005e74:	e000      	b.n	8005e78 <create_name+0x1a0>
		if (wc != ' ' && wc != '.') break;
 8005e76:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4413      	add	r3, r2
 8005e80:	2200      	movs	r2, #0
 8005e82:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <create_name+0x1b6>
 8005e8a:	2306      	movs	r3, #6
 8005e8c:	e148      	b.n	8006120 <create_name+0x448>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	e002      	b.n	8005e9a <create_name+0x1c2>
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	3301      	adds	r3, #1
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d0f5      	beq.n	8005e94 <create_name+0x1bc>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <create_name+0x1e4>
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005eba:	d109      	bne.n	8005ed0 <create_name+0x1f8>
 8005ebc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ec0:	f043 0303 	orr.w	r3, r3, #3
 8005ec4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8005ec8:	e002      	b.n	8005ed0 <create_name+0x1f8>
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <create_name+0x212>
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005edc:	4413      	add	r3, r2
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ee8:	d1ef      	bne.n	8005eca <create_name+0x1f2>

	memset(dp->fn, ' ', 11);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3320      	adds	r3, #32
 8005eee:	220b      	movs	r2, #11
 8005ef0:	2120      	movs	r1, #32
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 fa12 	bl	800731c <memset>
	i = b = 0; ni = 8;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005efe:	2300      	movs	r3, #0
 8005f00:	623b      	str	r3, [r7, #32]
 8005f02:	2308      	movs	r3, #8
 8005f04:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	61ba      	str	r2, [r7, #24]
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4413      	add	r3, r2
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 8005f16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 80b7 	beq.w	800608c <create_name+0x3b4>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8005f1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d006      	beq.n	8005f32 <create_name+0x25a>
 8005f24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f26:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f28:	d10a      	bne.n	8005f40 <create_name+0x268>
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d006      	beq.n	8005f40 <create_name+0x268>
			cf |= NS_LOSS | NS_LFN;
 8005f32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f36:	f043 0303 	orr.w	r3, r3, #3
 8005f3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			continue;
 8005f3e:	e0a4      	b.n	800608a <create_name+0x3b2>
		}

		if (i >= ni || si == di) {		/* End of field? */
 8005f40:	6a3a      	ldr	r2, [r7, #32]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d203      	bcs.n	8005f50 <create_name+0x278>
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d129      	bne.n	8005fa4 <create_name+0x2cc>
			if (ni == 11) {				/* Name extension overflow? */
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2b0b      	cmp	r3, #11
 8005f54:	d106      	bne.n	8005f64 <create_name+0x28c>
				cf |= NS_LOSS | NS_LFN;
 8005f56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f5a:	f043 0303 	orr.w	r3, r3, #3
 8005f5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 8005f62:	e096      	b.n	8006092 <create_name+0x3ba>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d005      	beq.n	8005f78 <create_name+0x2a0>
 8005f6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f70:	f043 0303 	orr.w	r3, r3, #3
 8005f74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;						/* No name extension? */
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	f200 8087 	bhi.w	8006090 <create_name+0x3b8>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	61bb      	str	r3, [r7, #24]
 8005f86:	2308      	movs	r3, #8
 8005f88:	623b      	str	r3, [r7, #32]
 8005f8a:	230b      	movs	r3, #11
 8005f8c:	61fb      	str	r3, [r7, #28]
 8005f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			continue;
 8005f98:	e077      	b.n	800608a <create_name+0x3b2>
 8005f9a:	bf00      	nop
 8005f9c:	080073d4 	.word	0x080073d4
 8005fa0:	7ffffffe 	.word	0x7ffffffe
		}

		if (wc >= 0x80) {	/* Is this an extended character? */
 8005fa4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fa8:	d918      	bls.n	8005fdc <create_name+0x304>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8005faa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fae:	f043 0302 	orr.w	r3, r3, #2
 8005fb2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* In DBCS cfg */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* In SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8005fb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fb8:	f240 3152 	movw	r1, #850	@ 0x352
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 f8a3 	bl	8007108 <ff_uni2oem>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8005fc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <create_name+0x304>
 8005fd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fd6:	4a54      	ldr	r2, [pc, #336]	@ (8006128 <create_name+0x450>)
 8005fd8:	5cd3      	ldrb	r3, [r2, r3]
 8005fda:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else						/* In DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 8005fdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fde:	2bff      	cmp	r3, #255	@ 0xff
 8005fe0:	d91a      	bls.n	8006018 <create_name+0x340>
			if (i >= ni - 1) {			/* Field overflow? */
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	6a3a      	ldr	r2, [r7, #32]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d308      	bcc.n	8005ffe <create_name+0x326>
				cf |= NS_LOSS | NS_LFN;
 8005fec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ff0:	f043 0303 	orr.w	r3, r3, #3
 8005ff4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				i = ni; continue;		/* Next field */
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	623b      	str	r3, [r7, #32]
 8005ffc:	e045      	b.n	800608a <create_name+0x3b2>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8005ffe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006000:	0a1b      	lsrs	r3, r3, #8
 8006002:	b299      	uxth	r1, r3
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	623a      	str	r2, [r7, #32]
 800600a:	b2c9      	uxtb	r1, r1
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	4413      	add	r3, r2
 8006010:	460a      	mov	r2, r1
 8006012:	f883 2020 	strb.w	r2, [r3, #32]
 8006016:	e02e      	b.n	8006076 <create_name+0x39e>
		} else {						/* SBC */
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 8006018:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <create_name+0x356>
 800601e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006020:	4619      	mov	r1, r3
 8006022:	4842      	ldr	r0, [pc, #264]	@ (800612c <create_name+0x454>)
 8006024:	f001 f982 	bl	800732c <strchr>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d008      	beq.n	8006040 <create_name+0x368>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800602e:	235f      	movs	r3, #95	@ 0x5f
 8006030:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006032:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006036:	f043 0303 	orr.w	r3, r3, #3
 800603a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800603e:	e01a      	b.n	8006076 <create_name+0x39e>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8006040:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006042:	2b40      	cmp	r3, #64	@ 0x40
 8006044:	d908      	bls.n	8006058 <create_name+0x380>
 8006046:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006048:	2b5a      	cmp	r3, #90	@ 0x5a
 800604a:	d805      	bhi.n	8006058 <create_name+0x380>
					b |= 2;
 800604c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006050:	f043 0302 	orr.w	r3, r3, #2
 8006054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 8006058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800605a:	2b60      	cmp	r3, #96	@ 0x60
 800605c:	d90b      	bls.n	8006076 <create_name+0x39e>
 800605e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006060:	2b7a      	cmp	r3, #122	@ 0x7a
 8006062:	d808      	bhi.n	8006076 <create_name+0x39e>
					b |= 1; wc -= 0x20;
 8006064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006068:	f043 0301 	orr.w	r3, r3, #1
 800606c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006070:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006072:	3b20      	subs	r3, #32
 8006074:	84bb      	strh	r3, [r7, #36]	@ 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	623a      	str	r2, [r7, #32]
 800607c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800607e:	b2d1      	uxtb	r1, r2
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	4413      	add	r3, r2
 8006084:	460a      	mov	r2, r1
 8006086:	f883 2020 	strb.w	r2, [r3, #32]
		wc = lfn[si++];					/* Get an LFN character */
 800608a:	e73c      	b.n	8005f06 <create_name+0x22e>
		if (wc == 0) break;				/* Break on end of the LFN */
 800608c:	bf00      	nop
 800608e:	e000      	b.n	8006092 <create_name+0x3ba>
			if (si > di) break;						/* No name extension? */
 8006090:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006098:	2be5      	cmp	r3, #229	@ 0xe5
 800609a:	d103      	bne.n	80060a4 <create_name+0x3cc>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2205      	movs	r2, #5
 80060a0:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d104      	bne.n	80060b4 <create_name+0x3dc>
 80060aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 80060b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060b8:	f003 030c 	and.w	r3, r3, #12
 80060bc:	2b0c      	cmp	r3, #12
 80060be:	d005      	beq.n	80060cc <create_name+0x3f4>
 80060c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060c4:	f003 0303 	and.w	r3, r3, #3
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d105      	bne.n	80060d8 <create_name+0x400>
 80060cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80060d0:	f043 0302 	orr.w	r3, r3, #2
 80060d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 80060d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d117      	bne.n	8006114 <create_name+0x43c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 80060e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <create_name+0x424>
 80060f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80060f4:	f043 0310 	orr.w	r3, r3, #16
 80060f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 80060fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <create_name+0x43c>
 8006108:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800610c:	f043 0308 	orr.w	r3, r3, #8
 8006110:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800611a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	return FR_OK;
 800611e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 8006120:	4618      	mov	r0, r3
 8006122:	3728      	adds	r7, #40	@ 0x28
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	08007448 	.word	0x08007448
 800612c:	080073e0 	.word	0x080073e0

08006130 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	613b      	str	r3, [r7, #16]


#if FF_FS_RPATH != 0
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b2f      	cmp	r3, #47	@ 0x2f
 8006146:	d00b      	beq.n	8006160 <follow_path+0x30>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b5c      	cmp	r3, #92	@ 0x5c
 800614e:	d007      	beq.n	8006160 <follow_path+0x30>
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	699a      	ldr	r2, [r3, #24]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	609a      	str	r2, [r3, #8]
 8006158:	e00d      	b.n	8006176 <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	3301      	adds	r3, #1
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b2f      	cmp	r3, #47	@ 0x2f
 8006166:	d0f8      	beq.n	800615a <follow_path+0x2a>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b5c      	cmp	r3, #92	@ 0x5c
 800616e:	d0f4      	beq.n	800615a <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b1f      	cmp	r3, #31
 800617c:	d80a      	bhi.n	8006194 <follow_path+0x64>
		dp->fn[NSFLAG] = NS_NONAME;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2280      	movs	r2, #128	@ 0x80
 8006182:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8006186:	2100      	movs	r1, #0
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff f8b7 	bl	80052fc <dir_sdi>
 800618e:	4603      	mov	r3, r0
 8006190:	75fb      	strb	r3, [r7, #23]
 8006192:	e056      	b.n	8006242 <follow_path+0x112>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006194:	463b      	mov	r3, r7
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff fd9d 	bl	8005cd8 <create_name>
 800619e:	4603      	mov	r3, r0
 80061a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d147      	bne.n	8006238 <follow_path+0x108>
			res = dir_find(dp);				/* Find an object with the segment name */
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff fbdc 	bl	8005966 <dir_find>
 80061ae:	4603      	mov	r3, r0
 80061b0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80061b8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01b      	beq.n	80061f8 <follow_path+0xc8>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d13a      	bne.n	800623c <follow_path+0x10c>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	f003 0320 	and.w	r3, r3, #32
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <follow_path+0xb8>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d02c      	beq.n	8006234 <follow_path+0x104>
						dp->fn[NSFLAG] = NS_NONAME;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2280      	movs	r2, #128	@ 0x80
 80061de:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
						res = FR_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80061e6:	e029      	b.n	800623c <follow_path+0x10c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d124      	bne.n	800623c <follow_path+0x10c>
 80061f2:	2305      	movs	r3, #5
 80061f4:	75fb      	strb	r3, [r7, #23]
				break;
 80061f6:	e021      	b.n	800623c <follow_path+0x10c>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	f003 0304 	and.w	r3, r3, #4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d11e      	bne.n	8006240 <follow_path+0x110>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	799b      	ldrb	r3, [r3, #6]
 8006206:	f003 0310 	and.w	r3, r3, #16
 800620a:	2b00      	cmp	r3, #0
 800620c:	d102      	bne.n	8006214 <follow_path+0xe4>
				res = FR_NO_PATH; break;
 800620e:	2305      	movs	r3, #5
 8006210:	75fb      	strb	r3, [r7, #23]
 8006212:	e016      	b.n	8006242 <follow_path+0x112>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006222:	4413      	add	r3, r2
 8006224:	4619      	mov	r1, r3
 8006226:	6938      	ldr	r0, [r7, #16]
 8006228:	f7ff f9c0 	bl	80055ac <ld_clust>
 800622c:	4602      	mov	r2, r0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	609a      	str	r2, [r3, #8]
 8006232:	e7af      	b.n	8006194 <follow_path+0x64>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8006234:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006236:	e7ad      	b.n	8006194 <follow_path+0x64>
			if (res != FR_OK) break;
 8006238:	bf00      	nop
 800623a:	e002      	b.n	8006242 <follow_path+0x112>
				break;
 800623c:	bf00      	nop
 800623e:	e000      	b.n	8006242 <follow_path+0x112>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8006240:	bf00      	nop
			}
		}
	}

	return res;
 8006242:	7dfb      	ldrb	r3, [r7, #23]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800624c:	b480      	push	{r7}
 800624e:	b089      	sub	sp, #36	@ 0x24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8006254:	f04f 33ff 	mov.w	r3, #4294967295
 8006258:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <get_ldnumber+0x22>
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	e02e      	b.n	80062cc <get_ldnumber+0x80>
	do {					/* Find a colon in the path */
		tc = *tt++;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	61fa      	str	r2, [r7, #28]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	2b1f      	cmp	r3, #31
 800627c:	d902      	bls.n	8006284 <get_ldnumber+0x38>
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	2b3a      	cmp	r3, #58	@ 0x3a
 8006282:	d1f4      	bne.n	800626e <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b3a      	cmp	r3, #58	@ 0x3a
 8006288:	d11c      	bne.n	80062c4 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800628a:	2301      	movs	r3, #1
 800628c:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b2f      	cmp	r3, #47	@ 0x2f
 8006294:	d90c      	bls.n	80062b0 <get_ldnumber+0x64>
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b39      	cmp	r3, #57	@ 0x39
 800629c:	d808      	bhi.n	80062b0 <get_ldnumber+0x64>
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	3302      	adds	r3, #2
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d103      	bne.n	80062b0 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	3b30      	subs	r3, #48	@ 0x30
 80062ae:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	dc04      	bgt.n	80062c0 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	e003      	b.n	80062cc <get_ldnumber+0x80>
		return vol;
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 80062c4:	4b04      	ldr	r3, [pc, #16]	@ (80062d8 <get_ldnumber+0x8c>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 80062ca:	697b      	ldr	r3, [r7, #20]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3724      	adds	r7, #36	@ 0x24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	20020526 	.word	0x20020526

080062dc <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	711a      	strb	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f04f 32ff 	mov.w	r2, #4294967295
 80062f2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7fe fc37 	bl	8004b6a <move_window>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <check_fs+0x2a>
 8006302:	2304      	movs	r3, #4
 8006304:	e088      	b.n	8006418 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3338      	adds	r3, #56	@ 0x38
 800630a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800630e:	4618      	mov	r0, r3
 8006310:	f7fe fb06 	bl	8004920 <ld_word>
 8006314:	4603      	mov	r3, r0
 8006316:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800631e:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8006320:	7b7b      	ldrb	r3, [r7, #13]
 8006322:	2beb      	cmp	r3, #235	@ 0xeb
 8006324:	d005      	beq.n	8006332 <check_fs+0x56>
 8006326:	7b7b      	ldrb	r3, [r7, #13]
 8006328:	2be9      	cmp	r3, #233	@ 0xe9
 800632a:	d002      	beq.n	8006332 <check_fs+0x56>
 800632c:	7b7b      	ldrb	r3, [r7, #13]
 800632e:	2be8      	cmp	r3, #232	@ 0xe8
 8006330:	d16a      	bne.n	8006408 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8006332:	89fb      	ldrh	r3, [r7, #14]
 8006334:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8006338:	4293      	cmp	r3, r2
 800633a:	d10c      	bne.n	8006356 <check_fs+0x7a>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3338      	adds	r3, #56	@ 0x38
 8006340:	3352      	adds	r3, #82	@ 0x52
 8006342:	2208      	movs	r2, #8
 8006344:	4936      	ldr	r1, [pc, #216]	@ (8006420 <check_fs+0x144>)
 8006346:	4618      	mov	r0, r3
 8006348:	f000 ffd8 	bl	80072fc <memcmp>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 8006352:	2300      	movs	r3, #0
 8006354:	e060      	b.n	8006418 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3338      	adds	r3, #56	@ 0x38
 800635a:	330b      	adds	r3, #11
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe fadf 	bl	8004920 <ld_word>
 8006362:	4603      	mov	r3, r0
 8006364:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800636c:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800636e:	897a      	ldrh	r2, [r7, #10]
 8006370:	897b      	ldrh	r3, [r7, #10]
 8006372:	3b01      	subs	r3, #1
 8006374:	4013      	ands	r3, r2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d146      	bne.n	8006408 <check_fs+0x12c>
 800637a:	897b      	ldrh	r3, [r7, #10]
 800637c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006380:	d342      	bcc.n	8006408 <check_fs+0x12c>
 8006382:	897b      	ldrh	r3, [r7, #10]
 8006384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006388:	d83e      	bhi.n	8006408 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800638a:	7b7b      	ldrb	r3, [r7, #13]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d03b      	beq.n	8006408 <check_fs+0x12c>
 8006390:	7b7a      	ldrb	r2, [r7, #13]
 8006392:	7b7b      	ldrb	r3, [r7, #13]
 8006394:	3b01      	subs	r3, #1
 8006396:	4013      	ands	r3, r2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d135      	bne.n	8006408 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3338      	adds	r3, #56	@ 0x38
 80063a0:	330e      	adds	r3, #14
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fabc 	bl	8004920 <ld_word>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d02c      	beq.n	8006408 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80063b4:	3b01      	subs	r3, #1
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d826      	bhi.n	8006408 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3338      	adds	r3, #56	@ 0x38
 80063be:	3311      	adds	r3, #17
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fe faad 	bl	8004920 <ld_word>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01d      	beq.n	8006408 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3338      	adds	r3, #56	@ 0x38
 80063d0:	3313      	adds	r3, #19
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe faa4 	bl	8004920 <ld_word>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b7f      	cmp	r3, #127	@ 0x7f
 80063dc:	d809      	bhi.n	80063f2 <check_fs+0x116>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3338      	adds	r3, #56	@ 0x38
 80063e2:	3320      	adds	r3, #32
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe fab3 	bl	8004950 <ld_dword>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063f0:	d30a      	bcc.n	8006408 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	3338      	adds	r3, #56	@ 0x38
 80063f6:	3316      	adds	r3, #22
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe fa91 	bl	8004920 <ld_word>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 8006404:	2300      	movs	r3, #0
 8006406:	e007      	b.n	8006418 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8006408:	89fb      	ldrh	r3, [r7, #14]
 800640a:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800640e:	4293      	cmp	r3, r2
 8006410:	d101      	bne.n	8006416 <check_fs+0x13a>
 8006412:	2302      	movs	r3, #2
 8006414:	e000      	b.n	8006418 <check_fs+0x13c>
 8006416:	2303      	movs	r3, #3
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	080073e8 	.word	0x080073e8

08006424 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800642e:	2100      	movs	r1, #0
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff ff53 	bl	80062dc <check_fs>
 8006436:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	2b02      	cmp	r3, #2
 800643c:	d007      	beq.n	800644e <find_volume+0x2a>
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b02      	cmp	r3, #2
 8006442:	d802      	bhi.n	800644a <find_volume+0x26>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <find_volume+0x2a>
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	e045      	b.n	80064da <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	e014      	b.n	800647e <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 8006462:	4413      	add	r3, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe fa73 	bl	8004950 <ld_dword>
 800646a:	4602      	mov	r2, r0
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	3320      	adds	r3, #32
 8006472:	443b      	add	r3, r7
 8006474:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	3301      	adds	r3, #1
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	2b03      	cmp	r3, #3
 8006482:	d9e7      	bls.n	8006454 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <find_volume+0x6c>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	3b01      	subs	r3, #1
 800648e:	e000      	b.n	8006492 <find_volume+0x6e>
 8006490:	2300      	movs	r3, #0
 8006492:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	3320      	adds	r3, #32
 800649a:	443b      	add	r3, r7
 800649c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <find_volume+0x98>
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	3320      	adds	r3, #32
 80064aa:	443b      	add	r3, r7
 80064ac:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff ff12 	bl	80062dc <check_fs>
 80064b8:	4603      	mov	r3, r0
 80064ba:	e000      	b.n	80064be <find_volume+0x9a>
 80064bc:	2303      	movs	r3, #3
 80064be:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d108      	bne.n	80064d8 <find_volume+0xb4>
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d905      	bls.n	80064d8 <find_volume+0xb4>
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	3301      	adds	r3, #1
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d9dd      	bls.n	8006494 <find_volume+0x70>
	return fmt;
 80064d8:	69bb      	ldr	r3, [r7, #24]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b090      	sub	sp, #64	@ 0x40
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7ff fea7 	bl	800624c <get_ldnumber>
 80064fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006502:	2b00      	cmp	r3, #0
 8006504:	da01      	bge.n	800650a <mount_volume+0x26>
 8006506:	230b      	movs	r3, #11
 8006508:	e1e2      	b.n	80068d0 <mount_volume+0x3ec>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800650a:	4a9d      	ldr	r2, [pc, #628]	@ (8006780 <mount_volume+0x29c>)
 800650c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006512:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8006514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <mount_volume+0x3a>
 800651a:	230c      	movs	r3, #12
 800651c:	e1d8      	b.n	80068d0 <mount_volume+0x3ec>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006522:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	f023 0301 	bic.w	r3, r3, #1
 800652a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01a      	beq.n	800656a <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 8006534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	4618      	mov	r0, r3
 800653a:	f7fe f927 	bl	800478c <disk_status>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10c      	bne.n	800656a <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d007      	beq.n	8006566 <mount_volume+0x82>
 8006556:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800655a:	f003 0304 	and.w	r3, r3, #4
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006562:	230a      	movs	r3, #10
 8006564:	e1b4      	b.n	80068d0 <mount_volume+0x3ec>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8006566:	2300      	movs	r3, #0
 8006568:	e1b2      	b.n	80068d0 <mount_volume+0x3ec>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800656a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656c:	2200      	movs	r2, #0
 800656e:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8006570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	4618      	mov	r0, r3
 8006576:	f7fe f91f 	bl	80047b8 <disk_initialize>
 800657a:	4603      	mov	r3, r0
 800657c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800658c:	2303      	movs	r3, #3
 800658e:	e19f      	b.n	80068d0 <mount_volume+0x3ec>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <mount_volume+0xc2>
 8006596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 80065a2:	230a      	movs	r3, #10
 80065a4:	e194      	b.n	80068d0 <mount_volume+0x3ec>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 80065a6:	2100      	movs	r1, #0
 80065a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065aa:	f7ff ff3b 	bl	8006424 <find_volume>
 80065ae:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d101      	bne.n	80065ba <mount_volume+0xd6>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e18a      	b.n	80068d0 <mount_volume+0x3ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80065ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d901      	bls.n	80065c4 <mount_volume+0xe0>
 80065c0:	230d      	movs	r3, #13
 80065c2:	e185      	b.n	80068d0 <mount_volume+0x3ec>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 80065c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c8:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80065ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065cc:	3338      	adds	r3, #56	@ 0x38
 80065ce:	330b      	adds	r3, #11
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe f9a5 	bl	8004920 <ld_word>
 80065d6:	4603      	mov	r3, r0
 80065d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065dc:	d001      	beq.n	80065e2 <mount_volume+0xfe>
 80065de:	230d      	movs	r3, #13
 80065e0:	e176      	b.n	80068d0 <mount_volume+0x3ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80065e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e4:	3338      	adds	r3, #56	@ 0x38
 80065e6:	3316      	adds	r3, #22
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fe f999 	bl	8004920 <ld_word>
 80065ee:	4603      	mov	r3, r0
 80065f0:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80065f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d106      	bne.n	8006606 <mount_volume+0x122>
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	3338      	adds	r3, #56	@ 0x38
 80065fc:	3324      	adds	r3, #36	@ 0x24
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fe f9a6 	bl	8004950 <ld_dword>
 8006604:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 8006606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006608:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800660a:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006614:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006618:	78db      	ldrb	r3, [r3, #3]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d005      	beq.n	800662a <mount_volume+0x146>
 800661e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006620:	78db      	ldrb	r3, [r3, #3]
 8006622:	2b02      	cmp	r3, #2
 8006624:	d001      	beq.n	800662a <mount_volume+0x146>
 8006626:	230d      	movs	r3, #13
 8006628:	e152      	b.n	80068d0 <mount_volume+0x3ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	78db      	ldrb	r3, [r3, #3]
 800662e:	461a      	mov	r2, r3
 8006630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006632:	fb02 f303 	mul.w	r3, r2, r3
 8006636:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800663e:	461a      	mov	r2, r3
 8006640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006642:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006646:	895b      	ldrh	r3, [r3, #10]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d008      	beq.n	800665e <mount_volume+0x17a>
 800664c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664e:	895b      	ldrh	r3, [r3, #10]
 8006650:	461a      	mov	r2, r3
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	895b      	ldrh	r3, [r3, #10]
 8006656:	3b01      	subs	r3, #1
 8006658:	4013      	ands	r3, r2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <mount_volume+0x17e>
 800665e:	230d      	movs	r3, #13
 8006660:	e136      	b.n	80068d0 <mount_volume+0x3ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006664:	3338      	adds	r3, #56	@ 0x38
 8006666:	3311      	adds	r3, #17
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe f959 	bl	8004920 <ld_word>
 800666e:	4603      	mov	r3, r0
 8006670:	461a      	mov	r2, r3
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	891b      	ldrh	r3, [r3, #8]
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	b29b      	uxth	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <mount_volume+0x1a4>
 8006684:	230d      	movs	r3, #13
 8006686:	e123      	b.n	80068d0 <mount_volume+0x3ec>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	3338      	adds	r3, #56	@ 0x38
 800668c:	3313      	adds	r3, #19
 800668e:	4618      	mov	r0, r3
 8006690:	f7fe f946 	bl	8004920 <ld_word>
 8006694:	4603      	mov	r3, r0
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <mount_volume+0x1c8>
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	3338      	adds	r3, #56	@ 0x38
 80066a2:	3320      	adds	r3, #32
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe f953 	bl	8004950 <ld_dword>
 80066aa:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80066ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ae:	3338      	adds	r3, #56	@ 0x38
 80066b0:	330e      	adds	r3, #14
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fe f934 	bl	8004920 <ld_word>
 80066b8:	4603      	mov	r3, r0
 80066ba:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80066bc:	8bfb      	ldrh	r3, [r7, #30]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <mount_volume+0x1e2>
 80066c2:	230d      	movs	r3, #13
 80066c4:	e104      	b.n	80068d0 <mount_volume+0x3ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80066c6:	8bfa      	ldrh	r2, [r7, #30]
 80066c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ca:	4413      	add	r3, r2
 80066cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066ce:	8912      	ldrh	r2, [r2, #8]
 80066d0:	0912      	lsrs	r2, r2, #4
 80066d2:	b292      	uxth	r2, r2
 80066d4:	4413      	add	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80066d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d201      	bcs.n	80066e4 <mount_volume+0x200>
 80066e0:	230d      	movs	r3, #13
 80066e2:	e0f5      	b.n	80068d0 <mount_volume+0x3ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80066e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066ec:	8952      	ldrh	r2, [r2, #10]
 80066ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80066f2:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <mount_volume+0x21a>
 80066fa:	230d      	movs	r3, #13
 80066fc:	e0e8      	b.n	80068d0 <mount_volume+0x3ec>
		fmt = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	4a1f      	ldr	r2, [pc, #124]	@ (8006784 <mount_volume+0x2a0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d801      	bhi.n	800670e <mount_volume+0x22a>
 800670a:	2303      	movs	r3, #3
 800670c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006714:	4293      	cmp	r3, r2
 8006716:	d801      	bhi.n	800671c <mount_volume+0x238>
 8006718:	2302      	movs	r3, #2
 800671a:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006722:	4293      	cmp	r3, r2
 8006724:	d801      	bhi.n	800672a <mount_volume+0x246>
 8006726:	2301      	movs	r3, #1
 8006728:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800672a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <mount_volume+0x250>
 8006730:	230d      	movs	r3, #13
 8006732:	e0cd      	b.n	80068d0 <mount_volume+0x3ec>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	1c9a      	adds	r2, r3, #2
 8006738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800673c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673e:	6a3a      	ldr	r2, [r7, #32]
 8006740:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006742:	8bfa      	ldrh	r2, [r7, #30]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	441a      	add	r2, r3
 8006748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674a:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800674c:	6a3a      	ldr	r2, [r7, #32]
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	441a      	add	r2, r3
 8006752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006754:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006758:	2b03      	cmp	r3, #3
 800675a:	d123      	bne.n	80067a4 <mount_volume+0x2c0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	3338      	adds	r3, #56	@ 0x38
 8006760:	332a      	adds	r3, #42	@ 0x2a
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe f8dc 	bl	8004920 <ld_word>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <mount_volume+0x28e>
 800676e:	230d      	movs	r3, #13
 8006770:	e0ae      	b.n	80068d0 <mount_volume+0x3ec>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006774:	891b      	ldrh	r3, [r3, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d006      	beq.n	8006788 <mount_volume+0x2a4>
 800677a:	230d      	movs	r3, #13
 800677c:	e0a8      	b.n	80068d0 <mount_volume+0x3ec>
 800677e:	bf00      	nop
 8006780:	20020520 	.word	0x20020520
 8006784:	0ffffff5 	.word	0x0ffffff5
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	3338      	adds	r3, #56	@ 0x38
 800678c:	332c      	adds	r3, #44	@ 0x2c
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe f8de 	bl	8004950 <ld_dword>
 8006794:	4602      	mov	r2, r0
 8006796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006798:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800679a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a2:	e01e      	b.n	80067e2 <mount_volume+0x2fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80067a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a6:	891b      	ldrh	r3, [r3, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <mount_volume+0x2cc>
 80067ac:	230d      	movs	r3, #13
 80067ae:	e08f      	b.n	80068d0 <mount_volume+0x3ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b6:	441a      	add	r2, r3
 80067b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ba:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80067bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d103      	bne.n	80067ca <mount_volume+0x2e6>
 80067c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	e00a      	b.n	80067e0 <mount_volume+0x2fc>
 80067ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067cc:	69da      	ldr	r2, [r3, #28]
 80067ce:	4613      	mov	r3, r2
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	4413      	add	r3, r2
 80067d4:	085a      	lsrs	r2, r3, #1
 80067d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80067e0:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	6a1a      	ldr	r2, [r3, #32]
 80067e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e8:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80067ec:	0a5b      	lsrs	r3, r3, #9
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d201      	bcs.n	80067f6 <mount_volume+0x312>
 80067f2:	230d      	movs	r3, #13
 80067f4:	e06c      	b.n	80068d0 <mount_volume+0x3ec>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f8:	f04f 32ff 	mov.w	r2, #4294967295
 80067fc:	615a      	str	r2, [r3, #20]
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	695a      	ldr	r2, [r3, #20]
 8006802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006804:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006808:	2280      	movs	r2, #128	@ 0x80
 800680a:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800680c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680e:	2b03      	cmp	r3, #3
 8006810:	d149      	bne.n	80068a6 <mount_volume+0x3c2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006814:	3338      	adds	r3, #56	@ 0x38
 8006816:	3330      	adds	r3, #48	@ 0x30
 8006818:	4618      	mov	r0, r3
 800681a:	f7fe f881 	bl	8004920 <ld_word>
 800681e:	4603      	mov	r3, r0
 8006820:	2b01      	cmp	r3, #1
 8006822:	d140      	bne.n	80068a6 <mount_volume+0x3c2>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	3301      	adds	r3, #1
 8006828:	4619      	mov	r1, r3
 800682a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800682c:	f7fe f99d 	bl	8004b6a <move_window>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d137      	bne.n	80068a6 <mount_volume+0x3c2>
		{
			fs->fsi_flag = 0;
 8006836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006838:	2200      	movs	r2, #0
 800683a:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800683c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683e:	3338      	adds	r3, #56	@ 0x38
 8006840:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe f86b 	bl	8004920 <ld_word>
 800684a:	4603      	mov	r3, r0
 800684c:	461a      	mov	r2, r3
 800684e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006852:	429a      	cmp	r2, r3
 8006854:	d127      	bne.n	80068a6 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006858:	3338      	adds	r3, #56	@ 0x38
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe f878 	bl	8004950 <ld_dword>
 8006860:	4603      	mov	r3, r0
 8006862:	4a1d      	ldr	r2, [pc, #116]	@ (80068d8 <mount_volume+0x3f4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d11e      	bne.n	80068a6 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686a:	3338      	adds	r3, #56	@ 0x38
 800686c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe f86d 	bl	8004950 <ld_dword>
 8006876:	4603      	mov	r3, r0
 8006878:	4a18      	ldr	r2, [pc, #96]	@ (80068dc <mount_volume+0x3f8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d113      	bne.n	80068a6 <mount_volume+0x3c2>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006880:	3338      	adds	r3, #56	@ 0x38
 8006882:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe f862 	bl	8004950 <ld_dword>
 800688c:	4602      	mov	r2, r0
 800688e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006890:	615a      	str	r2, [r3, #20]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006894:	3338      	adds	r3, #56	@ 0x38
 8006896:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800689a:	4618      	mov	r0, r3
 800689c:	f7fe f858 	bl	8004950 <ld_dword>
 80068a0:	4602      	mov	r2, r0
 80068a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80068ae:	4b0c      	ldr	r3, [pc, #48]	@ (80068e0 <mount_volume+0x3fc>)
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	3301      	adds	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	4b0a      	ldr	r3, [pc, #40]	@ (80068e0 <mount_volume+0x3fc>)
 80068b8:	801a      	strh	r2, [r3, #0]
 80068ba:	4b09      	ldr	r3, [pc, #36]	@ (80068e0 <mount_volume+0x3fc>)
 80068bc:	881a      	ldrh	r2, [r3, #0]
 80068be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c0:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80068c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c4:	4a07      	ldr	r2, [pc, #28]	@ (80068e4 <mount_volume+0x400>)
 80068c6:	60da      	str	r2, [r3, #12]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80068c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ca:	2200      	movs	r2, #0
 80068cc:	619a      	str	r2, [r3, #24]
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3740      	adds	r7, #64	@ 0x40
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	41615252 	.word	0x41615252
 80068dc:	61417272 	.word	0x61417272
 80068e0:	20020524 	.word	0x20020524
 80068e4:	20020528 	.word	0x20020528

080068e8 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80068f2:	2309      	movs	r3, #9
 80068f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01c      	beq.n	8006936 <validate+0x4e>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d018      	beq.n	8006936 <validate+0x4e>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d013      	beq.n	8006936 <validate+0x4e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	889a      	ldrh	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	88db      	ldrh	r3, [r3, #6]
 8006918:	429a      	cmp	r2, r3
 800691a:	d10c      	bne.n	8006936 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	785b      	ldrb	r3, [r3, #1]
 8006922:	4618      	mov	r0, r3
 8006924:	f7fd ff32 	bl	800478c <disk_status>
 8006928:	4603      	mov	r3, r0
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <validate+0x4e>
			res = FR_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d102      	bne.n	8006942 <validate+0x5a>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	e000      	b.n	8006944 <validate+0x5c>
 8006942:	2300      	movs	r3, #0
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	6013      	str	r3, [r2, #0]
	return res;
 8006948:	7bfb      	ldrb	r3, [r7, #15]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	4613      	mov	r3, r2
 8006960:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8006966:	f107 0310 	add.w	r3, r7, #16
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff fc6e 	bl	800624c <get_ldnumber>
 8006970:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	2b00      	cmp	r3, #0
 8006976:	da01      	bge.n	800697c <f_mount+0x28>
 8006978:	230b      	movs	r3, #11
 800697a:	e02e      	b.n	80069da <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800697c:	4a19      	ldr	r2, [pc, #100]	@ (80069e4 <f_mount+0x90>)
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006984:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <f_mount+0x48>
		FatFs[vol] = 0;
 800698c:	4a15      	ldr	r2, [pc, #84]	@ (80069e4 <f_mount+0x90>)
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	2100      	movs	r1, #0
 8006992:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2200      	movs	r2, #0
 800699a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00b      	beq.n	80069ba <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	490c      	ldr	r1, [pc, #48]	@ (80069e4 <f_mount+0x90>)
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <f_mount+0x70>
 80069c0:	2300      	movs	r3, #0
 80069c2:	e00a      	b.n	80069da <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 80069c4:	f107 010c 	add.w	r1, r7, #12
 80069c8:	f107 0308 	add.w	r3, r7, #8
 80069cc:	2200      	movs	r2, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff fd88 	bl	80064e4 <mount_volume>
 80069d4:	4603      	mov	r3, r0
 80069d6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3720      	adds	r7, #32
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20020520 	.word	0x20020520

080069e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b098      	sub	sp, #96	@ 0x60
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <f_open+0x18>
 80069fc:	2309      	movs	r3, #9
 80069fe:	e177      	b.n	8006cf0 <f_open+0x308>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a06:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8006a08:	79fa      	ldrb	r2, [r7, #7]
 8006a0a:	f107 0110 	add.w	r1, r7, #16
 8006a0e:	f107 0308 	add.w	r3, r7, #8
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7ff fd66 	bl	80064e4 <mount_volume>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006a1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f040 815b 	bne.w	8006cde <f_open+0x2f6>
		dj.obj.fs = fs;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	f107 0314 	add.w	r3, r7, #20
 8006a32:	4611      	mov	r1, r2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7ff fb7b 	bl	8006130 <follow_path>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8006a40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d107      	bne.n	8006a58 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006a48:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006a4c:	b25b      	sxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	da02      	bge.n	8006a58 <f_open+0x70>
				res = FR_INVALID_NAME;
 8006a52:	2306      	movs	r3, #6
 8006a54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	f003 031c 	and.w	r3, r3, #28
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d078      	beq.n	8006b54 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 8006a62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d010      	beq.n	8006a8c <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d107      	bne.n	8006a82 <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8006a72:	f107 0314 	add.w	r3, r7, #20
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff f836 	bl	8005ae8 <dir_register>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006a82:	79fb      	ldrb	r3, [r7, #7]
 8006a84:	f043 0308 	orr.w	r3, r3, #8
 8006a88:	71fb      	strb	r3, [r7, #7]
 8006a8a:	e010      	b.n	8006aae <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006a8c:	7ebb      	ldrb	r3, [r7, #26]
 8006a8e:	f003 0311 	and.w	r3, r3, #17
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <f_open+0xb6>
					res = FR_DENIED;
 8006a96:	2307      	movs	r3, #7
 8006a98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006a9c:	e007      	b.n	8006aae <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006a9e:	79fb      	ldrb	r3, [r7, #7]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <f_open+0xc6>
 8006aa8:	2308      	movs	r3, #8
 8006aaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8006aae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d168      	bne.n	8006b88 <f_open+0x1a0>
 8006ab6:	79fb      	ldrb	r3, [r7, #7]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d063      	beq.n	8006b88 <f_open+0x1a0>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 8006ac0:	f7fd ff26 	bl	8004910 <get_fattime>
 8006ac4:	6538      	str	r0, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	330e      	adds	r3, #14
 8006aca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fd ff7d 	bl	80049cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	3316      	adds	r3, #22
 8006ad6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fd ff77 	bl	80049cc <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe fd61 	bl	80055ac <ld_clust>
 8006aea:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	330b      	adds	r3, #11
 8006af0:	2220      	movs	r2, #32
 8006af2:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006af8:	2200      	movs	r2, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe fd75 	bl	80055ea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b02:	331c      	adds	r3, #28
 8006b04:	2100      	movs	r1, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fd ff60 	bl	80049cc <st_dword>
					fs->wflag = 1;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8006b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d037      	beq.n	8006b88 <f_open+0x1a0>
						sc = fs->winsect;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8006b1e:	f107 0314 	add.w	r3, r7, #20
 8006b22:	2200      	movs	r2, #0
 8006b24:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fe fa6a 	bl	8005000 <remove_chain>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8006b32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d126      	bne.n	8006b88 <f_open+0x1a0>
							res = move_window(fs, sc);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe f813 	bl	8004b6a <move_window>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b4e:	3a01      	subs	r2, #1
 8006b50:	611a      	str	r2, [r3, #16]
 8006b52:	e019      	b.n	8006b88 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8006b54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d115      	bne.n	8006b88 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8006b5c:	7ebb      	ldrb	r3, [r7, #26]
 8006b5e:	f003 0310 	and.w	r3, r3, #16
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <f_open+0x186>
					res = FR_NO_FILE;
 8006b66:	2304      	movs	r3, #4
 8006b68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006b6c:	e00c      	b.n	8006b88 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8006b6e:	79fb      	ldrb	r3, [r7, #7]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d007      	beq.n	8006b88 <f_open+0x1a0>
 8006b78:	7ebb      	ldrb	r3, [r7, #26]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <f_open+0x1a0>
						res = FR_DENIED;
 8006b82:	2307      	movs	r3, #7
 8006b84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006b88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10f      	bne.n	8006bb0 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <f_open+0x1ba>
 8006b9a:	79fb      	ldrb	r3, [r7, #7]
 8006b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ba0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8006baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 8092 	bne.w	8006cde <f_open+0x2f6>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fe fcf3 	bl	80055ac <ld_clust>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	331c      	adds	r3, #28
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fd febd 	bl	8004950 <ld_dword>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	88da      	ldrh	r2, [r3, #6]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	79fa      	ldrb	r2, [r7, #7]
 8006bee:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3328      	adds	r3, #40	@ 0x28
 8006c06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fb85 	bl	800731c <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006c12:	79fb      	ldrb	r3, [r7, #7]
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d060      	beq.n	8006cde <f_open+0x2f6>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d05c      	beq.n	8006cde <f_open+0x2f6>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	895b      	ldrh	r3, [r3, #10]
 8006c30:	025b      	lsls	r3, r3, #9
 8006c32:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c40:	e016      	b.n	8006c70 <f_open+0x288>
					clst = get_fat(&fp->obj, clst);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe f849 	bl	8004cde <get_fat>
 8006c4c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006c4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d802      	bhi.n	8006c5a <f_open+0x272>
 8006c54:	2302      	movs	r3, #2
 8006c56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006c5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d102      	bne.n	8006c68 <f_open+0x280>
 8006c62:	2301      	movs	r3, #1
 8006c64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006c68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d103      	bne.n	8006c80 <f_open+0x298>
 8006c78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d8e0      	bhi.n	8006c42 <f_open+0x25a>
				}
				fp->clust = clst;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c84:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006c86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d127      	bne.n	8006cde <f_open+0x2f6>
 8006c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d022      	beq.n	8006cde <f_open+0x2f6>
					sc = clst2sect(fs, clst);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fd ffff 	bl	8004ca0 <clst2sect>
 8006ca2:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 8006ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d103      	bne.n	8006cb2 <f_open+0x2ca>
						res = FR_INT_ERR;
 8006caa:	2302      	movs	r3, #2
 8006cac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006cb0:	e015      	b.n	8006cde <f_open+0x2f6>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cb4:	0a5a      	lsrs	r2, r3, #9
 8006cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cb8:	441a      	add	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	7858      	ldrb	r0, [r3, #1]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f7fd fd91 	bl	80047f4 <disk_read>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <f_open+0x2f6>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006cde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <f_open+0x304>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006cec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3760      	adds	r7, #96	@ 0x60
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08c      	sub	sp, #48	@ 0x30
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f107 0210 	add.w	r2, r7, #16
 8006d16:	4611      	mov	r1, r2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff fde5 	bl	80068e8 <validate>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006d24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d107      	bne.n	8006d3c <f_write+0x44>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	7c5b      	ldrb	r3, [r3, #17]
 8006d30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006d34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <f_write+0x4a>
 8006d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d40:	e13f      	b.n	8006fc2 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	7c1b      	ldrb	r3, [r3, #16]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <f_write+0x5a>
 8006d4e:	2307      	movs	r3, #7
 8006d50:	e137      	b.n	8006fc2 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	695a      	ldr	r2, [r3, #20]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	441a      	add	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	f080 8121 	bcs.w	8006fa6 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8006d6c:	e11b      	b.n	8006fa6 <f_write+0x2ae>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f040 80d7 	bne.w	8006f2a <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	0a5b      	lsrs	r3, r3, #9
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	8952      	ldrh	r2, [r2, #10]
 8006d86:	3a01      	subs	r2, #1
 8006d88:	4013      	ands	r3, r2
 8006d8a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d137      	bne.n	8006e02 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10c      	bne.n	8006db4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10e      	bne.n	8006dc4 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2100      	movs	r1, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe f98d 	bl	80050ca <create_chain>
 8006db0:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006db2:	e007      	b.n	8006dc4 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f7fe f984 	bl	80050ca <create_chain>
 8006dc2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 80f2 	beq.w	8006fb0 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d104      	bne.n	8006ddc <f_write+0xe4>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	745a      	strb	r2, [r3, #17]
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e0f2      	b.n	8006fc2 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de2:	d104      	bne.n	8006dee <f_write+0xf6>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2201      	movs	r2, #1
 8006de8:	745a      	strb	r2, [r3, #17]
 8006dea:	2301      	movs	r3, #1
 8006dec:	e0e9      	b.n	8006fc2 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006df2:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <f_write+0x10a>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e00:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	7c1b      	ldrb	r3, [r3, #16]
 8006e06:	b25b      	sxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	da18      	bge.n	8006e3e <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	7858      	ldrb	r0, [r3, #1]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	69da      	ldr	r2, [r3, #28]
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	f7fd fd05 	bl	800482a <disk_write>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d004      	beq.n	8006e30 <f_write+0x138>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	745a      	strb	r2, [r3, #17]
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0c8      	b.n	8006fc2 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	7c1b      	ldrb	r3, [r3, #16]
 8006e34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f7fd ff2a 	bl	8004ca0 <clst2sect>
 8006e4c:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <f_write+0x166>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2202      	movs	r2, #2
 8006e58:	745a      	strb	r2, [r3, #17]
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e0b1      	b.n	8006fc2 <f_write+0x2ca>
			sect += csect;
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	4413      	add	r3, r2
 8006e64:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	0a5b      	lsrs	r3, r3, #9
 8006e6a:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d03c      	beq.n	8006eec <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	4413      	add	r3, r2
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	8952      	ldrh	r2, [r2, #10]
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d905      	bls.n	8006e8c <f_write+0x194>
					cc = fs->csize - csect;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	895b      	ldrh	r3, [r3, #10]
 8006e84:	461a      	mov	r2, r3
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	7858      	ldrb	r0, [r3, #1]
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	69f9      	ldr	r1, [r7, #28]
 8006e96:	f7fd fcc8 	bl	800482a <disk_write>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d004      	beq.n	8006eaa <f_write+0x1b2>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	745a      	strb	r2, [r3, #17]
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e08b      	b.n	8006fc2 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	69da      	ldr	r2, [r3, #28]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	6a3a      	ldr	r2, [r7, #32]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d915      	bls.n	8006ee4 <f_write+0x1ec>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	69da      	ldr	r2, [r3, #28]
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	025b      	lsls	r3, r3, #9
 8006ec8:	69fa      	ldr	r2, [r7, #28]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	f000 fa5d 	bl	8007390 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	7c1b      	ldrb	r3, [r3, #16]
 8006eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	025b      	lsls	r3, r3, #9
 8006ee8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006eea:	e03f      	b.n	8006f6c <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d016      	beq.n	8006f24 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	695a      	ldr	r2, [r3, #20]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d210      	bcs.n	8006f24 <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	7858      	ldrb	r0, [r3, #1]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	f7fd fc70 	bl	80047f4 <disk_read>
 8006f14:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d004      	beq.n	8006f24 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	745a      	strb	r2, [r3, #17]
 8006f20:	2301      	movs	r3, #1
 8006f22:	e04e      	b.n	8006fc2 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f32:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006f36:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d901      	bls.n	8006f44 <f_write+0x24c>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f52:	4413      	add	r3, r2
 8006f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f56:	69f9      	ldr	r1, [r7, #28]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fa19 	bl	8007390 <memcpy>
		fp->flag |= FA_DIRTY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	7c1b      	ldrb	r3, [r3, #16]
 8006f62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	607b      	str	r3, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7a:	441a      	add	r2, r3
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	69fa      	ldr	r2, [r7, #28]
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	4413      	add	r3, r2
 8006f86:	61fb      	str	r3, [r7, #28]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	695a      	ldr	r2, [r3, #20]
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	441a      	add	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	615a      	str	r2, [r3, #20]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	bf38      	it	cc
 8006fa0:	461a      	movcc	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	60da      	str	r2, [r3, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f47f aee0 	bne.w	8006d6e <f_write+0x76>
 8006fae:	e000      	b.n	8006fb2 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006fb0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	7c1b      	ldrb	r3, [r3, #16]
 8006fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3730      	adds	r7, #48	@ 0x30
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b086      	sub	sp, #24
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f107 0208 	add.w	r2, r7, #8
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff fc84 	bl	80068e8 <validate>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d168      	bne.n	80070bc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	7c1b      	ldrb	r3, [r3, #16]
 8006fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d062      	beq.n	80070bc <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7c1b      	ldrb	r3, [r3, #16]
 8006ffa:	b25b      	sxtb	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	da15      	bge.n	800702c <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	7858      	ldrb	r0, [r3, #1]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	69da      	ldr	r2, [r3, #28]
 800700e:	2301      	movs	r3, #1
 8007010:	f7fd fc0b 	bl	800482a <disk_write>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <f_sync+0x54>
 800701a:	2301      	movs	r3, #1
 800701c:	e04f      	b.n	80070be <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	7c1b      	ldrb	r3, [r3, #16]
 8007022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007026:	b2da      	uxtb	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800702c:	f7fd fc70 	bl	8004910 <get_fattime>
 8007030:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	f7fd fd95 	bl	8004b6a <move_window>
 8007040:	4603      	mov	r3, r0
 8007042:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d138      	bne.n	80070bc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	330b      	adds	r3, #11
 8007054:	781a      	ldrb	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	330b      	adds	r3, #11
 800705a:	f042 0220 	orr.w	r2, r2, #32
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	461a      	mov	r2, r3
 800706c:	68f9      	ldr	r1, [r7, #12]
 800706e:	f7fe fabc 	bl	80055ea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f103 021c 	add.w	r2, r3, #28
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f7fd fca4 	bl	80049cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3316      	adds	r3, #22
 8007088:	6939      	ldr	r1, [r7, #16]
 800708a:	4618      	mov	r0, r3
 800708c:	f7fd fc9e 	bl	80049cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3312      	adds	r3, #18
 8007094:	2100      	movs	r1, #0
 8007096:	4618      	mov	r0, r3
 8007098:	f7fd fc7d 	bl	8004996 <st_word>
					fs->wflag = 1;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2201      	movs	r2, #1
 80070a0:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fd fd8d 	bl	8004bc4 <sync_fs>
 80070aa:	4603      	mov	r3, r0
 80070ac:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	7c1b      	ldrb	r3, [r3, #16]
 80070b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff ff7b 	bl	8006fca <f_sync>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10e      	bne.n	80070fc <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f107 0208 	add.w	r2, r7, #8
 80070e4:	4611      	mov	r1, r2
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff fbfe 	bl	80068e8 <validate>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d102      	bne.n	80070fc <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	807b      	strh	r3, [r7, #2]
	WCHAR c = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8007118:	4b17      	ldr	r3, [pc, #92]	@ (8007178 <ff_uni2oem+0x70>)
 800711a:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007120:	d802      	bhi.n	8007128 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	81fb      	strh	r3, [r7, #14]
 8007126:	e01f      	b.n	8007168 <ff_uni2oem+0x60>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800712e:	d21b      	bcs.n	8007168 <ff_uni2oem+0x60>
 8007130:	887b      	ldrh	r3, [r7, #2]
 8007132:	f240 3252 	movw	r2, #850	@ 0x352
 8007136:	4293      	cmp	r3, r2
 8007138:	d116      	bne.n	8007168 <ff_uni2oem+0x60>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 800713a:	2300      	movs	r3, #0
 800713c:	81fb      	strh	r3, [r7, #14]
 800713e:	e002      	b.n	8007146 <ff_uni2oem+0x3e>
 8007140:	89fb      	ldrh	r3, [r7, #14]
 8007142:	3301      	adds	r3, #1
 8007144:	81fb      	strh	r3, [r7, #14]
 8007146:	89fb      	ldrh	r3, [r7, #14]
 8007148:	2b7f      	cmp	r3, #127	@ 0x7f
 800714a:	d808      	bhi.n	800715e <ff_uni2oem+0x56>
 800714c:	89fb      	ldrh	r3, [r7, #14]
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	4413      	add	r3, r2
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4293      	cmp	r3, r2
 800715c:	d1f0      	bne.n	8007140 <ff_uni2oem+0x38>
			c = (c + 0x80) & 0xFF;
 800715e:	89fb      	ldrh	r3, [r7, #14]
 8007160:	3380      	adds	r3, #128	@ 0x80
 8007162:	b29b      	uxth	r3, r3
 8007164:	b2db      	uxtb	r3, r3
 8007166:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007168:	89fb      	ldrh	r3, [r7, #14]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	080074c8 	.word	0x080074c8

0800717c <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	4603      	mov	r3, r0
 8007184:	460a      	mov	r2, r1
 8007186:	80fb      	strh	r3, [r7, #6]
 8007188:	4613      	mov	r3, r2
 800718a:	80bb      	strh	r3, [r7, #4]
	WCHAR c = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8007190:	4b0f      	ldr	r3, [pc, #60]	@ (80071d0 <ff_oem2uni+0x54>)
 8007192:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
 8007194:	88fb      	ldrh	r3, [r7, #6]
 8007196:	2b7f      	cmp	r3, #127	@ 0x7f
 8007198:	d802      	bhi.n	80071a0 <ff_oem2uni+0x24>
		c = oem;
 800719a:	88fb      	ldrh	r3, [r7, #6]
 800719c:	81fb      	strh	r3, [r7, #14]
 800719e:	e00f      	b.n	80071c0 <ff_oem2uni+0x44>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 80071a0:	88bb      	ldrh	r3, [r7, #4]
 80071a2:	f240 3252 	movw	r2, #850	@ 0x352
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d10a      	bne.n	80071c0 <ff_oem2uni+0x44>
			if (oem < 0x100) c = p[oem - 0x80];
 80071aa:	88fb      	ldrh	r3, [r7, #6]
 80071ac:	2bff      	cmp	r3, #255	@ 0xff
 80071ae:	d807      	bhi.n	80071c0 <ff_oem2uni+0x44>
 80071b0:	88fa      	ldrh	r2, [r7, #6]
 80071b2:	4b08      	ldr	r3, [pc, #32]	@ (80071d4 <ff_oem2uni+0x58>)
 80071b4:	4413      	add	r3, r2
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	4413      	add	r3, r2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80071c0:	89fb      	ldrh	r3, [r7, #14]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	080074c8 	.word	0x080074c8
 80071d4:	7fffff80 	.word	0x7fffff80

080071d8 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071e6:	d27d      	bcs.n	80072e4 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 80071ec:	8a7b      	ldrh	r3, [r7, #18]
 80071ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071f2:	d201      	bcs.n	80071f8 <ff_wtoupper+0x20>
 80071f4:	4b3f      	ldr	r3, [pc, #252]	@ (80072f4 <ff_wtoupper+0x11c>)
 80071f6:	e000      	b.n	80071fa <ff_wtoupper+0x22>
 80071f8:	4b3f      	ldr	r3, [pc, #252]	@ (80072f8 <ff_wtoupper+0x120>)
 80071fa:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	1c9a      	adds	r2, r3, #2
 8007200:	617a      	str	r2, [r7, #20]
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8007206:	8a3b      	ldrh	r3, [r7, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d069      	beq.n	80072e0 <ff_wtoupper+0x108>
 800720c:	8a7a      	ldrh	r2, [r7, #18]
 800720e:	8a3b      	ldrh	r3, [r7, #16]
 8007210:	429a      	cmp	r2, r3
 8007212:	d365      	bcc.n	80072e0 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	1c9a      	adds	r2, r3, #2
 8007218:	617a      	str	r2, [r7, #20]
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	81fb      	strh	r3, [r7, #14]
 800721e:	89fb      	ldrh	r3, [r7, #14]
 8007220:	0a1b      	lsrs	r3, r3, #8
 8007222:	81bb      	strh	r3, [r7, #12]
 8007224:	89fb      	ldrh	r3, [r7, #14]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 800722a:	8a7a      	ldrh	r2, [r7, #18]
 800722c:	8a39      	ldrh	r1, [r7, #16]
 800722e:	89fb      	ldrh	r3, [r7, #14]
 8007230:	440b      	add	r3, r1
 8007232:	429a      	cmp	r2, r3
 8007234:	da4a      	bge.n	80072cc <ff_wtoupper+0xf4>
				switch (cmd) {
 8007236:	89bb      	ldrh	r3, [r7, #12]
 8007238:	2b08      	cmp	r3, #8
 800723a:	d850      	bhi.n	80072de <ff_wtoupper+0x106>
 800723c:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <ff_wtoupper+0x6c>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007269 	.word	0x08007269
 8007248:	0800727b 	.word	0x0800727b
 800724c:	08007291 	.word	0x08007291
 8007250:	08007299 	.word	0x08007299
 8007254:	080072a1 	.word	0x080072a1
 8007258:	080072a9 	.word	0x080072a9
 800725c:	080072b1 	.word	0x080072b1
 8007260:	080072b9 	.word	0x080072b9
 8007264:	080072c1 	.word	0x080072c1
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8007268:	8a7a      	ldrh	r2, [r7, #18]
 800726a:	8a3b      	ldrh	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4413      	add	r3, r2
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	827b      	strh	r3, [r7, #18]
 8007278:	e027      	b.n	80072ca <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 800727a:	8a7a      	ldrh	r2, [r7, #18]
 800727c:	8a3b      	ldrh	r3, [r7, #16]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	b29b      	uxth	r3, r3
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	b29b      	uxth	r3, r3
 8007288:	8a7a      	ldrh	r2, [r7, #18]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	827b      	strh	r3, [r7, #18]
 800728e:	e01c      	b.n	80072ca <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 8007290:	8a7b      	ldrh	r3, [r7, #18]
 8007292:	3b10      	subs	r3, #16
 8007294:	827b      	strh	r3, [r7, #18]
 8007296:	e018      	b.n	80072ca <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8007298:	8a7b      	ldrh	r3, [r7, #18]
 800729a:	3b20      	subs	r3, #32
 800729c:	827b      	strh	r3, [r7, #18]
 800729e:	e014      	b.n	80072ca <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 80072a0:	8a7b      	ldrh	r3, [r7, #18]
 80072a2:	3b30      	subs	r3, #48	@ 0x30
 80072a4:	827b      	strh	r3, [r7, #18]
 80072a6:	e010      	b.n	80072ca <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 80072a8:	8a7b      	ldrh	r3, [r7, #18]
 80072aa:	3b1a      	subs	r3, #26
 80072ac:	827b      	strh	r3, [r7, #18]
 80072ae:	e00c      	b.n	80072ca <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 80072b0:	8a7b      	ldrh	r3, [r7, #18]
 80072b2:	3308      	adds	r3, #8
 80072b4:	827b      	strh	r3, [r7, #18]
 80072b6:	e008      	b.n	80072ca <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 80072b8:	8a7b      	ldrh	r3, [r7, #18]
 80072ba:	3b50      	subs	r3, #80	@ 0x50
 80072bc:	827b      	strh	r3, [r7, #18]
 80072be:	e004      	b.n	80072ca <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 80072c0:	8a7b      	ldrh	r3, [r7, #18]
 80072c2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80072c6:	827b      	strh	r3, [r7, #18]
 80072c8:	bf00      	nop
				}
				break;
 80072ca:	e008      	b.n	80072de <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 80072cc:	89bb      	ldrh	r3, [r7, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d194      	bne.n	80071fc <ff_wtoupper+0x24>
 80072d2:	89fb      	ldrh	r3, [r7, #14]
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4413      	add	r3, r2
 80072da:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 80072dc:	e78e      	b.n	80071fc <ff_wtoupper+0x24>
				break;
 80072de:	bf00      	nop
		}
		uni = uc;
 80072e0:	8a7b      	ldrh	r3, [r7, #18]
 80072e2:	607b      	str	r3, [r7, #4]
	}

	return uni;
 80072e4:	687b      	ldr	r3, [r7, #4]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	080075c8 	.word	0x080075c8
 80072f8:	080077bc 	.word	0x080077bc

080072fc <memcmp>:
 80072fc:	b510      	push	{r4, lr}
 80072fe:	3901      	subs	r1, #1
 8007300:	4402      	add	r2, r0
 8007302:	4290      	cmp	r0, r2
 8007304:	d101      	bne.n	800730a <memcmp+0xe>
 8007306:	2000      	movs	r0, #0
 8007308:	e005      	b.n	8007316 <memcmp+0x1a>
 800730a:	7803      	ldrb	r3, [r0, #0]
 800730c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007310:	42a3      	cmp	r3, r4
 8007312:	d001      	beq.n	8007318 <memcmp+0x1c>
 8007314:	1b18      	subs	r0, r3, r4
 8007316:	bd10      	pop	{r4, pc}
 8007318:	3001      	adds	r0, #1
 800731a:	e7f2      	b.n	8007302 <memcmp+0x6>

0800731c <memset>:
 800731c:	4402      	add	r2, r0
 800731e:	4603      	mov	r3, r0
 8007320:	4293      	cmp	r3, r2
 8007322:	d100      	bne.n	8007326 <memset+0xa>
 8007324:	4770      	bx	lr
 8007326:	f803 1b01 	strb.w	r1, [r3], #1
 800732a:	e7f9      	b.n	8007320 <memset+0x4>

0800732c <strchr>:
 800732c:	b2c9      	uxtb	r1, r1
 800732e:	4603      	mov	r3, r0
 8007330:	4618      	mov	r0, r3
 8007332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007336:	b112      	cbz	r2, 800733e <strchr+0x12>
 8007338:	428a      	cmp	r2, r1
 800733a:	d1f9      	bne.n	8007330 <strchr+0x4>
 800733c:	4770      	bx	lr
 800733e:	2900      	cmp	r1, #0
 8007340:	bf18      	it	ne
 8007342:	2000      	movne	r0, #0
 8007344:	4770      	bx	lr
	...

08007348 <__libc_init_array>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	4d0d      	ldr	r5, [pc, #52]	@ (8007380 <__libc_init_array+0x38>)
 800734c:	4c0d      	ldr	r4, [pc, #52]	@ (8007384 <__libc_init_array+0x3c>)
 800734e:	1b64      	subs	r4, r4, r5
 8007350:	10a4      	asrs	r4, r4, #2
 8007352:	2600      	movs	r6, #0
 8007354:	42a6      	cmp	r6, r4
 8007356:	d109      	bne.n	800736c <__libc_init_array+0x24>
 8007358:	4d0b      	ldr	r5, [pc, #44]	@ (8007388 <__libc_init_array+0x40>)
 800735a:	4c0c      	ldr	r4, [pc, #48]	@ (800738c <__libc_init_array+0x44>)
 800735c:	f000 f826 	bl	80073ac <_init>
 8007360:	1b64      	subs	r4, r4, r5
 8007362:	10a4      	asrs	r4, r4, #2
 8007364:	2600      	movs	r6, #0
 8007366:	42a6      	cmp	r6, r4
 8007368:	d105      	bne.n	8007376 <__libc_init_array+0x2e>
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007370:	4798      	blx	r3
 8007372:	3601      	adds	r6, #1
 8007374:	e7ee      	b.n	8007354 <__libc_init_array+0xc>
 8007376:	f855 3b04 	ldr.w	r3, [r5], #4
 800737a:	4798      	blx	r3
 800737c:	3601      	adds	r6, #1
 800737e:	e7f2      	b.n	8007366 <__libc_init_array+0x1e>
 8007380:	08007880 	.word	0x08007880
 8007384:	08007880 	.word	0x08007880
 8007388:	08007880 	.word	0x08007880
 800738c:	08007884 	.word	0x08007884

08007390 <memcpy>:
 8007390:	440a      	add	r2, r1
 8007392:	4291      	cmp	r1, r2
 8007394:	f100 33ff 	add.w	r3, r0, #4294967295
 8007398:	d100      	bne.n	800739c <memcpy+0xc>
 800739a:	4770      	bx	lr
 800739c:	b510      	push	{r4, lr}
 800739e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a6:	4291      	cmp	r1, r2
 80073a8:	d1f9      	bne.n	800739e <memcpy+0xe>
 80073aa:	bd10      	pop	{r4, pc}

080073ac <_init>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	bf00      	nop
 80073b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b2:	bc08      	pop	{r3}
 80073b4:	469e      	mov	lr, r3
 80073b6:	4770      	bx	lr

080073b8 <_fini>:
 80073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ba:	bf00      	nop
 80073bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073be:	bc08      	pop	{r3}
 80073c0:	469e      	mov	lr, r3
 80073c2:	4770      	bx	lr
