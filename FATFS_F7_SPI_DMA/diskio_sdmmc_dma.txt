/*-----------------------------------------------------------------------*/
/* Low level disk I/O module SKELETON for FatFs     (C)ChaN, 2019        */
/*-----------------------------------------------------------------------*/
/* If a working storage control module is available, it should be        */
/* attached to the FatFs via a glue function rather than modifying it.   */
/* This is an example of glue functions to attach various exsisting      */
/* storage control modules to the FatFs module with a defined API.       */
/*-----------------------------------------------------------------------*/

#include <bsp_sd_def.h>
#include "ff.h"     /* Obtains integer types */
#include "diskio.h" /* Declarations of disk functions */

/* Private variables ---------------------------------------------------------*/
static volatile DSTATUS Stat        = STA_NOINIT;
static volatile UINT    WriteStatus = 0, ReadStatus = 0;

/* Private define ------------------------------------------------------------*/

/*
 * the following Timeout is useful to give the control back to the applications
 * in case of errors in either BSP_SD_ReadCpltCallback() or
 * BSP_SD_WriteCpltCallback() the value by default is as defined in the BSP
 * platform driver otherwise 30 secs
 */
#define SD_TIMEOUT 30 * 1000

#define SD_DEFAULT_BLOCK_SIZE 512

/* Private functions ---------------------------------------------------------*/

static int
SD_CheckStatusWithTimeout (uint32_t timeout)
{
  uint32_t timer = HAL_GetTick();
  /* block until SDIO IP is ready again or a timeout occur */
  while (HAL_GetTick() - timer < timeout)
  {
    if (BSP_SD_SDMMC_GetCardState() == SD_TRANSFER_OK)
    {
      return 0;
    }
  }

  return -1;
}

static DSTATUS
SD_CheckStatus (BYTE lun)
{
  Stat = STA_NOINIT;

  if (BSP_SD_SDMMC_GetCardState() == MSD_OK)
  {
    Stat &= ~STA_NOINIT;
  }

  return Stat;
}

/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS
disk_status (BYTE pdrv /* Physical drive nmuber to identify the drive */
)
{
  return SD_CheckStatus(0);
}

/*-----------------------------------------------------------------------*/
/* Inidialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS
disk_initialize (BYTE pdrv /* Physical drive nmuber to identify the drive */
)
{
  if (BSP_SD_SDMMC_Init() == MSD_OK)
  {
    Stat = SD_CheckStatus(0);
  }
  return Stat;
}

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT
disk_read (BYTE  pdrv,   /* Physical drive nmuber to identify the drive */
           BYTE *buff,   /* Data buffer to store read data */
           LBA_t sector, /* Start sector in LBA */
           UINT  count   /* Number of sectors to read */
)
{
  DRESULT  res = RES_ERROR;
  uint32_t timeout;
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
#endif
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  /*
   * ensure the SDCard is ready for a new operation
   */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
  {
    return res;
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if (BSP_SD_SDMMC_ReadBlocks_DMA((uint32_t *)buff, (uint32_t)(sector), count)
        == MSD_OK)
    {
      ReadStatus = 0;
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
      while ((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
      {
        res = RES_ERROR;
      }
      else
      {
        ReadStatus = 0;
        timeout    = HAL_GetTick();

        while ((HAL_GetTick() - timeout) < SD_TIMEOUT)
        {
          if (BSP_SD_SDMMC_GetCardState() == SD_TRANSFER_OK)
          {
            res = RES_OK;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
            /*
            the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned
            address, adjust the address and the D-Cache size to invalidate
            accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t *)alignedAddr,
                                         count * BLOCKSIZE
                                             + ((uint32_t)buff - alignedAddr));
#endif
            break;
          }
        }
      }
    }
#if defined(ENABLE_SCRATCH_BUFFER)
  }
  else
  {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;

    for (i = 0; i < count; i++)
    {
      ret = BSP_SD_SDMMC_ReadBlocks_DMA(
          (uint32_t *)scratch, (uint32_t)sector++, 1);
      if (ret == MSD_OK)
      {
        /* wait until the read is successful or a timeout occurs */

        timeout = HAL_GetTick();
        while ((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
        {
        }
        if (ReadStatus == 0)
        {
          res = RES_ERROR;
          break;
        }
        ReadStatus = 0;

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
        /*
         *
         * invalidate the scratch buffer before the next read to get the actual
         * data instead of the cached one
         */
        SCB_InvalidateDCache_by_Addr((uint32_t *)scratch, BLOCKSIZE);
#endif
        memcpy(buff, scratch, BLOCKSIZE);
        buff += BLOCKSIZE;
      }
      else
      {
        break;
      }
    }

    if ((i == count) && (ret == MSD_OK))
    {
      res = RES_OK;
    }
  }
#endif

  return res;
}

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if FF_FS_READONLY == 0

/* USER CODE BEGIN beforeWriteSection */
/* can be used to modify previous code / undefine following code / add new code
 */
/* USER CODE END beforeWriteSection */
/**
 * @brief  Writes Sector(s)
 * @param  lun : not used
 * @param  *buff: Data to be written
 * @param  sector: Sector address (LBA)
 * @param  count: Number of sectors to write (1..128)
 * @retval DRESULT: Operation result
 */

DRESULT
disk_write (BYTE pdrv, const BYTE *buff, LBA_t sector, UINT count)
{
  DRESULT  res = RES_ERROR;
  uint32_t timeout;
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int     i;
#endif

  WriteStatus = 0;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
  {
    return res;
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)

    /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t *)alignedAddr,
                            count * BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if (BSP_SD_SDMMC_WriteBlocks_DMA(
            (uint32_t *)buff, (uint32_t)(sector), count)
        == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
      while ((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
      {
        res = RES_ERROR;
      }
      else
      {
        WriteStatus = 0;
        timeout     = HAL_GetTick();

        while ((HAL_GetTick() - timeout) < SD_TIMEOUT)
        {
          if (BSP_SD_SDMMC_GetCardState() == SD_TRANSFER_OK)
          {
            res = RES_OK;
            break;
          }
        }
      }
    }
#if defined(ENABLE_SCRATCH_BUFFER)
  }
  else
  {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
    /*
     * invalidate the scratch buffer before the next write to get the actual
     * data instead of the cached one
     */
    SCB_InvalidateDCache_by_Addr((uint32_t *)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++)
    {
      WriteStatus = 0;

      memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
      buff += BLOCKSIZE;

      ret = BSP_SD_WriteBlocks_DMA((uint32_t *)scratch, (uint32_t)sector++, 1);
      if (ret == MSD_OK)
      {
        /* wait for a message from the queue or a timeout */
        timeout = HAL_GetTick();
        while ((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
        {
        }
        if (WriteStatus == 0)
        {
          break;
        }
      }
      else
      {
        break;
      }
    }
    if ((i == count) && (ret == MSD_OK))
    {
      res = RES_OK;
    }
  }
#endif
  return res;
}

#endif

/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

DRESULT
disk_ioctl (BYTE  pdrv, /* Physical drive nmuber (0..) */
            BYTE  cmd,  /* Control code */
            void *buff  /* Buffer to send/receive control data */
)
{
  DRESULT               res = RES_ERROR;
  BSP_SD_SDMMC_CardInfo CardInfo;

  if (Stat & STA_NOINIT)
  {
    return RES_NOTRDY;
  }

  switch (cmd)
  {
    /* Make sure that no pending write process */
    case CTRL_SYNC:
      res = RES_OK;
      break;

    /* Get number of sectors on the disk (DWORD) */
    case GET_SECTOR_COUNT:
      BSP_SD_SDMMC_GetCardInfo(&CardInfo);
      *(DWORD *)buff = CardInfo.LogBlockNbr;
      res            = RES_OK;
      break;

    /* Get R/W sector size (WORD) */
    case GET_SECTOR_SIZE:
      BSP_SD_SDMMC_GetCardInfo(&CardInfo);
      *(WORD *)buff = CardInfo.LogBlockSize;
      res           = RES_OK;
      break;

    /* Get erase block size in unit of sector (DWORD) */
    case GET_BLOCK_SIZE:
      BSP_SD_SDMMC_GetCardInfo(&CardInfo);
      *(DWORD *)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
      res            = RES_OK;
      break;

    default:
      res = RES_PARERR;
  }

  return res;
}

/* USER CODE BEGIN callbackSection */
/* can be used to modify / following code or add new code */
/* USER CODE END callbackSection */
/**
 * @brief Tx Transfer completed callbacks
 * @param hsd: SD handle
 * @retval None
 */
void
BSP_SD_SDMMC_WriteCpltCallback (void)
{

  WriteStatus = 1;
}

/**
 * @brief Rx Transfer completed callbacks
 * @param hsd: SD handle
 * @retval None
 */
void
BSP_SD_SDMMC_ReadCpltCallback (void)
{
  ReadStatus = 1;
}

/**
 * @brief  Gets Time from RTC
 * @param  None
 * @retval Time in DWORD
 */
__weak DWORD
get_fattime (void)
{
  return 0;
}
