
SD_CARD_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008878  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08008a40  08008a40  00009a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f00  08008f00  0000a014  2**0
                  CONTENTS
  4 .ARM          00000008  08008f00  08008f00  00009f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f08  08008f08  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f08  08008f08  00009f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f0c  08008f0c  00009f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08008f10  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020aa4  20000018  08008f24  0000a018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20020abc  08008f24  0000aabc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ead4  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d1  00000000  00000000  00018b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0001b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa0  00000000  00000000  0001c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002899c  00000000  00000000  0001cb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001322d  00000000  00000000  0004552c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f54cc  00000000  00000000  00058759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014dc25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003934  00000000  00000000  0014dc68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015159c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008a28 	.word	0x08008a28

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08008a28 	.word	0x08008a28

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <LL_RCC_HSE_EnableBypass+0x1c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a04      	ldr	r2, [pc, #16]	@ (8000514 <LL_RCC_HSE_EnableBypass+0x1c>)
 8000502:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000506:	6013      	str	r3, [r2, #0]
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40023800 	.word	0x40023800

08000518 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800051c:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <LL_RCC_HSE_Enable+0x1c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a04      	ldr	r2, [pc, #16]	@ (8000534 <LL_RCC_HSE_Enable+0x1c>)
 8000522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000526:	6013      	str	r3, [r2, #0]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40023800 	.word	0x40023800

08000538 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800053c:	4b07      	ldr	r3, [pc, #28]	@ (800055c <LL_RCC_HSE_IsReady+0x24>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000548:	bf0c      	ite	eq
 800054a:	2301      	moveq	r3, #1
 800054c:	2300      	movne	r3, #0
 800054e:	b2db      	uxtb	r3, r3
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40023800 	.word	0x40023800

08000560 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <LL_RCC_SetSysClkSource+0x24>)
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	f023 0203 	bic.w	r2, r3, #3
 8000570:	4904      	ldr	r1, [pc, #16]	@ (8000584 <LL_RCC_SetSysClkSource+0x24>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4313      	orrs	r3, r2
 8000576:	608b      	str	r3, [r1, #8]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	40023800 	.word	0x40023800

08000588 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800058c:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <LL_RCC_GetSysClkSource+0x18>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f003 030c 	and.w	r3, r3, #12
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40023800 	.word	0x40023800

080005a4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80005b4:	4904      	ldr	r1, [pc, #16]	@ (80005c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	608b      	str	r3, [r1, #8]
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	40023800 	.word	0x40023800

080005cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80005dc:	4904      	ldr	r1, [pc, #16]	@ (80005f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	608b      	str	r3, [r1, #8]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	40023800 	.word	0x40023800

080005f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000604:	4904      	ldr	r1, [pc, #16]	@ (8000618 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4313      	orrs	r3, r2
 800060a:	608b      	str	r3, [r1, #8]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	40023800 	.word	0x40023800

0800061c <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR1, RCC_DCKCFGR1_TIMPRE, Prescaler);
 8000624:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <LL_RCC_SetTIMPrescaler+0x28>)
 8000626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800062a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800062e:	4905      	ldr	r1, [pc, #20]	@ (8000644 <LL_RCC_SetTIMPrescaler+0x28>)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4313      	orrs	r3, r2
 8000634:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	40023800 	.word	0x40023800

08000648 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <LL_RCC_PLL_Enable+0x1c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <LL_RCC_PLL_Enable+0x1c>)
 8000652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800

08000668 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <LL_RCC_PLL_IsReady+0x24>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000674:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000678:	bf0c      	ite	eq
 800067a:	2301      	moveq	r3, #1
 800067c:	2300      	movne	r3, #0
 800067e:	b2db      	uxtb	r3, r3
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800

08000690 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 800069e:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80006a0:	685a      	ldr	r2, [r3, #4]
 80006a2:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	68f9      	ldr	r1, [r7, #12]
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	4311      	orrs	r1, r2
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	0192      	lsls	r2, r2, #6
 80006b0:	4311      	orrs	r1, r2
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	430a      	orrs	r2, r1
 80006b6:	4904      	ldr	r1, [pc, #16]	@ (80006c8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80006b8:	4313      	orrs	r3, r2
 80006ba:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLP);
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	40023800 	.word	0x40023800
 80006cc:	ffbc8000 	.word	0xffbc8000

080006d0 <LL_RCC_PLLSAI_Enable>:
  * @brief  Enable PLLSAI
  * @rmtoll CR           PLLSAION     LL_RCC_PLLSAI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI_Enable(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAION);
 80006d4:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <LL_RCC_PLLSAI_Enable+0x1c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <LL_RCC_PLLSAI_Enable+0x1c>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <LL_RCC_PLLSAI_IsReady>:
  * @brief  Check if PLLSAI Ready
  * @rmtoll CR           PLLSAIRDY    LL_RCC_PLLSAI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI_IsReady(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <LL_RCC_PLLSAI_IsReady+0x24>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80006fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000700:	bf0c      	ite	eq
 8000702:	2301      	moveq	r3, #1
 8000704:	2300      	movne	r3, #0
 8000706:	b2db      	uxtb	r3, r3
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <LL_RCC_PLLSAI_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLSAIP_DIV_6
  *         @arg @ref LL_RCC_PLLSAIP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <LL_RCC_PLLSAI_ConfigDomain_48M+0x48>)
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <LL_RCC_PLLSAI_ConfigDomain_48M+0x4c>)
 800072c:	4013      	ands	r3, r2
 800072e:	68f9      	ldr	r1, [r7, #12]
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	430a      	orrs	r2, r1
 8000734:	490a      	ldr	r1, [pc, #40]	@ (8000760 <LL_RCC_PLLSAI_ConfigDomain_48M+0x48>)
 8000736:	4313      	orrs	r3, r2
 8000738:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->PLLSAICFGR, RCC_PLLSAICFGR_PLLSAIN | RCC_PLLSAICFGR_PLLSAIP, PLLN << RCC_PLLSAICFGR_PLLSAIN_Pos | PLLP);
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <LL_RCC_PLLSAI_ConfigDomain_48M+0x48>)
 800073c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <LL_RCC_PLLSAI_ConfigDomain_48M+0x50>)
 8000742:	4013      	ands	r3, r2
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	0191      	lsls	r1, r2, #6
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	430a      	orrs	r2, r1
 800074c:	4904      	ldr	r1, [pc, #16]	@ (8000760 <LL_RCC_PLLSAI_ConfigDomain_48M+0x48>)
 800074e:	4313      	orrs	r3, r2
 8000750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	40023800 	.word	0x40023800
 8000764:	ffbfffc0 	.word	0xffbfffc0
 8000768:	fffc803f 	.word	0xfffc803f

0800076c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000776:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000778:	4907      	ldr	r1, [pc, #28]	@ (8000798 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4313      	orrs	r3, r2
 800077e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000782:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4013      	ands	r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40023800 	.word	0x40023800

0800079c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <LL_FLASH_SetLatency+0x24>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f023 020f 	bic.w	r2, r3, #15
 80007ac:	4904      	ldr	r1, [pc, #16]	@ (80007c0 <LL_FLASH_SetLatency+0x24>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	600b      	str	r3, [r1, #0]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	40023c00 	.word	0x40023c00

080007c4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <LL_FLASH_GetLatency+0x18>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f003 030f 	and.w	r3, r3, #15
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023c00 	.word	0x40023c00

080007e0 <LL_MPU_Enable>:
  *         @arg @ref LL_MPU_CTRL_PRIVILEGED_DEFAULT
  *         @arg @ref LL_MPU_CTRL_HFNMI_PRIVDEF
  * @retval None
  */
__STATIC_INLINE void LL_MPU_Enable(uint32_t Options)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU*/
  WRITE_REG(MPU->CTRL, (MPU_CTRL_ENABLE_Msk | Options));
 80007e8:	4a08      	ldr	r2, [pc, #32]	@ (800080c <LL_MPU_Enable+0x2c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007f2:	f3bf 8f4f 	dsb	sy
}
 80007f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f8:	f3bf 8f6f 	isb	sy
}
 80007fc:	bf00      	nop
  /* Ensure MPU settings take effects */
  __DSB();
  /* Sequence instruction fetches using update settings */
  __ISB();
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed90 	.word	0xe000ed90

08000810 <LL_MPU_Disable>:
  * @brief  Disable MPU
  * @rmtoll MPU_CTRL     ENABLE        LL_MPU_Disable
  * @retval None
  */
__STATIC_INLINE void LL_MPU_Disable(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000814:	f3bf 8f5f 	dmb	sy
}
 8000818:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();
  /* Disable MPU*/
  WRITE_REG(MPU->CTRL, 0U);
 800081a:	4b04      	ldr	r3, [pc, #16]	@ (800082c <LL_MPU_Disable+0x1c>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed90 	.word	0xe000ed90

08000830 <LL_MPU_ConfigRegion>:
  *         @arg @ref LL_MPU_ACCESS_CACHEABLE or @ref LL_MPU_ACCESS_NOT_CACHEABLE
  *         @arg @ref LL_MPU_ACCESS_BUFFERABLE or @ref LL_MPU_ACCESS_NOT_BUFFERABLE
  * @retval None
  */
__STATIC_INLINE void LL_MPU_ConfigRegion(uint32_t Region, uint32_t SubRegionDisable, uint32_t Address, uint32_t Attributes)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	603b      	str	r3, [r7, #0]
  /* Set Region number */
  WRITE_REG(MPU->RNR, Region);
 800083e:	4a0b      	ldr	r2, [pc, #44]	@ (800086c <LL_MPU_ConfigRegion+0x3c>)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	6093      	str	r3, [r2, #8]
  /* Set base address */
  WRITE_REG(MPU->RBAR, (Address & 0xFFFFFFE0U));
 8000844:	4a09      	ldr	r2, [pc, #36]	@ (800086c <LL_MPU_ConfigRegion+0x3c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f023 031f 	bic.w	r3, r3, #31
 800084c:	60d3      	str	r3, [r2, #12]
  /* Configure MPU */
  WRITE_REG(MPU->RASR, (MPU_RASR_ENABLE_Msk | Attributes | (SubRegionDisable << MPU_RASR_SRD_Pos)));
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	021a      	lsls	r2, r3, #8
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	4313      	orrs	r3, r2
 8000856:	4a05      	ldr	r2, [pc, #20]	@ (800086c <LL_MPU_ConfigRegion+0x3c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6113      	str	r3, [r2, #16]
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed90 	.word	0xe000ed90

08000870 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR1    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_ODEN);
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <LL_PWR_EnableOverDriveMode+0x1c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a04      	ldr	r2, [pc, #16]	@ (800088c <LL_PWR_EnableOverDriveMode+0x1c>)
 800087a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40007000 	.word	0x40007000

08000890 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80008a0:	4904      	ldr	r1, [pc, #16]	@ (80008b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	600b      	str	r3, [r1, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40007000 	.word	0x40007000

080008b8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR1   VOSRDY       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR1, PWR_CSR1_VOSRDY) == (PWR_CSR1_VOSRDY));
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <LL_PWR_IsActiveFlag_VOS+0x24>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008c8:	bf0c      	ite	eq
 80008ca:	2301      	moveq	r3, #1
 80008cc:	2300      	movne	r3, #0
 80008ce:	b2db      	uxtb	r3, r3
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40007000 	.word	0x40007000

080008e0 <bufsize>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int bufsize (char *buf)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	int i=0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 80008ec:	e002      	b.n	80008f4 <bufsize+0x14>
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	3301      	adds	r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1f6      	bne.n	80008ee <bufsize+0xe>
	return i;
 8000900:	68fb      	ldr	r3, [r7, #12]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	memset(buffer, 0xFF, BUFFER_SIZE); // Fill buffer with data
 8000916:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800091a:	21ff      	movs	r1, #255	@ 0xff
 800091c:	4832      	ldr	r0, [pc, #200]	@ (80009e8 <main+0xd8>)
 800091e:	f008 f857 	bl	80089d0 <memset>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000922:	f000 f955 	bl	8000bd0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000926:	f000 fb02 	bl	8000f2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092a:	f000 f873 	bl	8000a14 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800092e:	f000 f8c9 	bl	8000ac4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000932:	f000 f923 	bl	8000b7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000936:	f000 f8fb 	bl	8000b30 <MX_DMA_Init>
  MX_FATFS_Init();
 800093a:	f003 fc07 	bl	800414c <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 800093e:	f000 f8d7 	bl	8000af0 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */
	if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000942:	482a      	ldr	r0, [pc, #168]	@ (80009ec <main+0xdc>)
 8000944:	f001 f9d8 	bl	8001cf8 <HAL_SD_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <main+0x42>
	{
		Error_Handler();
 800094e:	f000 f951 	bl	8000bf4 <Error_Handler>
	}

	if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000952:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000956:	4825      	ldr	r0, [pc, #148]	@ (80009ec <main+0xdc>)
 8000958:	f001 ff9e 	bl	8002898 <HAL_SD_ConfigWideBusOperation>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <main+0x56>
	{
		Error_Handler();
 8000962:	f000 f947 	bl	8000bf4 <Error_Handler>
  __ASM volatile ("cpsid i" : : : "memory");
 8000966:	b672      	cpsid	i
}
 8000968:	bf00      	nop
	}

	__disable_irq();
	time_count = 0;
 800096a:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <main+0xe0>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000970:	b662      	cpsie	i
}
 8000972:	bf00      	nop
	__enable_irq();
	fr = f_mount(&SDFatFs_main, "", 1);
 8000974:	2201      	movs	r2, #1
 8000976:	491f      	ldr	r1, [pc, #124]	@ (80009f4 <main+0xe4>)
 8000978:	481f      	ldr	r0, [pc, #124]	@ (80009f8 <main+0xe8>)
 800097a:	f007 f907 	bl	8007b8c <f_mount>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <main+0xec>)
 8000984:	701a      	strb	r2, [r3, #0]

    fr = f_open(&MyFile, "file3.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000986:	220a      	movs	r2, #10
 8000988:	491d      	ldr	r1, [pc, #116]	@ (8000a00 <main+0xf0>)
 800098a:	481e      	ldr	r0, [pc, #120]	@ (8000a04 <main+0xf4>)
 800098c:	f007 f944 	bl	8007c18 <f_open>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <main+0xec>)
 8000996:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
    while (bytes_written < total_size)
 8000998:	e014      	b.n	80009c4 <main+0xb4>
    {
    	fr = f_write(&MyFile, buffer, bufsize(buffer), &bw);
 800099a:	4813      	ldr	r0, [pc, #76]	@ (80009e8 <main+0xd8>)
 800099c:	f7ff ffa0 	bl	80008e0 <bufsize>
 80009a0:	4603      	mov	r3, r0
 80009a2:	461a      	mov	r2, r3
 80009a4:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <main+0xf8>)
 80009a6:	4910      	ldr	r1, [pc, #64]	@ (80009e8 <main+0xd8>)
 80009a8:	4816      	ldr	r0, [pc, #88]	@ (8000a04 <main+0xf4>)
 80009aa:	f007 fbf2 	bl	8008192 <f_write>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <main+0xec>)
 80009b4:	701a      	strb	r2, [r3, #0]

    	 bytes_written += bw;
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <main+0xfc>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <main+0xf8>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a12      	ldr	r2, [pc, #72]	@ (8000a0c <main+0xfc>)
 80009c2:	6013      	str	r3, [r2, #0]
    while (bytes_written < total_size)
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <main+0xfc>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <main+0x100>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3e4      	bcc.n	800099a <main+0x8a>
    }
  	f_close(&MyFile);
 80009d0:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <main+0xf4>)
 80009d2:	f007 feb0 	bl	8008736 <f_close>
  __ASM volatile ("cpsid i" : : : "memory");
 80009d6:	b672      	cpsid	i
}
 80009d8:	bf00      	nop

  	__disable_irq();
  	uint32_t temp = time_count;
 80009da:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <main+0xe0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80009e0:	b662      	cpsie	i
}
 80009e2:	bf00      	nop

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <main+0xd4>
 80009e8:	20000608 	.word	0x20000608
 80009ec:	20000034 	.word	0x20000034
 80009f0:	20020610 	.word	0x20020610
 80009f4:	08008a40 	.word	0x08008a40
 80009f8:	20000178 	.word	0x20000178
 80009fc:	20000000 	.word	0x20000000
 8000a00:	08008a44 	.word	0x08008a44
 8000a04:	200003b0 	.word	0x200003b0
 8000a08:	20020608 	.word	0x20020608
 8000a0c:	2002060c 	.word	0x2002060c
 8000a10:	20000004 	.word	0x20000004

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_7);
 8000a18:	2007      	movs	r0, #7
 8000a1a:	f7ff febf 	bl	800079c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_7)
 8000a1e:	bf00      	nop
 8000a20:	f7ff fed0 	bl	80007c4 <LL_FLASH_GetLatency>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b07      	cmp	r3, #7
 8000a28:	d1fa      	bne.n	8000a20 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000a2a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8000a2e:	f7ff ff2f 	bl	8000890 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8000a32:	f7ff ff1d 	bl	8000870 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_EnableBypass();
 8000a36:	f7ff fd5f 	bl	80004f8 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8000a3a:	f7ff fd6d 	bl	8000518 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000a3e:	bf00      	nop
 8000a40:	f7ff fd7a 	bl	8000538 <LL_RCC_HSE_IsReady>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d1fa      	bne.n	8000a40 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_25, 432, LL_RCC_PLLP_DIV_2);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8000a50:	2119      	movs	r1, #25
 8000a52:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000a56:	f7ff fe1b 	bl	8000690 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a5a:	f7ff fdf5 	bl	8000648 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a5e:	bf00      	nop
 8000a60:	f7ff fe02 	bl	8000668 <LL_RCC_PLL_IsReady>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d1fa      	bne.n	8000a60 <SystemClock_Config+0x4c>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000a6a:	bf00      	nop
 8000a6c:	f7ff ff24 	bl	80008b8 <LL_PWR_IsActiveFlag_VOS>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0fa      	beq.n	8000a6c <SystemClock_Config+0x58>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff fd94 	bl	80005a4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000a7c:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8000a80:	f7ff fda4 	bl	80005cc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000a84:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000a88:	f7ff fdb4 	bl	80005f4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f7ff fd67 	bl	8000560 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a92:	bf00      	nop
 8000a94:	f7ff fd78 	bl	8000588 <LL_RCC_GetSysClkSource>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b08      	cmp	r3, #8
 8000a9c:	d1fa      	bne.n	8000a94 <SystemClock_Config+0x80>
  {

  }
  LL_SetSystemCoreClock(216000000);
 8000a9e:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <SystemClock_Config+0xac>)
 8000aa0:	f003 fb44 	bl	800412c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000aa4:	200f      	movs	r0, #15
 8000aa6:	f000 fa4f 	bl	8000f48 <HAL_InitTick>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ab0:	f000 f8a0 	bl	8000bf4 <Error_Handler>
  }

   /* Set Timers Clock Prescalers */
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff fdb1 	bl	800061c <LL_RCC_SetTIMPrescaler>
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	0cdfe600 	.word	0x0cdfe600

08000ac4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  LL_RCC_PLLSAI_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_25, 192, LL_RCC_PLLSAIP_DIV_4);
 8000ac8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000acc:	22c0      	movs	r2, #192	@ 0xc0
 8000ace:	2119      	movs	r1, #25
 8000ad0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000ad4:	f7ff fe20 	bl	8000718 <LL_RCC_PLLSAI_ConfigDomain_48M>
  LL_RCC_PLLSAI_Enable();
 8000ad8:	f7ff fdfa 	bl	80006d0 <LL_RCC_PLLSAI_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLLSAI_IsReady() != 1)
 8000adc:	bf00      	nop
 8000ade:	f7ff fe07 	bl	80006f0 <LL_RCC_PLLSAI_IsReady>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d1fa      	bne.n	8000ade <PeriphCommonClock_Config+0x1a>
  {

  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000af6:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <MX_SDMMC1_SD_Init+0x3c>)
 8000af8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b12:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0x0;
 8000b18:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	20000034 	.word	0x20000034
 8000b2c:	40012c00 	.word	0x40012c00

08000b30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <MX_DMA_Init+0x48>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b78 <MX_DMA_Init+0x48>)
 8000b3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <MX_DMA_Init+0x48>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	203b      	movs	r0, #59	@ 0x3b
 8000b54:	f000 fb47 	bl	80011e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b58:	203b      	movs	r0, #59	@ 0x3b
 8000b5a:	f000 fb60 	bl	800121e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2045      	movs	r0, #69	@ 0x45
 8000b64:	f000 fb3f 	bl	80011e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b68:	2045      	movs	r0, #69	@ 0x45
 8000b6a:	f000 fb58 	bl	800121e <HAL_NVIC_EnableIRQ>

}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	463b      	mov	r3, r7
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
 8000b90:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000b92:	2004      	movs	r0, #4
 8000b94:	f7ff fdea 	bl	800076c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f7ff fde7 	bl	800076c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000b9e:	2008      	movs	r0, #8
 8000ba0:	f7ff fde4 	bl	800076c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000ba4:	2080      	movs	r0, #128	@ 0x80
 8000ba6:	f7ff fde1 	bl	800076c <LL_AHB1_GRP1_EnableClock>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000baa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	463b      	mov	r3, r7
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <MX_GPIO_Init+0x50>)
 8000bbe:	f002 fccb 	bl	8003558 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40020800 	.word	0x40020800

08000bd0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  LL_MPU_Disable();
 8000bd4:	f7ff fe1c 	bl	8000810 <LL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  LL_MPU_ConfigRegion(LL_MPU_REGION_NUMBER0, 0x87, 0x0, LL_MPU_REGION_SIZE_4GB|LL_MPU_TEX_LEVEL0|LL_MPU_REGION_NO_ACCESS|LL_MPU_INSTRUCTION_ACCESS_DISABLE|LL_MPU_ACCESS_SHAREABLE|LL_MPU_ACCESS_NOT_CACHEABLE|LL_MPU_ACCESS_NOT_BUFFERABLE);
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <MPU_Config+0x20>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2187      	movs	r1, #135	@ 0x87
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff fe26 	bl	8000830 <LL_MPU_ConfigRegion>
  /* Enables the MPU */
  LL_MPU_Enable(LL_MPU_CTRL_PRIVILEGED_DEFAULT);
 8000be4:	2004      	movs	r0, #4
 8000be6:	f7ff fdfb 	bl	80007e0 <LL_MPU_Enable>

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	1004003e 	.word	0x1004003e

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <Error_Handler+0x8>

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <HAL_MspInit+0x44>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c44 <HAL_MspInit+0x44>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <HAL_MspInit+0x44>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <HAL_MspInit+0x44>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	4a08      	ldr	r2, [pc, #32]	@ (8000c44 <HAL_MspInit+0x44>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_MspInit+0x44>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	@ 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a65      	ldr	r2, [pc, #404]	@ (8000dfc <HAL_SD_MspInit+0x1b4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	f040 80c3 	bne.w	8000df2 <HAL_SD_MspInit+0x1aa>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000c6c:	4b64      	ldr	r3, [pc, #400]	@ (8000e00 <HAL_SD_MspInit+0x1b8>)
 8000c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c70:	4a63      	ldr	r2, [pc, #396]	@ (8000e00 <HAL_SD_MspInit+0x1b8>)
 8000c72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c76:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c78:	4b61      	ldr	r3, [pc, #388]	@ (8000e00 <HAL_SD_MspInit+0x1b8>)
 8000c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	4b5e      	ldr	r3, [pc, #376]	@ (8000e00 <HAL_SD_MspInit+0x1b8>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c88:	4a5d      	ldr	r2, [pc, #372]	@ (8000e00 <HAL_SD_MspInit+0x1b8>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c90:	4b5b      	ldr	r3, [pc, #364]	@ (8000e00 <HAL_SD_MspInit+0x1b8>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9c:	4b58      	ldr	r3, [pc, #352]	@ (8000e00 <HAL_SD_MspInit+0x1b8>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca0:	4a57      	ldr	r2, [pc, #348]	@ (8000e00 <HAL_SD_MspInit+0x1b8>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca8:	4b55      	ldr	r3, [pc, #340]	@ (8000e00 <HAL_SD_MspInit+0x1b8>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000cb4:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cc6:	230c      	movs	r3, #12
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	484c      	ldr	r0, [pc, #304]	@ (8000e04 <HAL_SD_MspInit+0x1bc>)
 8000cd2:	f000 fe65 	bl	80019a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4845      	ldr	r0, [pc, #276]	@ (8000e08 <HAL_SD_MspInit+0x1c0>)
 8000cf2:	f000 fe55 	bl	80019a0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000cf6:	4b45      	ldr	r3, [pc, #276]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000cf8:	4a45      	ldr	r2, [pc, #276]	@ (8000e10 <HAL_SD_MspInit+0x1c8>)
 8000cfa:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000cfc:	4b43      	ldr	r3, [pc, #268]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000cfe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d02:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d04:	4b41      	ldr	r3, [pc, #260]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0a:	4b40      	ldr	r3, [pc, #256]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d10:	4b3e      	ldr	r3, [pc, #248]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d16:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d18:	4b3c      	ldr	r3, [pc, #240]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d1a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d1e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d20:	4b3a      	ldr	r3, [pc, #232]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d26:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000d28:	4b38      	ldr	r3, [pc, #224]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d2a:	2220      	movs	r2, #32
 8000d2c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d2e:	4b37      	ldr	r3, [pc, #220]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d34:	4b35      	ldr	r3, [pc, #212]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d36:	2204      	movs	r2, #4
 8000d38:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d3a:	4b34      	ldr	r3, [pc, #208]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000d40:	4b32      	ldr	r3, [pc, #200]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d42:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d46:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d48:	4b30      	ldr	r3, [pc, #192]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d4a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000d4e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000d50:	482e      	ldr	r0, [pc, #184]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d52:	f000 fa7f 	bl	8001254 <HAL_DMA_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8000d5c:	f7ff ff4a 	bl	8000bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a2a      	ldr	r2, [pc, #168]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d64:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d66:	4a29      	ldr	r2, [pc, #164]	@ (8000e0c <HAL_SD_MspInit+0x1c4>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000d6c:	4b29      	ldr	r3, [pc, #164]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000e18 <HAL_SD_MspInit+0x1d0>)
 8000d70:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000d72:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000d74:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d78:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d7a:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000d7c:	2240      	movs	r2, #64	@ 0x40
 8000d7e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d80:	4b24      	ldr	r3, [pc, #144]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d86:	4b23      	ldr	r3, [pc, #140]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000d88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d8c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000d90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d94:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d96:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000d98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d9c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000da0:	2220      	movs	r2, #32
 8000da2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000dac:	2204      	movs	r2, #4
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000db0:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000db2:	2203      	movs	r2, #3
 8000db4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000db8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000dc0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000dc4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000dc6:	4813      	ldr	r0, [pc, #76]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000dc8:	f000 fa44 	bl	8001254 <HAL_DMA_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8000dd2:	f7ff ff0f 	bl	8000bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000dda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <HAL_SD_MspInit+0x1cc>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2031      	movs	r0, #49	@ 0x31
 8000de8:	f000 f9fd 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000dec:	2031      	movs	r0, #49	@ 0x31
 8000dee:	f000 fa16 	bl	800121e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	@ 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40012c00 	.word	0x40012c00
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020c00 	.word	0x40020c00
 8000e0c:	200000b8 	.word	0x200000b8
 8000e10:	40026458 	.word	0x40026458
 8000e14:	20000118 	.word	0x20000118
 8000e18:	400264a0 	.word	0x400264a0

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <NMI_Handler+0x4>

08000e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <MemManage_Handler+0x4>

08000e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e72:	f000 f899 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <SDMMC1_IRQHandler+0x10>)
 8000e82:	f001 f9b9 	bl	80021f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000034 	.word	0x20000034

08000e90 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <DMA2_Stream3_IRQHandler+0x10>)
 8000e96:	f000 fb0d 	bl	80014b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000b8 	.word	0x200000b8

08000ea4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <DMA2_Stream6_IRQHandler+0x10>)
 8000eaa:	f000 fb03 	bl	80014b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000118 	.word	0x20000118

08000eb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <SystemInit+0x20>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ec2:	4a05      	ldr	r2, [pc, #20]	@ (8000ed8 <SystemInit+0x20>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ee0:	f7ff ffea 	bl	8000eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	@ (8000f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f007 fd69 	bl	80089e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0e:	f7ff fcff 	bl	8000910 <main>
  bx  lr    
 8000f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f14:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f20:	08008f10 	.word	0x08008f10
  ldr r2, =_sbss
 8000f24:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f28:	20020abc 	.word	0x20020abc

08000f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC_IRQHandler>

08000f2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f32:	2003      	movs	r0, #3
 8000f34:	f000 f94c 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f38:	200f      	movs	r0, #15
 8000f3a:	f000 f805 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3e:	f7ff fe5f 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f967 	bl	800123a <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 f92f 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000010 	.word	0x20000010
 8000fa4:	2000000c 	.word	0x2000000c

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000010 	.word	0x20000010
 8000fcc:	20020614 	.word	0x20020614

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20020614 	.word	0x20020614

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffde 	bl	8000fd0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000010 	.word	0x20000010

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	4313      	orrs	r3, r2
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	05fa0000 	.word	0x05fa0000

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	@ (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	@ (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	@ (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	@ 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	@ 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff29 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff3e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff8e 	bl	8001124 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff31 	bl	8001094 <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffa2 	bl	800118c <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff feb6 	bl	8000fd0 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e099      	b.n	80013a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2202      	movs	r2, #2
 8001274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001290:	e00f      	b.n	80012b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001292:	f7ff fe9d 	bl	8000fd0 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b05      	cmp	r3, #5
 800129e:	d908      	bls.n	80012b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2220      	movs	r2, #32
 80012a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2203      	movs	r2, #3
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e078      	b.n	80013a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e8      	bne.n	8001292 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	4b38      	ldr	r3, [pc, #224]	@ (80013ac <HAL_DMA_Init+0x158>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4313      	orrs	r3, r2
 8001302:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001308:	2b04      	cmp	r3, #4
 800130a:	d107      	bne.n	800131c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	4313      	orrs	r3, r2
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4313      	orrs	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f023 0307 	bic.w	r3, r3, #7
 8001332:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	4313      	orrs	r3, r2
 800133c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001342:	2b04      	cmp	r3, #4
 8001344:	d117      	bne.n	8001376 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00e      	beq.n	8001376 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 faa5 	bl	80018a8 <DMA_CheckFifoParam>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2240      	movs	r2, #64	@ 0x40
 8001368:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001372:	2301      	movs	r3, #1
 8001374:	e016      	b.n	80013a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fa5c 	bl	800183c <DMA_CalcBaseAndBitshift>
 8001384:	4603      	mov	r3, r0
 8001386:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800138c:	223f      	movs	r2, #63	@ 0x3f
 800138e:	409a      	lsls	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	f010803f 	.word	0xf010803f

080013b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_DMA_Start_IT+0x26>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e048      	b.n	8001468 <HAL_DMA_Start_IT+0xb8>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d137      	bne.n	800145a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2202      	movs	r2, #2
 80013ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 f9ee 	bl	80017e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001408:	223f      	movs	r2, #63	@ 0x3f
 800140a:	409a      	lsls	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0216 	orr.w	r2, r2, #22
 800141e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800142e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	2b00      	cmp	r3, #0
 8001436:	d007      	beq.n	8001448 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0208 	orr.w	r2, r2, #8
 8001446:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0201 	orr.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e005      	b.n	8001466 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001462:	2302      	movs	r3, #2
 8001464:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001466:	7dfb      	ldrb	r3, [r7, #23]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d004      	beq.n	800148e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2280      	movs	r2, #128	@ 0x80
 8001488:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00c      	b.n	80014a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2205      	movs	r2, #5
 8001492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0201 	bic.w	r2, r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80014c0:	4b8e      	ldr	r3, [pc, #568]	@ (80016fc <HAL_DMA_IRQHandler+0x248>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a8e      	ldr	r2, [pc, #568]	@ (8001700 <HAL_DMA_IRQHandler+0x24c>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0a9b      	lsrs	r3, r3, #10
 80014cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014de:	2208      	movs	r2, #8
 80014e0:	409a      	lsls	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d01a      	beq.n	8001520 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0204 	bic.w	r2, r2, #4
 8001506:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150c:	2208      	movs	r2, #8
 800150e:	409a      	lsls	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001518:	f043 0201 	orr.w	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001524:	2201      	movs	r2, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d012      	beq.n	8001556 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001542:	2201      	movs	r2, #1
 8001544:	409a      	lsls	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800154e:	f043 0202 	orr.w	r2, r3, #2
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155a:	2204      	movs	r2, #4
 800155c:	409a      	lsls	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00b      	beq.n	800158c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001578:	2204      	movs	r2, #4
 800157a:	409a      	lsls	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001584:	f043 0204 	orr.w	r2, r3, #4
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001590:	2210      	movs	r2, #16
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d043      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d03c      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ae:	2210      	movs	r2, #16
 80015b0:	409a      	lsls	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d018      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d024      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	4798      	blx	r3
 80015e2:	e01f      	b.n	8001624 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01b      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	4798      	blx	r3
 80015f4:	e016      	b.n	8001624 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d107      	bne.n	8001614 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0208 	bic.w	r2, r2, #8
 8001612:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001628:	2220      	movs	r2, #32
 800162a:	409a      	lsls	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 808f 	beq.w	8001754 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 8087 	beq.w	8001754 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800164a:	2220      	movs	r2, #32
 800164c:	409a      	lsls	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b05      	cmp	r3, #5
 800165c:	d136      	bne.n	80016cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0216 	bic.w	r2, r2, #22
 800166c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800167c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	d103      	bne.n	800168e <HAL_DMA_IRQHandler+0x1da>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0208 	bic.w	r2, r2, #8
 800169c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a2:	223f      	movs	r2, #63	@ 0x3f
 80016a4:	409a      	lsls	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d07e      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	4798      	blx	r3
        }
        return;
 80016ca:	e079      	b.n	80017c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d01d      	beq.n	8001716 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10d      	bne.n	8001704 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d031      	beq.n	8001754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	4798      	blx	r3
 80016f8:	e02c      	b.n	8001754 <HAL_DMA_IRQHandler+0x2a0>
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008
 8001700:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001708:	2b00      	cmp	r3, #0
 800170a:	d023      	beq.n	8001754 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	4798      	blx	r3
 8001714:	e01e      	b.n	8001754 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10f      	bne.n	8001744 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0210 	bic.w	r2, r2, #16
 8001732:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001758:	2b00      	cmp	r3, #0
 800175a:	d032      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d022      	beq.n	80017ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2205      	movs	r2, #5
 800176c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3301      	adds	r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	d307      	bcc.n	800179c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f2      	bne.n	8001780 <HAL_DMA_IRQHandler+0x2cc>
 800179a:	e000      	b.n	800179e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800179c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	4798      	blx	r3
 80017be:	e000      	b.n	80017c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80017c0:	bf00      	nop
    }
  }
}
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80017fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b40      	cmp	r3, #64	@ 0x40
 800180c:	d108      	bne.n	8001820 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800181e:	e007      	b.n	8001830 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	60da      	str	r2, [r3, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	3b10      	subs	r3, #16
 800184c:	4a13      	ldr	r2, [pc, #76]	@ (800189c <DMA_CalcBaseAndBitshift+0x60>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	091b      	lsrs	r3, r3, #4
 8001854:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001856:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <DMA_CalcBaseAndBitshift+0x64>)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d908      	bls.n	800187c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <DMA_CalcBaseAndBitshift+0x68>)
 8001872:	4013      	ands	r3, r2
 8001874:	1d1a      	adds	r2, r3, #4
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	659a      	str	r2, [r3, #88]	@ 0x58
 800187a:	e006      	b.n	800188a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <DMA_CalcBaseAndBitshift+0x68>)
 8001884:	4013      	ands	r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	aaaaaaab 	.word	0xaaaaaaab
 80018a0:	08008aa4 	.word	0x08008aa4
 80018a4:	fffffc00 	.word	0xfffffc00

080018a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d11f      	bne.n	8001902 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d856      	bhi.n	8001976 <DMA_CheckFifoParam+0xce>
 80018c8:	a201      	add	r2, pc, #4	@ (adr r2, 80018d0 <DMA_CheckFifoParam+0x28>)
 80018ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ce:	bf00      	nop
 80018d0:	080018e1 	.word	0x080018e1
 80018d4:	080018f3 	.word	0x080018f3
 80018d8:	080018e1 	.word	0x080018e1
 80018dc:	08001977 	.word	0x08001977
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d046      	beq.n	800197a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018f0:	e043      	b.n	800197a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80018fa:	d140      	bne.n	800197e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001900:	e03d      	b.n	800197e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800190a:	d121      	bne.n	8001950 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b03      	cmp	r3, #3
 8001910:	d837      	bhi.n	8001982 <DMA_CheckFifoParam+0xda>
 8001912:	a201      	add	r2, pc, #4	@ (adr r2, 8001918 <DMA_CheckFifoParam+0x70>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	08001929 	.word	0x08001929
 800191c:	0800192f 	.word	0x0800192f
 8001920:	08001929 	.word	0x08001929
 8001924:	08001941 	.word	0x08001941
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
      break;
 800192c:	e030      	b.n	8001990 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001932:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d025      	beq.n	8001986 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800193e:	e022      	b.n	8001986 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001944:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001948:	d11f      	bne.n	800198a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800194e:	e01c      	b.n	800198a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d903      	bls.n	800195e <DMA_CheckFifoParam+0xb6>
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d003      	beq.n	8001964 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800195c:	e018      	b.n	8001990 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
      break;
 8001962:	e015      	b.n	8001990 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001968:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00e      	beq.n	800198e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
      break;
 8001974:	e00b      	b.n	800198e <DMA_CheckFifoParam+0xe6>
      break;
 8001976:	bf00      	nop
 8001978:	e00a      	b.n	8001990 <DMA_CheckFifoParam+0xe8>
      break;
 800197a:	bf00      	nop
 800197c:	e008      	b.n	8001990 <DMA_CheckFifoParam+0xe8>
      break;
 800197e:	bf00      	nop
 8001980:	e006      	b.n	8001990 <DMA_CheckFifoParam+0xe8>
      break;
 8001982:	bf00      	nop
 8001984:	e004      	b.n	8001990 <DMA_CheckFifoParam+0xe8>
      break;
 8001986:	bf00      	nop
 8001988:	e002      	b.n	8001990 <DMA_CheckFifoParam+0xe8>
      break;   
 800198a:	bf00      	nop
 800198c:	e000      	b.n	8001990 <DMA_CheckFifoParam+0xe8>
      break;
 800198e:	bf00      	nop
    }
  } 
  
  return status; 
 8001990:	7bfb      	ldrb	r3, [r7, #15]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	@ 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e175      	b.n	8001cac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	429a      	cmp	r2, r3
 80019da:	f040 8164 	bne.w	8001ca6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d005      	beq.n	80019f6 <HAL_GPIO_Init+0x56>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d130      	bne.n	8001a58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 0201 	and.w	r2, r3, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d017      	beq.n	8001a94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d123      	bne.n	8001ae8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	08da      	lsrs	r2, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3208      	adds	r2, #8
 8001aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3208      	adds	r2, #8
 8001ae2:	69b9      	ldr	r1, [r7, #24]
 8001ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80be 	beq.w	8001ca6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	4b66      	ldr	r3, [pc, #408]	@ (8001cc4 <HAL_GPIO_Init+0x324>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	4a65      	ldr	r2, [pc, #404]	@ (8001cc4 <HAL_GPIO_Init+0x324>)
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b36:	4b63      	ldr	r3, [pc, #396]	@ (8001cc4 <HAL_GPIO_Init+0x324>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b42:	4a61      	ldr	r2, [pc, #388]	@ (8001cc8 <HAL_GPIO_Init+0x328>)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a58      	ldr	r2, [pc, #352]	@ (8001ccc <HAL_GPIO_Init+0x32c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d037      	beq.n	8001bde <HAL_GPIO_Init+0x23e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a57      	ldr	r2, [pc, #348]	@ (8001cd0 <HAL_GPIO_Init+0x330>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d031      	beq.n	8001bda <HAL_GPIO_Init+0x23a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a56      	ldr	r2, [pc, #344]	@ (8001cd4 <HAL_GPIO_Init+0x334>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d02b      	beq.n	8001bd6 <HAL_GPIO_Init+0x236>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a55      	ldr	r2, [pc, #340]	@ (8001cd8 <HAL_GPIO_Init+0x338>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d025      	beq.n	8001bd2 <HAL_GPIO_Init+0x232>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a54      	ldr	r2, [pc, #336]	@ (8001cdc <HAL_GPIO_Init+0x33c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01f      	beq.n	8001bce <HAL_GPIO_Init+0x22e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a53      	ldr	r2, [pc, #332]	@ (8001ce0 <HAL_GPIO_Init+0x340>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x22a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a52      	ldr	r2, [pc, #328]	@ (8001ce4 <HAL_GPIO_Init+0x344>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x226>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a51      	ldr	r2, [pc, #324]	@ (8001ce8 <HAL_GPIO_Init+0x348>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x222>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a50      	ldr	r2, [pc, #320]	@ (8001cec <HAL_GPIO_Init+0x34c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x21e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4f      	ldr	r2, [pc, #316]	@ (8001cf0 <HAL_GPIO_Init+0x350>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x21a>
 8001bb6:	2309      	movs	r3, #9
 8001bb8:	e012      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bba:	230a      	movs	r3, #10
 8001bbc:	e010      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	e00e      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	e00c      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	e00a      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bca:	2305      	movs	r3, #5
 8001bcc:	e008      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e004      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bde:	2300      	movs	r3, #0
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f002 0203 	and.w	r2, r2, #3
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	4093      	lsls	r3, r2
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bf0:	4935      	ldr	r1, [pc, #212]	@ (8001cc8 <HAL_GPIO_Init+0x328>)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c22:	4a34      	ldr	r2, [pc, #208]	@ (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c28:	4b32      	ldr	r3, [pc, #200]	@ (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c4c:	4a29      	ldr	r2, [pc, #164]	@ (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c52:	4b28      	ldr	r3, [pc, #160]	@ (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c76:	4a1f      	ldr	r2, [pc, #124]	@ (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <HAL_GPIO_Init+0x354>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca0:	4a14      	ldr	r2, [pc, #80]	@ (8001cf4 <HAL_GPIO_Init+0x354>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	f67f ae86 	bls.w	80019c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3724      	adds	r7, #36	@ 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40020800 	.word	0x40020800
 8001cd8:	40020c00 	.word	0x40020c00
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40021400 	.word	0x40021400
 8001ce4:	40021800 	.word	0x40021800
 8001ce8:	40021c00 	.word	0x40021c00
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	40022400 	.word	0x40022400
 8001cf4:	40013c00 	.word	0x40013c00

08001cf8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e022      	b.n	8001d50 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d105      	bne.n	8001d22 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7fe ff93 	bl	8000c48 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2203      	movs	r2, #3
 8001d26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f814 	bl	8001d58 <HAL_SD_InitCard>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00a      	b.n	8001d50 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	b08e      	sub	sp, #56	@ 0x38
 8001d5c:	af04      	add	r7, sp, #16
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8001d74:	2376      	movs	r3, #118	@ 0x76
 8001d76:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681d      	ldr	r5, [r3, #0]
 8001d7c:	466c      	mov	r4, sp
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d90:	4628      	mov	r0, r5
 8001d92:	f001 fc55 	bl	8003640 <SDMMC_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8001d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e059      	b.n	8001e5c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001db6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 fc89 	bl	80036d4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dd0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	f7ff f908 	bl	8000fe8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fff3 	bl	8002dc4 <SD_PowerON>
 8001dde:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e02e      	b.n	8001e5c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 ff12 	bl	8002c28 <SD_InitCard>
 8001e04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00b      	beq.n	8001e24 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e01b      	b.n	8001e5c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f001 fce3 	bl	80037f8 <SDMMC_CmdBlockLength>
 8001e32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00f      	beq.n	8001e5a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a09      	ldr	r2, [pc, #36]	@ (8001e64 <HAL_SD_InitCard+0x10c>)
 8001e40:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3728      	adds	r7, #40	@ 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bdb0      	pop	{r4, r5, r7, pc}
 8001e64:	004005ff 	.word	0x004005ff

08001e68 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	@ 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d107      	bne.n	8001e90 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e84:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0c3      	b.n	8002018 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	f040 80bc 	bne.w	8002016 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	441a      	add	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d907      	bls.n	8001ec2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0aa      	b.n	8002018 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8001ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	4a4e      	ldr	r2, [pc, #312]	@ (8002020 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8001ee8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	4a4d      	ldr	r2, [pc, #308]	@ (8002024 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8001ef0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3380      	adds	r3, #128	@ 0x80
 8001f28:	4619      	mov	r1, r3
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	025b      	lsls	r3, r3, #9
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	f7ff fa3d 	bl	80013b0 <HAL_DMA_Start_IT>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d017      	beq.n	8001f6c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8001f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a35      	ldr	r2, [pc, #212]	@ (8002028 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8001f52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f58:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e055      	b.n	8002018 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0208 	orr.w	r2, r2, #8
 8001f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d002      	beq.n	8001f8a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8001f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f86:	025b      	lsls	r3, r3, #9
 8001f88:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	025b      	lsls	r3, r3, #9
 8001f94:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8001f96:	2390      	movs	r3, #144	@ 0x90
 8001f98:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f107 0210 	add.w	r2, r7, #16
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 fbf5 	bl	80037a0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d90a      	bls.n	8001fd2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2282      	movs	r2, #130	@ 0x82
 8001fc0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f001 fc59 	bl	8003880 <SDMMC_CmdReadMultiBlock>
 8001fce:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001fd0:	e009      	b.n	8001fe6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2281      	movs	r2, #129	@ 0x81
 8001fd6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 fc2c 	bl	800383c <SDMMC_CmdReadSingleBlock>
 8001fe4:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8001fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d012      	beq.n	8002012 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8002028 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8001ff2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e002      	b.n	8002018 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e000      	b.n	8002018 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8002016:	2302      	movs	r3, #2
  }
}
 8002018:	4618      	mov	r0, r3
 800201a:	3730      	adds	r7, #48	@ 0x30
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	08002a37 	.word	0x08002a37
 8002024:	08002aa9 	.word	0x08002aa9
 8002028:	004005ff 	.word	0x004005ff

0800202c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08c      	sub	sp, #48	@ 0x30
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d107      	bne.n	8002054 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002048:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0c6      	b.n	80021e2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	f040 80bf 	bne.w	80021e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	441a      	add	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002072:	429a      	cmp	r2, r3
 8002074:	d907      	bls.n	8002086 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e0ad      	b.n	80021e2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2203      	movs	r2, #3
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 021a 	orr.w	r2, r2, #26
 80020a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020aa:	4a50      	ldr	r2, [pc, #320]	@ (80021ec <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80020ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b2:	4a4f      	ldr	r2, [pc, #316]	@ (80021f0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80020b4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ba:	2200      	movs	r2, #0
 80020bc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d002      	beq.n	80020cc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80020c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c8:	025b      	lsls	r3, r3, #9
 80020ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d90a      	bls.n	80020e8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	22a0      	movs	r2, #160	@ 0xa0
 80020d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020de:	4618      	mov	r0, r3
 80020e0:	f001 fc12 	bl	8003908 <SDMMC_CmdWriteMultiBlock>
 80020e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80020e6:	e009      	b.n	80020fc <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2290      	movs	r2, #144	@ 0x90
 80020ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020f4:	4618      	mov	r0, r3
 80020f6:	f001 fbe5 	bl	80038c4 <SDMMC_CmdWriteSingleBlock>
 80020fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80020fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d012      	beq.n	8002128 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a3b      	ldr	r2, [pc, #236]	@ (80021f4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002108:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800210e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002110:	431a      	orrs	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e05c      	b.n	80021e2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0208 	orr.w	r2, r2, #8
 8002136:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213c:	2240      	movs	r2, #64	@ 0x40
 800213e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3380      	adds	r3, #128	@ 0x80
 8002168:	461a      	mov	r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	025b      	lsls	r3, r3, #9
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	f7ff f91e 	bl	80013b0 <HAL_DMA_Start_IT>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01a      	beq.n	80021b0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 021a 	bic.w	r2, r2, #26
 8002188:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a19      	ldr	r2, [pc, #100]	@ (80021f4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002190:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002196:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e018      	b.n	80021e2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80021b0:	f04f 33ff 	mov.w	r3, #4294967295
 80021b4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	025b      	lsls	r3, r3, #9
 80021ba:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80021bc:	2390      	movs	r3, #144	@ 0x90
 80021be:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80021c8:	2301      	movs	r3, #1
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f107 0210 	add.w	r2, r7, #16
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f001 fae2 	bl	80037a0 <SDMMC_ConfigData>

      return HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	e000      	b.n	80021e2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80021e0:	2302      	movs	r3, #2
  }
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3730      	adds	r7, #48	@ 0x30
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	08002a0d 	.word	0x08002a0d
 80021f0:	08002aa9 	.word	0x08002aa9
 80021f4:	004005ff 	.word	0x004005ff

080021f8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_SD_IRQHandler+0x2e>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 ffef 	bl	8003202 <SD_Read_IT>
 8002224:	e15a      	b.n	80024dc <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 808d 	beq.w	8002350 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800223e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b9a      	ldr	r3, [pc, #616]	@ (80024b4 <HAL_SD_IRQHandler+0x2bc>)
 800224c:	400b      	ands	r3, r1
 800224e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d039      	beq.n	80022de <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d104      	bne.n	800227e <HAL_SD_IRQHandler+0x86>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	2b00      	cmp	r3, #0
 800227c:	d011      	beq.n	80022a2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f001 fb62 	bl	800394c <SDMMC_CmdStopTransfer>
 8002288:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f921 	bl	80024e4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80022aa:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d104      	bne.n	80022ce <HAL_SD_IRQHandler+0xd6>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f001 ffd4 	bl	800427c <HAL_SD_RxCpltCallback>
 80022d4:	e102      	b.n	80024dc <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f001 ffc6 	bl	8004268 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80022dc:	e0fe      	b.n	80024dc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80f9 	beq.w	80024dc <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d011      	beq.n	8002318 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 fb27 	bl	800394c <SDMMC_CmdStopTransfer>
 80022fe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8e6 	bl	80024e4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 80dc 	bne.w	80024dc <HAL_SD_IRQHandler+0x2e4>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 80d6 	bne.w	80024dc <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0208 	bic.w	r2, r2, #8
 800233e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f001 ff8d 	bl	8004268 <HAL_SD_TxCpltCallback>
}
 800234e:	e0c5      	b.n	80024dc <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_SD_IRQHandler+0x178>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 ff9b 	bl	80032a4 <SD_Write_IT>
 800236e:	e0b5      	b.n	80024dc <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002376:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80ae 	beq.w	80024dc <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002392:	f043 0202 	orr.w	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ac:	f043 0208 	orr.w	r2, r3, #8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c6:	f043 0220 	orr.w	r2, r3, #32
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e0:	f043 0210 	orr.w	r2, r3, #16
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f240 523a 	movw	r2, #1338	@ 0x53a
 80023f0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8002400:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f001 faa0 	bl	800394c <SDMMC_CmdStopTransfer>
 800240c:	4602      	mov	r2, r0
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f857 	bl	80024e4 <HAL_SD_ErrorCallback>
}
 8002436:	e051      	b.n	80024dc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243e:	2b00      	cmp	r3, #0
 8002440:	d04c      	beq.n	80024dc <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	d104      	bne.n	8002456 <HAL_SD_IRQHandler+0x25e>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	d011      	beq.n	800247a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245a:	4a17      	ldr	r2, [pc, #92]	@ (80024b8 <HAL_SD_IRQHandler+0x2c0>)
 800245c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff f804 	bl	8001470 <HAL_DMA_Abort_IT>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d036      	beq.n	80024dc <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fb6a 	bl	8002b4c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002478:	e030      	b.n	80024dc <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d104      	bne.n	800248e <HAL_SD_IRQHandler+0x296>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d018      	beq.n	80024c0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <HAL_SD_IRQHandler+0x2c4>)
 8002494:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe ffe8 	bl	8001470 <HAL_DMA_Abort_IT>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01a      	beq.n	80024dc <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fb85 	bl	8002bba <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80024b0:	e014      	b.n	80024dc <HAL_SD_IRQHandler+0x2e4>
 80024b2:	bf00      	nop
 80024b4:	ffff3ec5 	.word	0xffff3ec5
 80024b8:	08002b4d 	.word	0x08002b4d
 80024bc:	08002bbb 	.word	0x08002bbb
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f001 febd 	bl	8004254 <HAL_SD_AbortCallback>
}
 80024da:	e7ff      	b.n	80024dc <HAL_SD_IRQHandler+0x2e4>
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002506:	0f9b      	lsrs	r3, r3, #30
 8002508:	b2da      	uxtb	r2, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002512:	0e9b      	lsrs	r3, r3, #26
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	b2da      	uxtb	r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002524:	0e1b      	lsrs	r3, r3, #24
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	b2da      	uxtb	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002536:	0c1b      	lsrs	r3, r3, #16
 8002538:	b2da      	uxtb	r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	b2da      	uxtb	r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800254e:	b2da      	uxtb	r2, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002558:	0d1b      	lsrs	r3, r3, #20
 800255a:	b29a      	uxth	r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	b2da      	uxtb	r2, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002576:	0bdb      	lsrs	r3, r3, #15
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	b2da      	uxtb	r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002588:	0b9b      	lsrs	r3, r3, #14
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	b2da      	uxtb	r2, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800259a:	0b5b      	lsrs	r3, r3, #13
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025ac:	0b1b      	lsrs	r3, r3, #12
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2200      	movs	r2, #0
 80025be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d163      	bne.n	8002690 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025cc:	009a      	lsls	r2, r3, #2
 80025ce:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025d2:	4013      	ands	r3, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80025d8:	0f92      	lsrs	r2, r2, #30
 80025da:	431a      	orrs	r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025e4:	0edb      	lsrs	r3, r3, #27
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025f6:	0e1b      	lsrs	r3, r3, #24
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002608:	0d5b      	lsrs	r3, r3, #21
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	b2da      	uxtb	r2, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800261a:	0c9b      	lsrs	r3, r3, #18
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	b2da      	uxtb	r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800262c:	0bdb      	lsrs	r3, r3, #15
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	b2da      	uxtb	r2, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	7e1b      	ldrb	r3, [r3, #24]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	3302      	adds	r3, #2
 8002650:	2201      	movs	r2, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800265a:	fb03 f202 	mul.w	r2, r3, r2
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	7a1b      	ldrb	r3, [r3, #8]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	2201      	movs	r2, #1
 800266e:	409a      	lsls	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800267c:	0a52      	lsrs	r2, r2, #9
 800267e:	fb03 f202 	mul.w	r2, r3, r2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800268c:	661a      	str	r2, [r3, #96]	@ 0x60
 800268e:	e031      	b.n	80026f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002694:	2b01      	cmp	r3, #1
 8002696:	d11d      	bne.n	80026d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800269c:	041b      	lsls	r3, r3, #16
 800269e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026a6:	0c1b      	lsrs	r3, r3, #16
 80026a8:	431a      	orrs	r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	3301      	adds	r3, #1
 80026b4:	029a      	lsls	r2, r3, #10
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	661a      	str	r2, [r3, #96]	@ 0x60
 80026d2:	e00f      	b.n	80026f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a58      	ldr	r2, [pc, #352]	@ (800283c <HAL_SD_GetCardCSD+0x344>)
 80026da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e09d      	b.n	8002830 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026f8:	0b9b      	lsrs	r3, r3, #14
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	b2da      	uxtb	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800270a:	09db      	lsrs	r3, r3, #7
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002712:	b2da      	uxtb	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002722:	b2da      	uxtb	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272c:	0fdb      	lsrs	r3, r3, #31
 800272e:	b2da      	uxtb	r2, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002738:	0f5b      	lsrs	r3, r3, #29
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	b2da      	uxtb	r2, r3
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	b2da      	uxtb	r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275c:	0d9b      	lsrs	r3, r3, #22
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	b2da      	uxtb	r2, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276e:	0d5b      	lsrs	r3, r3, #21
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	b2da      	uxtb	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278a:	0c1b      	lsrs	r3, r3, #16
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279e:	0bdb      	lsrs	r3, r3, #15
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	0b9b      	lsrs	r3, r3, #14
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c6:	0b5b      	lsrs	r3, r3, #13
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027da:	0b1b      	lsrs	r3, r3, #12
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ee:	0a9b      	lsrs	r3, r3, #10
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	b2da      	uxtb	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800281e:	b2da      	uxtb	r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	004005ff 	.word	0x004005ff

08002840 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002898:	b5b0      	push	{r4, r5, r7, lr}
 800289a:	b08e      	sub	sp, #56	@ 0x38
 800289c:	af04      	add	r7, sp, #16
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2203      	movs	r2, #3
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d02e      	beq.n	8002916 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028be:	d106      	bne.n	80028ce <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80028cc:	e029      	b.n	8002922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028d4:	d10a      	bne.n	80028ec <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fb2a 	bl	8002f30 <SD_WideBus_Enable>
 80028dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80028ea:	e01a      	b.n	8002922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fb67 	bl	8002fc6 <SD_WideBus_Disable>
 80028f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	639a      	str	r2, [r3, #56]	@ 0x38
 8002906:	e00c      	b.n	8002922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	639a      	str	r2, [r3, #56]	@ 0x38
 8002914:	e005      	b.n	8002922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a26      	ldr	r2, [pc, #152]	@ (80029c8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002930:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002940:	e01f      	b.n	8002982 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681d      	ldr	r5, [r3, #0]
 8002968:	466c      	mov	r4, sp
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002976:	f107 0308 	add.w	r3, r7, #8
 800297a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800297c:	4628      	mov	r0, r5
 800297e:	f000 fe5f 	bl	8003640 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800298a:	4618      	mov	r0, r3
 800298c:	f000 ff34 	bl	80037f8 <SDMMC_CmdBlockLength>
 8002990:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00c      	beq.n	80029b2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800299e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80029ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3728      	adds	r7, #40	@ 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bdb0      	pop	{r4, r5, r7, pc}
 80029c6:	bf00      	nop
 80029c8:	004005ff 	.word	0x004005ff

080029cc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fa7e 	bl	8002ee0 <SD_SendStatus>
 80029e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	0a5b      	lsrs	r3, r3, #9
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002a02:	693b      	ldr	r3, [r7, #16]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a28:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a42:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a48:	2b82      	cmp	r3, #130	@ 0x82
 8002a4a:	d111      	bne.n	8002a70 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 ff7b 	bl	800394c <SDMMC_CmdStopTransfer>
 8002a56:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7ff fd3a 	bl	80024e4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0208 	bic.w	r2, r2, #8
 8002a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002a88:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f001 fbef 	bl	800427c <HAL_SD_RxCpltCallback>
#endif
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe fe86 	bl	80017c8 <HAL_DMA_GetError>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d03e      	beq.n	8002b40 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d002      	beq.n	8002ade <SD_DMAError+0x36>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d12d      	bne.n	8002b3a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a19      	ldr	r2, [pc, #100]	@ (8002b48 <SD_DMAError+0xa0>)
 8002ae4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8002af4:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002b02:	6978      	ldr	r0, [r7, #20]
 8002b04:	f7ff ff62 	bl	80029cc <HAL_SD_GetCardState>
 8002b08:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b06      	cmp	r3, #6
 8002b0e:	d002      	beq.n	8002b16 <SD_DMAError+0x6e>
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d10a      	bne.n	8002b2c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 ff16 	bl	800394c <SDMMC_CmdStopTransfer>
 8002b20:	4602      	mov	r2, r0
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b26:	431a      	orrs	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2200      	movs	r2, #0
 8002b38:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002b3a:	6978      	ldr	r0, [r7, #20]
 8002b3c:	f7ff fcd2 	bl	80024e4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8002b40:	bf00      	nop
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	004005ff 	.word	0x004005ff

08002b4c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b58:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002b62:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f7ff ff31 	bl	80029cc <HAL_SD_GetCardState>
 8002b6a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b06      	cmp	r3, #6
 8002b7e:	d002      	beq.n	8002b86 <SD_DMATxAbort+0x3a>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d10a      	bne.n	8002b9c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fede 	bl	800394c <SDMMC_CmdStopTransfer>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b96:	431a      	orrs	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d103      	bne.n	8002bac <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f001 fb55 	bl	8004254 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002baa:	e002      	b.n	8002bb2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7ff fc99 	bl	80024e4 <HAL_SD_ErrorCallback>
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002bd0:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f7ff fefa 	bl	80029cc <HAL_SD_GetCardState>
 8002bd8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d002      	beq.n	8002bf4 <SD_DMARxAbort+0x3a>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b05      	cmp	r3, #5
 8002bf2:	d10a      	bne.n	8002c0a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fea7 	bl	800394c <SDMMC_CmdStopTransfer>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c04:	431a      	orrs	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d103      	bne.n	8002c1a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f001 fb1e 	bl	8004254 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002c18:	e002      	b.n	8002c20 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff fc62 	bl	80024e4 <HAL_SD_ErrorCallback>
}
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c28:	b5b0      	push	{r4, r5, r7, lr}
 8002c2a:	b094      	sub	sp, #80	@ 0x50
 8002c2c:	af04      	add	r7, sp, #16
 8002c2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002c30:	2301      	movs	r3, #1
 8002c32:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fd59 	bl	80036f0 <SDMMC_GetPowerState>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d102      	bne.n	8002c4a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c44:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c48:	e0b8      	b.n	8002dbc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d02f      	beq.n	8002cb2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 ff83 	bl	8003b62 <SDMMC_CmdSendCID>
 8002c5c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <SD_InitCard+0x40>
    {
      return errorstate;
 8002c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c66:	e0a9      	b.n	8002dbc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fd83 	bl	800377a <SDMMC_GetResponse>
 8002c74:	4602      	mov	r2, r0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2104      	movs	r1, #4
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fd7a 	bl	800377a <SDMMC_GetResponse>
 8002c86:	4602      	mov	r2, r0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2108      	movs	r1, #8
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fd71 	bl	800377a <SDMMC_GetResponse>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	210c      	movs	r1, #12
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fd68 	bl	800377a <SDMMC_GetResponse>
 8002caa:	4602      	mov	r2, r0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d00d      	beq.n	8002cd6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f107 020e 	add.w	r2, r7, #14
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 ff89 	bl	8003bdc <SDMMC_CmdSetRelAdd>
 8002cca:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <SD_InitCard+0xae>
    {
      return errorstate;
 8002cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cd4:	e072      	b.n	8002dbc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d036      	beq.n	8002d4c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002cde:	89fb      	ldrh	r3, [r7, #14]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cee:	041b      	lsls	r3, r3, #16
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	f000 ff53 	bl	8003b9e <SDMMC_CmdSendCSD>
 8002cf8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d02:	e05b      	b.n	8002dbc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fd35 	bl	800377a <SDMMC_GetResponse>
 8002d10:	4602      	mov	r2, r0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fd2c 	bl	800377a <SDMMC_GetResponse>
 8002d22:	4602      	mov	r2, r0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2108      	movs	r1, #8
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fd23 	bl	800377a <SDMMC_GetResponse>
 8002d34:	4602      	mov	r2, r0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	210c      	movs	r1, #12
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fd1a 	bl	800377a <SDMMC_GetResponse>
 8002d46:	4602      	mov	r2, r0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2104      	movs	r1, #4
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fd11 	bl	800377a <SDMMC_GetResponse>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	0d1a      	lsrs	r2, r3, #20
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002d60:	f107 0310 	add.w	r3, r7, #16
 8002d64:	4619      	mov	r1, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff fbc6 	bl	80024f8 <HAL_SD_GetCardCSD>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d72:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002d76:	e021      	b.n	8002dbc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6819      	ldr	r1, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	2200      	movs	r2, #0
 8002d84:	461c      	mov	r4, r3
 8002d86:	4615      	mov	r5, r2
 8002d88:	4622      	mov	r2, r4
 8002d8a:	462b      	mov	r3, r5
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	f000 fdff 	bl	8003990 <SDMMC_CmdSelDesel>
 8002d92:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <SD_InitCard+0x176>
  {
    return errorstate;
 8002d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d9c:	e00e      	b.n	8002dbc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681d      	ldr	r5, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	466c      	mov	r4, sp
 8002da6:	f103 0210 	add.w	r2, r3, #16
 8002daa:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002db0:	3304      	adds	r3, #4
 8002db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db4:	4628      	mov	r0, r5
 8002db6:	f000 fc43 	bl	8003640 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3740      	adds	r7, #64	@ 0x40
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bdb0      	pop	{r4, r5, r7, pc}

08002dc4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fdfa 	bl	80039d6 <SDMMC_CmdGoIdleState>
 8002de2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <SD_PowerON+0x2a>
  {
    return errorstate;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	e072      	b.n	8002ed4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fe0d 	bl	8003a12 <SDMMC_CmdOperCond>
 8002df8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00d      	beq.n	8002e1c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fde3 	bl	80039d6 <SDMMC_CmdGoIdleState>
 8002e10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <SD_PowerON+0x5e>
    {
      return errorstate;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	e05b      	b.n	8002ed4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d137      	bne.n	8002e9a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fe0d 	bl	8003a50 <SDMMC_CmdAppCommand>
 8002e36:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d02d      	beq.n	8002e9a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e3e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002e42:	e047      	b.n	8002ed4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fe00 	bl	8003a50 <SDMMC_CmdAppCommand>
 8002e50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <SD_PowerON+0x98>
    {
      return errorstate;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	e03b      	b.n	8002ed4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	491e      	ldr	r1, [pc, #120]	@ (8002edc <SD_PowerON+0x118>)
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fe16 	bl	8003a94 <SDMMC_CmdAppOperCommand>
 8002e68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e70:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002e74:	e02e      	b.n	8002ed4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fc7c 	bl	800377a <SDMMC_GetResponse>
 8002e82:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	0fdb      	lsrs	r3, r3, #31
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <SD_PowerON+0xcc>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <SD_PowerON+0xce>
 8002e90:	2300      	movs	r3, #0
 8002e92:	613b      	str	r3, [r7, #16]

    count++;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	3301      	adds	r3, #1
 8002e98:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d802      	bhi.n	8002eaa <SD_PowerON+0xe6>
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0cc      	beq.n	8002e44 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d902      	bls.n	8002eba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002eb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eb8:	e00c      	b.n	8002ed4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002eca:	e002      	b.n	8002ed2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	c1100000 	.word	0xc1100000

08002ee0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002ef0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002ef4:	e018      	b.n	8002f28 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	4619      	mov	r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	f000 fe8b 	bl	8003c1e <SDMMC_CmdSendStatus>
 8002f08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	e009      	b.n	8002f28 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fc2d 	bl	800377a <SDMMC_GetResponse>
 8002f20:	4602      	mov	r2, r0
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fc17 	bl	800377a <SDMMC_GetResponse>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f56:	d102      	bne.n	8002f5e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002f58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f5c:	e02f      	b.n	8002fbe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002f5e:	f107 030c 	add.w	r3, r7, #12
 8002f62:	4619      	mov	r1, r3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f879 	bl	800305c <SD_FindSCR>
 8002f6a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	e023      	b.n	8002fbe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01c      	beq.n	8002fba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f88:	041b      	lsls	r3, r3, #16
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f000 fd5f 	bl	8003a50 <SDMMC_CmdAppCommand>
 8002f92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	e00f      	b.n	8002fbe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fd99 	bl	8003adc <SDMMC_CmdBusWidth>
 8002faa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	e003      	b.n	8002fbe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e001      	b.n	8002fbe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002fba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fbcc 	bl	800377a <SDMMC_GetResponse>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fec:	d102      	bne.n	8002ff4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002fee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ff2:	e02f      	b.n	8003054 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002ff4:	f107 030c 	add.w	r3, r7, #12
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f82e 	bl	800305c <SD_FindSCR>
 8003000:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	e023      	b.n	8003054 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01c      	beq.n	8003050 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800301e:	041b      	lsls	r3, r3, #16
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f000 fd14 	bl	8003a50 <SDMMC_CmdAppCommand>
 8003028:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	e00f      	b.n	8003054 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fd4e 	bl	8003adc <SDMMC_CmdBusWidth>
 8003040:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	e003      	b.n	8003054 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800304c:	2300      	movs	r3, #0
 800304e:	e001      	b.n	8003054 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003050:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800305c:	b590      	push	{r4, r7, lr}
 800305e:	b08f      	sub	sp, #60	@ 0x3c
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003066:	f7fd ffb3 	bl	8000fd0 <HAL_GetTick>
 800306a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003070:	2300      	movs	r3, #0
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2108      	movs	r1, #8
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fbb8 	bl	80037f8 <SDMMC_CmdBlockLength>
 8003088:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800308a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003092:	e0b2      	b.n	80031fa <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	4619      	mov	r1, r3
 80030a0:	4610      	mov	r0, r2
 80030a2:	f000 fcd5 	bl	8003a50 <SDMMC_CmdAppCommand>
 80030a6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80030a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80030ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b0:	e0a3      	b.n	80031fa <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80030b8:	2308      	movs	r3, #8
 80030ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80030bc:	2330      	movs	r3, #48	@ 0x30
 80030be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80030c0:	2302      	movs	r3, #2
 80030c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80030c8:	2301      	movs	r3, #1
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f107 0210 	add.w	r2, r7, #16
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fb62 	bl	80037a0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fd1d 	bl	8003b20 <SDMMC_CmdSendSCR>
 80030e6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80030e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d02a      	beq.n	8003144 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80030ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f0:	e083      	b.n	80031fa <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00f      	beq.n	8003120 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	f107 0208 	add.w	r2, r7, #8
 800310c:	18d4      	adds	r4, r2, r3
 800310e:	4608      	mov	r0, r1
 8003110:	f000 fac2 	bl	8003698 <SDMMC_ReadFIFO>
 8003114:	4603      	mov	r3, r0
 8003116:	6023      	str	r3, [r4, #0]
      index++;
 8003118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311a:	3301      	adds	r3, #1
 800311c:	637b      	str	r3, [r7, #52]	@ 0x34
 800311e:	e006      	b.n	800312e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003126:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d012      	beq.n	8003154 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800312e:	f7fd ff4f 	bl	8000fd0 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d102      	bne.n	8003144 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800313e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003142:	e05a      	b.n	80031fa <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314a:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0cf      	beq.n	80030f2 <SD_FindSCR+0x96>
 8003152:	e000      	b.n	8003156 <SD_FindSCR+0xfa>
      break;
 8003154:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2208      	movs	r2, #8
 800316a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800316c:	2308      	movs	r3, #8
 800316e:	e044      	b.n	80031fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2202      	movs	r2, #2
 8003184:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003186:	2302      	movs	r3, #2
 8003188:	e037      	b.n	80031fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2220      	movs	r2, #32
 800319e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80031a0:	2320      	movs	r3, #32
 80031a2:	e02a      	b.n	80031fa <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80031ac:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	061a      	lsls	r2, r3, #24
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80031ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	0a1b      	lsrs	r3, r3, #8
 80031c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80031c4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	0e1b      	lsrs	r3, r3, #24
 80031ca:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80031cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ce:	601a      	str	r2, [r3, #0]
    scr++;
 80031d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d2:	3304      	adds	r3, #4
 80031d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	061a      	lsls	r2, r3, #24
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80031e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80031ec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	0e1b      	lsrs	r3, r3, #24
 80031f2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80031f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	373c      	adds	r7, #60	@ 0x3c
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd90      	pop	{r4, r7, pc}

08003202 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003214:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d03f      	beq.n	800329c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	e033      	b.n	800328a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fa36 	bl	8003698 <SDMMC_ReadFIFO>
 800322c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3301      	adds	r3, #1
 800323a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	3b01      	subs	r3, #1
 8003240:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	0a1b      	lsrs	r3, r3, #8
 8003246:	b2da      	uxtb	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3301      	adds	r3, #1
 8003250:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	3b01      	subs	r3, #1
 8003256:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	0c1b      	lsrs	r3, r3, #16
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3301      	adds	r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	3b01      	subs	r3, #1
 800326c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	0e1b      	lsrs	r3, r3, #24
 8003272:	b2da      	uxtb	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3301      	adds	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	3b01      	subs	r3, #1
 8003282:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3301      	adds	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b07      	cmp	r3, #7
 800328e:	d9c8      	bls.n	8003222 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800329c:	bf00      	nop
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d043      	beq.n	8003346 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	e037      	b.n	8003334 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3301      	adds	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	021a      	lsls	r2, r3, #8
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3301      	adds	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	041a      	lsls	r2, r3, #16
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	3301      	adds	r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	3b01      	subs	r3, #1
 8003304:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	061a      	lsls	r2, r3, #24
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
 8003310:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3301      	adds	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	3b01      	subs	r3, #1
 800331c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f107 0208 	add.w	r2, r7, #8
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f000 f9c2 	bl	80036b2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	3301      	adds	r3, #1
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b07      	cmp	r3, #7
 8003338:	d9c4      	bls.n	80032c4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8003346:	bf00      	nop
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800334e:	b480      	push	{r7}
 8003350:	b089      	sub	sp, #36	@ 0x24
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	fab3 f383 	clz	r3, r3
 8003370:	b2db      	uxtb	r3, r3
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	2103      	movs	r1, #3
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	401a      	ands	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	61bb      	str	r3, [r7, #24]
  return result;
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	fa01 f303 	lsl.w	r3, r1, r3
 800339a:	431a      	orrs	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	601a      	str	r2, [r3, #0]
}
 80033a0:	bf00      	nop
 80033a2:	3724      	adds	r7, #36	@ 0x24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	43db      	mvns	r3, r3
 80033c0:	401a      	ands	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	605a      	str	r2, [r3, #4]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80033dc:	b480      	push	{r7}
 80033de:	b089      	sub	sp, #36	@ 0x24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	613b      	str	r3, [r7, #16]
  return result;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	2103      	movs	r1, #3
 8003404:	fa01 f303 	lsl.w	r3, r1, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	401a      	ands	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	61bb      	str	r3, [r7, #24]
  return result;
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	431a      	orrs	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800342e:	bf00      	nop
 8003430:	3724      	adds	r7, #36	@ 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800343a:	b480      	push	{r7}
 800343c:	b089      	sub	sp, #36	@ 0x24
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	613b      	str	r3, [r7, #16]
  return result;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	2103      	movs	r1, #3
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	401a      	ands	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	fa93 f3a3 	rbit	r3, r3
 8003474:	61bb      	str	r3, [r7, #24]
  return result;
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	fab3 f383 	clz	r3, r3
 800347c:	b2db      	uxtb	r3, r3
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	431a      	orrs	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	60da      	str	r2, [r3, #12]
}
 800348c:	bf00      	nop
 800348e:	3724      	adds	r7, #36	@ 0x24
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003498:	b480      	push	{r7}
 800349a:	b089      	sub	sp, #36	@ 0x24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a1a      	ldr	r2, [r3, #32]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	613b      	str	r3, [r7, #16]
  return result;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	210f      	movs	r1, #15
 80034c0:	fa01 f303 	lsl.w	r3, r1, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	401a      	ands	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	fa93 f3a3 	rbit	r3, r3
 80034d2:	61bb      	str	r3, [r7, #24]
  return result;
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	431a      	orrs	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80034ea:	bf00      	nop
 80034ec:	3724      	adds	r7, #36	@ 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b089      	sub	sp, #36	@ 0x24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	613b      	str	r3, [r7, #16]
  return result;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	210f      	movs	r1, #15
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	401a      	ands	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	61bb      	str	r3, [r7, #24]
  return result;
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	fa01 f303 	lsl.w	r3, r1, r3
 8003546:	431a      	orrs	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800354c:	bf00      	nop
 800354e:	3724      	adds	r7, #36	@ 0x24
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	613b      	str	r3, [r7, #16]
  return result;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003582:	e051      	b.n	8003628 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	2101      	movs	r1, #1
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d043      	beq.n	8003622 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d003      	beq.n	80035aa <LL_GPIO_Init+0x52>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d10e      	bne.n	80035c8 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	461a      	mov	r2, r3
 80035b0:	69b9      	ldr	r1, [r7, #24]
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ff12 	bl	80033dc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	461a      	mov	r2, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fef2 	bl	80033ac <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	461a      	mov	r2, r3
 80035ce:	69b9      	ldr	r1, [r7, #24]
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff ff32 	bl	800343a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d11a      	bne.n	8003614 <LL_GPIO_Init+0xbc>
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	60bb      	str	r3, [r7, #8]
  return result;
 80035ea:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80035ec:	fab3 f383 	clz	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b07      	cmp	r3, #7
 80035f4:	d807      	bhi.n	8003606 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	461a      	mov	r2, r3
 80035fc:	69b9      	ldr	r1, [r7, #24]
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ff4a 	bl	8003498 <LL_GPIO_SetAFPin_0_7>
 8003604:	e006      	b.n	8003614 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	461a      	mov	r2, r3
 800360c:	69b9      	ldr	r1, [r7, #24]
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ff71 	bl	80034f6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	461a      	mov	r2, r3
 800361a:	69b9      	ldr	r1, [r7, #24]
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff fe96 	bl	800334e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3301      	adds	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	fa22 f303 	lsr.w	r3, r2, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1a6      	bne.n	8003584 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8003640:	b084      	sub	sp, #16
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	f107 001c 	add.w	r0, r7, #28
 800364e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003656:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003658:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800365a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800365e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8003662:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8003666:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800366a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	4b07      	ldr	r3, [pc, #28]	@ (8003694 <SDMMC_Init+0x54>)
 8003678:	4013      	ands	r3, r2
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	b004      	add	sp, #16
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	ffff8100 	.word	0xffff8100

08003698 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2203      	movs	r2, #3
 80036e0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0303 	and.w	r3, r3, #3
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800372a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003730:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003736:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	4b06      	ldr	r3, [pc, #24]	@ (800375c <SDMMC_SendCommand+0x50>)
 8003744:	4013      	ands	r3, r2
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	fffff000 	.word	0xfffff000

08003760 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	b2db      	uxtb	r3, r3
}
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800377a:	b480      	push	{r7}
 800377c:	b085      	sub	sp, #20
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3314      	adds	r3, #20
 8003788:	461a      	mov	r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	4413      	add	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
}  
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80037c6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80037cc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80037d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037de:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0

}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003806:	2310      	movs	r3, #16
 8003808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800380a:	2340      	movs	r3, #64	@ 0x40
 800380c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003816:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003818:	f107 0308 	add.w	r3, r7, #8
 800381c:	4619      	mov	r1, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ff74 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8003824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003828:	2110      	movs	r1, #16
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fa1a 	bl	8003c64 <SDMMC_GetCmdResp1>
 8003830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003832:	69fb      	ldr	r3, [r7, #28]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800384a:	2311      	movs	r3, #17
 800384c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800384e:	2340      	movs	r3, #64	@ 0x40
 8003850:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003856:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800385a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800385c:	f107 0308 	add.w	r3, r7, #8
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ff52 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8003868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386c:	2111      	movs	r1, #17
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f9f8 	bl	8003c64 <SDMMC_GetCmdResp1>
 8003874:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003876:	69fb      	ldr	r3, [r7, #28]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3720      	adds	r7, #32
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800388e:	2312      	movs	r3, #18
 8003890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003892:	2340      	movs	r3, #64	@ 0x40
 8003894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800389a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800389e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80038a0:	f107 0308 	add.w	r3, r7, #8
 80038a4:	4619      	mov	r1, r3
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff30 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80038ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b0:	2112      	movs	r1, #18
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f9d6 	bl	8003c64 <SDMMC_GetCmdResp1>
 80038b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038ba:	69fb      	ldr	r3, [r7, #28]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3720      	adds	r7, #32
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80038d2:	2318      	movs	r3, #24
 80038d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80038d6:	2340      	movs	r3, #64	@ 0x40
 80038d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80038de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80038e4:	f107 0308 	add.w	r3, r7, #8
 80038e8:	4619      	mov	r1, r3
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff ff0e 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80038f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f4:	2118      	movs	r1, #24
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f9b4 	bl	8003c64 <SDMMC_GetCmdResp1>
 80038fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038fe:	69fb      	ldr	r3, [r7, #28]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003916:	2319      	movs	r3, #25
 8003918:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800391a:	2340      	movs	r3, #64	@ 0x40
 800391c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003926:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003928:	f107 0308 	add.w	r3, r7, #8
 800392c:	4619      	mov	r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff feec 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8003934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003938:	2119      	movs	r1, #25
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f992 	bl	8003c64 <SDMMC_GetCmdResp1>
 8003940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003942:	69fb      	ldr	r3, [r7, #28]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3720      	adds	r7, #32
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003958:	230c      	movs	r3, #12
 800395a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800395c:	2340      	movs	r3, #64	@ 0x40
 800395e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003964:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003968:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800396a:	f107 0308 	add.w	r3, r7, #8
 800396e:	4619      	mov	r1, r3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff fecb 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8003976:	4a05      	ldr	r2, [pc, #20]	@ (800398c <SDMMC_CmdStopTransfer+0x40>)
 8003978:	210c      	movs	r1, #12
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f972 	bl	8003c64 <SDMMC_GetCmdResp1>
 8003980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003982:	69fb      	ldr	r3, [r7, #28]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	05f5e100 	.word	0x05f5e100

08003990 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	@ 0x28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80039a0:	2307      	movs	r3, #7
 80039a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80039a4:	2340      	movs	r3, #64	@ 0x40
 80039a6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80039ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039b0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80039b2:	f107 0310 	add.w	r3, r7, #16
 80039b6:	4619      	mov	r1, r3
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7ff fea7 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80039be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c2:	2107      	movs	r1, #7
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f94d 	bl	8003c64 <SDMMC_GetCmdResp1>
 80039ca:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3728      	adds	r7, #40	@ 0x28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b088      	sub	sp, #32
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80039ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80039f4:	f107 0308 	add.w	r3, r7, #8
 80039f8:	4619      	mov	r1, r3
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff fe86 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fb67 	bl	80040d4 <SDMMC_GetCmdError>
 8003a06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a08:	69fb      	ldr	r3, [r7, #28]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b088      	sub	sp, #32
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003a1a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8003a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003a20:	2308      	movs	r3, #8
 8003a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003a24:	2340      	movs	r3, #64	@ 0x40
 8003a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003a2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003a32:	f107 0308 	add.w	r3, r7, #8
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff fe67 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fafa 	bl	8004038 <SDMMC_GetCmdResp7>
 8003a44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a46:	69fb      	ldr	r3, [r7, #28]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003a5e:	2337      	movs	r3, #55	@ 0x37
 8003a60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003a62:	2340      	movs	r3, #64	@ 0x40
 8003a64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003a70:	f107 0308 	add.w	r3, r7, #8
 8003a74:	4619      	mov	r1, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff fe48 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8003a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a80:	2137      	movs	r1, #55	@ 0x37
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8ee 	bl	8003c64 <SDMMC_GetCmdResp1>
 8003a88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <SDMMC_CmdAppOperCommand+0x44>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003aa6:	2329      	movs	r3, #41	@ 0x29
 8003aa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003aaa:	2340      	movs	r3, #64	@ 0x40
 8003aac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ab6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003ab8:	f107 0308 	add.w	r3, r7, #8
 8003abc:	4619      	mov	r1, r3
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fe24 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fa03 	bl	8003ed0 <SDMMC_GetCmdResp3>
 8003aca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003acc:	69fb      	ldr	r3, [r7, #28]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	80100000 	.word	0x80100000

08003adc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003aea:	2306      	movs	r3, #6
 8003aec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003aee:	2340      	movs	r3, #64	@ 0x40
 8003af0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003af6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003afa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003afc:	f107 0308 	add.w	r3, r7, #8
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fe02 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8003b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0c:	2106      	movs	r1, #6
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f8a8 	bl	8003c64 <SDMMC_GetCmdResp1>
 8003b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b16:	69fb      	ldr	r3, [r7, #28]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003b2c:	2333      	movs	r3, #51	@ 0x33
 8003b2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003b30:	2340      	movs	r3, #64	@ 0x40
 8003b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003b38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003b3e:	f107 0308 	add.w	r3, r7, #8
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fde1 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8003b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4e:	2133      	movs	r1, #51	@ 0x33
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f887 	bl	8003c64 <SDMMC_GetCmdResp1>
 8003b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b58:	69fb      	ldr	r3, [r7, #28]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b088      	sub	sp, #32
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8003b72:	23c0      	movs	r3, #192	@ 0xc0
 8003b74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003b80:	f107 0308 	add.w	r3, r7, #8
 8003b84:	4619      	mov	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff fdc0 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f957 	bl	8003e40 <SDMMC_GetCmdResp2>
 8003b92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b94:	69fb      	ldr	r3, [r7, #28]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b088      	sub	sp, #32
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003bac:	2309      	movs	r3, #9
 8003bae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8003bb0:	23c0      	movs	r3, #192	@ 0xc0
 8003bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003bb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003bbe:	f107 0308 	add.w	r3, r7, #8
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fda1 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f938 	bl	8003e40 <SDMMC_GetCmdResp2>
 8003bd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003bea:	2303      	movs	r3, #3
 8003bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003bee:	2340      	movs	r3, #64	@ 0x40
 8003bf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003bfc:	f107 0308 	add.w	r3, r7, #8
 8003c00:	4619      	mov	r1, r3
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff fd82 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	2103      	movs	r1, #3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f99d 	bl	8003f4c <SDMMC_GetCmdResp6>
 8003c12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c14:	69fb      	ldr	r3, [r7, #28]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b088      	sub	sp, #32
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003c2c:	230d      	movs	r3, #13
 8003c2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003c30:	2340      	movs	r3, #64	@ 0x40
 8003c32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003c38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003c3e:	f107 0308 	add.w	r3, r7, #8
 8003c42:	4619      	mov	r1, r3
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff fd61 	bl	800370c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8003c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4e:	210d      	movs	r1, #13
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f807 	bl	8003c64 <SDMMC_GetCmdResp1>
 8003c56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c58:	69fb      	ldr	r3, [r7, #28]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003c72:	4b70      	ldr	r3, [pc, #448]	@ (8003e34 <SDMMC_GetCmdResp1+0x1d0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a70      	ldr	r2, [pc, #448]	@ (8003e38 <SDMMC_GetCmdResp1+0x1d4>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	0a5a      	lsrs	r2, r3, #9
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	1e5a      	subs	r2, r3, #1
 8003c8a:	61fa      	str	r2, [r7, #28]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003c90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003c94:	e0c9      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0ef      	beq.n	8003c86 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1ea      	bne.n	8003c86 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d004      	beq.n	8003cc6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	e0b1      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d004      	beq.n	8003cdc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0a6      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	22c5      	movs	r2, #197	@ 0xc5
 8003ce0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7ff fd3c 	bl	8003760 <SDMMC_GetCommandResponse>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	7afb      	ldrb	r3, [r7, #11]
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d001      	beq.n	8003cf6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e099      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff fd3e 	bl	800377a <SDMMC_GetResponse>
 8003cfe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4b4e      	ldr	r3, [pc, #312]	@ (8003e3c <SDMMC_GetCmdResp1+0x1d8>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e08d      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	da02      	bge.n	8003d1a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003d14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d18:	e087      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003d24:	2340      	movs	r3, #64	@ 0x40
 8003d26:	e080      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003d32:	2380      	movs	r3, #128	@ 0x80
 8003d34:	e079      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003d40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d44:	e071      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003d50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d54:	e069      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003d60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d64:	e061      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003d70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d74:	e059      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003d80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d84:	e051      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003d90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d94:	e049      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003da0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003da4:	e041      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003db0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003db4:	e039      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003dc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dc4:	e031      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003dd0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003dd4:	e029      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003de0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003de4:	e021      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003df0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003df4:	e019      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003e00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003e04:	e011      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003e10:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003e14:	e009      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003e20:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003e24:	e001      	b.n	8003e2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003e26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3720      	adds	r7, #32
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000008 	.word	0x20000008
 8003e38:	10624dd3 	.word	0x10624dd3
 8003e3c:	fdffe008 	.word	0xfdffe008

08003e40 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e48:	4b1f      	ldr	r3, [pc, #124]	@ (8003ec8 <SDMMC_GetCmdResp2+0x88>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003ecc <SDMMC_GetCmdResp2+0x8c>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	0a5b      	lsrs	r3, r3, #9
 8003e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e58:	fb02 f303 	mul.w	r3, r2, r3
 8003e5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1e5a      	subs	r2, r3, #1
 8003e62:	60fa      	str	r2, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003e6c:	e026      	b.n	8003ebc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0ef      	beq.n	8003e5e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ea      	bne.n	8003e5e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d004      	beq.n	8003e9e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2204      	movs	r2, #4
 8003e98:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	e00e      	b.n	8003ebc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d004      	beq.n	8003eb4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e003      	b.n	8003ebc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	22c5      	movs	r2, #197	@ 0xc5
 8003eb8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	20000008 	.word	0x20000008
 8003ecc:	10624dd3 	.word	0x10624dd3

08003ed0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f44 <SDMMC_GetCmdResp3+0x74>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1a      	ldr	r2, [pc, #104]	@ (8003f48 <SDMMC_GetCmdResp3+0x78>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	0a5b      	lsrs	r3, r3, #9
 8003ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1e5a      	subs	r2, r3, #1
 8003ef2:	60fa      	str	r2, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ef8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003efc:	e01b      	b.n	8003f36 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ef      	beq.n	8003eee <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ea      	bne.n	8003eee <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2204      	movs	r2, #4
 8003f28:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f2a:	2304      	movs	r3, #4
 8003f2c:	e003      	b.n	8003f36 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	22c5      	movs	r2, #197	@ 0xc5
 8003f32:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000008 	.word	0x20000008
 8003f48:	10624dd3 	.word	0x10624dd3

08003f4c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	460b      	mov	r3, r1
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f5a:	4b35      	ldr	r3, [pc, #212]	@ (8004030 <SDMMC_GetCmdResp6+0xe4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a35      	ldr	r2, [pc, #212]	@ (8004034 <SDMMC_GetCmdResp6+0xe8>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	0a5b      	lsrs	r3, r3, #9
 8003f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	1e5a      	subs	r2, r3, #1
 8003f74:	61fa      	str	r2, [r7, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f7a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003f7e:	e052      	b.n	8004026 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f84:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0ef      	beq.n	8003f70 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1ea      	bne.n	8003f70 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2204      	movs	r2, #4
 8003faa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003fac:	2304      	movs	r3, #4
 8003fae:	e03a      	b.n	8004026 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d004      	beq.n	8003fc6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e02f      	b.n	8004026 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f7ff fbca 	bl	8003760 <SDMMC_GetCommandResponse>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	461a      	mov	r2, r3
 8003fd0:	7afb      	ldrb	r3, [r7, #11]
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d001      	beq.n	8003fda <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e025      	b.n	8004026 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	22c5      	movs	r2, #197	@ 0xc5
 8003fde:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f7ff fbc9 	bl	800377a <SDMMC_GetResponse>
 8003fe8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d106      	bne.n	8004002 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	0c1b      	lsrs	r3, r3, #16
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e011      	b.n	8004026 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800400c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004010:	e009      	b.n	8004026 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800401c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004020:	e001      	b.n	8004026 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004022:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000008 	.word	0x20000008
 8004034:	10624dd3 	.word	0x10624dd3

08004038 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004040:	4b22      	ldr	r3, [pc, #136]	@ (80040cc <SDMMC_GetCmdResp7+0x94>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a22      	ldr	r2, [pc, #136]	@ (80040d0 <SDMMC_GetCmdResp7+0x98>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	0a5b      	lsrs	r3, r3, #9
 800404c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004050:	fb02 f303 	mul.w	r3, r2, r3
 8004054:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1e5a      	subs	r2, r3, #1
 800405a:	60fa      	str	r2, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004060:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004064:	e02c      	b.n	80040c0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800406a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0ef      	beq.n	8004056 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1ea      	bne.n	8004056 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2204      	movs	r2, #4
 8004090:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004092:	2304      	movs	r3, #4
 8004094:	e014      	b.n	80040c0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d004      	beq.n	80040ac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e009      	b.n	80040c0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2240      	movs	r2, #64	@ 0x40
 80040bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80040be:	2300      	movs	r3, #0
  
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	20000008 	.word	0x20000008
 80040d0:	10624dd3 	.word	0x10624dd3

080040d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80040dc:	4b11      	ldr	r3, [pc, #68]	@ (8004124 <SDMMC_GetCmdError+0x50>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a11      	ldr	r2, [pc, #68]	@ (8004128 <SDMMC_GetCmdError+0x54>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	0a5b      	lsrs	r3, r3, #9
 80040e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ec:	fb02 f303 	mul.w	r3, r2, r3
 80040f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1e5a      	subs	r2, r3, #1
 80040f6:	60fa      	str	r2, [r7, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d102      	bne.n	8004102 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80040fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004100:	e009      	b.n	8004116 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f1      	beq.n	80040f2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	22c5      	movs	r2, #197	@ 0xc5
 8004112:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000008 	.word	0x20000008
 8004128:	10624dd3 	.word	0x10624dd3

0800412c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004134:	4a04      	ldr	r2, [pc, #16]	@ (8004148 <LL_SetSystemCoreClock+0x1c>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6013      	str	r3, [r2, #0]
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000008 	.word	0x20000008

0800414c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004150:	4904      	ldr	r1, [pc, #16]	@ (8004164 <MX_FATFS_Init+0x18>)
 8004152:	4805      	ldr	r0, [pc, #20]	@ (8004168 <MX_FATFS_Init+0x1c>)
 8004154:	f004 fb66 	bl	8008824 <FATFS_LinkDriver>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	4b03      	ldr	r3, [pc, #12]	@ (800416c <MX_FATFS_Init+0x20>)
 800415e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004160:	bf00      	nop
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2002061c 	.word	0x2002061c
 8004168:	08008aac 	.word	0x08008aac
 800416c:	20020618 	.word	0x20020618

08004170 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004174:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004176:	4618      	mov	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800418a:	f000 f888 	bl	800429e <BSP_SD_IsDetected>
 800418e:	4603      	mov	r3, r0
 8004190:	2b01      	cmp	r3, #1
 8004192:	d001      	beq.n	8004198 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8004194:	2302      	movs	r3, #2
 8004196:	e005      	b.n	80041a4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8004198:	4804      	ldr	r0, [pc, #16]	@ (80041ac <BSP_SD_Init+0x2c>)
 800419a:	f7fd fdad 	bl	8001cf8 <HAL_SD_Init>
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80041a2:	79fb      	ldrb	r3, [r7, #7]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	20000034 	.word	0x20000034

080041b0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	68f9      	ldr	r1, [r7, #12]
 80041c6:	4806      	ldr	r0, [pc, #24]	@ (80041e0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80041c8:	f7fd fe4e 	bl	8001e68 <HAL_SD_ReadBlocks_DMA>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000034 	.word	0x20000034

080041e4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	68f9      	ldr	r1, [r7, #12]
 80041fa:	4806      	ldr	r0, [pc, #24]	@ (8004214 <BSP_SD_WriteBlocks_DMA+0x30>)
 80041fc:	f7fd ff16 	bl	800202c <HAL_SD_WriteBlocks_DMA>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800420a:	7dfb      	ldrb	r3, [r7, #23]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20000034 	.word	0x20000034

08004218 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800421c:	4805      	ldr	r0, [pc, #20]	@ (8004234 <BSP_SD_GetCardState+0x1c>)
 800421e:	f7fe fbd5 	bl	80029cc <HAL_SD_GetCardState>
 8004222:	4603      	mov	r3, r0
 8004224:	2b04      	cmp	r3, #4
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
}
 800422e:	4618      	mov	r0, r3
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000034 	.word	0x20000034

08004238 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	4803      	ldr	r0, [pc, #12]	@ (8004250 <BSP_SD_GetCardInfo+0x18>)
 8004244:	f7fe fafc 	bl	8002840 <HAL_SD_GetCardInfo>
}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000034 	.word	0x20000034

08004254 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800425c:	f000 f818 	bl	8004290 <BSP_SD_AbortCallback>
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8004270:	f000 f98c 	bl	800458c <BSP_SD_WriteCpltCallback>
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004284:	f000 f98e 	bl	80045a4 <BSP_SD_ReadCpltCallback>
}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0

}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80042a4:	2301      	movs	r3, #1
 80042a6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	b2db      	uxtb	r3, r3
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80042c0:	f7fc fe86 	bl	8000fd0 <HAL_GetTick>
 80042c4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80042c6:	e006      	b.n	80042d6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80042c8:	f7ff ffa6 	bl	8004218 <BSP_SD_GetCardState>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	e009      	b.n	80042ea <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80042d6:	f7fc fe7b 	bl	8000fd0 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d8f0      	bhi.n	80042c8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80042fe:	4b0b      	ldr	r3, [pc, #44]	@ (800432c <SD_CheckStatus+0x38>)
 8004300:	2201      	movs	r2, #1
 8004302:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004304:	f7ff ff88 	bl	8004218 <BSP_SD_GetCardState>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d107      	bne.n	800431e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800430e:	4b07      	ldr	r3, [pc, #28]	@ (800432c <SD_CheckStatus+0x38>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4b04      	ldr	r3, [pc, #16]	@ (800432c <SD_CheckStatus+0x38>)
 800431c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800431e:	4b03      	ldr	r3, [pc, #12]	@ (800432c <SD_CheckStatus+0x38>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b2db      	uxtb	r3, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000011 	.word	0x20000011

08004330 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800433a:	f7ff ff21 	bl	8004180 <BSP_SD_Init>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d107      	bne.n	8004354 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff ffd4 	bl	80042f4 <SD_CheckStatus>
 800434c:	4603      	mov	r3, r0
 800434e:	461a      	mov	r2, r3
 8004350:	4b04      	ldr	r3, [pc, #16]	@ (8004364 <SD_initialize+0x34>)
 8004352:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004354:	4b03      	ldr	r3, [pc, #12]	@ (8004364 <SD_initialize+0x34>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	b2db      	uxtb	r3, r3
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000011 	.word	0x20000011

08004368 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ffbd 	bl	80042f4 <SD_CheckStatus>
 800437a:	4603      	mov	r3, r0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	4603      	mov	r3, r0
 8004392:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004398:	f247 5030 	movw	r0, #30000	@ 0x7530
 800439c:	f7ff ff8c 	bl	80042b8 <SD_CheckStatusWithTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	da01      	bge.n	80043aa <SD_read+0x26>
  {
    return res;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
 80043a8:	e03b      	b.n	8004422 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	68b8      	ldr	r0, [r7, #8]
 80043b0:	f7ff fefe 	bl	80041b0 <BSP_SD_ReadBlocks_DMA>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d132      	bne.n	8004420 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80043ba:	4b1c      	ldr	r3, [pc, #112]	@ (800442c <SD_read+0xa8>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80043c0:	f7fc fe06 	bl	8000fd0 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80043c6:	bf00      	nop
 80043c8:	4b18      	ldr	r3, [pc, #96]	@ (800442c <SD_read+0xa8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d108      	bne.n	80043e2 <SD_read+0x5e>
 80043d0:	f7fc fdfe 	bl	8000fd0 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f247 522f 	movw	r2, #29999	@ 0x752f
 80043de:	4293      	cmp	r3, r2
 80043e0:	d9f2      	bls.n	80043c8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80043e2:	4b12      	ldr	r3, [pc, #72]	@ (800442c <SD_read+0xa8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
 80043ee:	e017      	b.n	8004420 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80043f0:	4b0e      	ldr	r3, [pc, #56]	@ (800442c <SD_read+0xa8>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80043f6:	f7fc fdeb 	bl	8000fd0 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80043fc:	e007      	b.n	800440e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80043fe:	f7ff ff0b 	bl	8004218 <BSP_SD_GetCardState>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d102      	bne.n	800440e <SD_read+0x8a>
          {
            res = RES_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800440c:	e008      	b.n	8004420 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800440e:	f7fc fddf 	bl	8000fd0 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f247 522f 	movw	r2, #29999	@ 0x752f
 800441c:	4293      	cmp	r3, r2
 800441e:	d9ee      	bls.n	80043fe <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004420:	7dfb      	ldrb	r3, [r7, #23]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20020624 	.word	0x20020624

08004430 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4603      	mov	r3, r0
 800443e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004444:	4b24      	ldr	r3, [pc, #144]	@ (80044d8 <SD_write+0xa8>)
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800444a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800444e:	f7ff ff33 	bl	80042b8 <SD_CheckStatusWithTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	da01      	bge.n	800445c <SD_write+0x2c>
  {
    return res;
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	e038      	b.n	80044ce <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	68b8      	ldr	r0, [r7, #8]
 8004462:	f7ff febf 	bl	80041e4 <BSP_SD_WriteBlocks_DMA>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d12f      	bne.n	80044cc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800446c:	f7fc fdb0 	bl	8000fd0 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004472:	bf00      	nop
 8004474:	4b18      	ldr	r3, [pc, #96]	@ (80044d8 <SD_write+0xa8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d108      	bne.n	800448e <SD_write+0x5e>
 800447c:	f7fc fda8 	bl	8000fd0 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f247 522f 	movw	r2, #29999	@ 0x752f
 800448a:	4293      	cmp	r3, r2
 800448c:	d9f2      	bls.n	8004474 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800448e:	4b12      	ldr	r3, [pc, #72]	@ (80044d8 <SD_write+0xa8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	75fb      	strb	r3, [r7, #23]
 800449a:	e017      	b.n	80044cc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800449c:	4b0e      	ldr	r3, [pc, #56]	@ (80044d8 <SD_write+0xa8>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80044a2:	f7fc fd95 	bl	8000fd0 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80044a8:	e007      	b.n	80044ba <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80044aa:	f7ff feb5 	bl	8004218 <BSP_SD_GetCardState>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d102      	bne.n	80044ba <SD_write+0x8a>
          {
            res = RES_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	75fb      	strb	r3, [r7, #23]
            break;
 80044b8:	e008      	b.n	80044cc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80044ba:	f7fc fd89 	bl	8000fd0 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d9ee      	bls.n	80044aa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80044cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20020620 	.word	0x20020620

080044dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08c      	sub	sp, #48	@ 0x30
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	603a      	str	r2, [r7, #0]
 80044e6:	71fb      	strb	r3, [r7, #7]
 80044e8:	460b      	mov	r3, r1
 80044ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80044f2:	4b25      	ldr	r3, [pc, #148]	@ (8004588 <SD_ioctl+0xac>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <SD_ioctl+0x28>
 8004500:	2303      	movs	r3, #3
 8004502:	e03c      	b.n	800457e <SD_ioctl+0xa2>

  switch (cmd)
 8004504:	79bb      	ldrb	r3, [r7, #6]
 8004506:	2b03      	cmp	r3, #3
 8004508:	d834      	bhi.n	8004574 <SD_ioctl+0x98>
 800450a:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <SD_ioctl+0x34>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004521 	.word	0x08004521
 8004514:	08004529 	.word	0x08004529
 8004518:	08004541 	.word	0x08004541
 800451c:	0800455b 	.word	0x0800455b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004526:	e028      	b.n	800457a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004528:	f107 030c 	add.w	r3, r7, #12
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fe83 	bl	8004238 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800453e:	e01c      	b.n	800457a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004540:	f107 030c 	add.w	r3, r7, #12
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fe77 	bl	8004238 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	b29a      	uxth	r2, r3
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004558:	e00f      	b.n	800457a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800455a:	f107 030c 	add.w	r3, r7, #12
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fe6a 	bl	8004238 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004566:	0a5a      	lsrs	r2, r3, #9
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8004572:	e002      	b.n	800457a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004574:	2304      	movs	r3, #4
 8004576:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800457a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800457e:	4618      	mov	r0, r3
 8004580:	3730      	adds	r7, #48	@ 0x30
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000011 	.word	0x20000011

0800458c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8004590:	4b03      	ldr	r3, [pc, #12]	@ (80045a0 <BSP_SD_WriteCpltCallback+0x14>)
 8004592:	2201      	movs	r2, #1
 8004594:	601a      	str	r2, [r3, #0]
}
 8004596:	bf00      	nop
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	20020620 	.word	0x20020620

080045a4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80045a8:	4b03      	ldr	r3, [pc, #12]	@ (80045b8 <BSP_SD_ReadCpltCallback+0x14>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
}
 80045ae:	bf00      	nop
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	20020624 	.word	0x20020624

080045bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	4a08      	ldr	r2, [pc, #32]	@ (80045ec <disk_status+0x30>)
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	79fa      	ldrb	r2, [r7, #7]
 80045d4:	4905      	ldr	r1, [pc, #20]	@ (80045ec <disk_status+0x30>)
 80045d6:	440a      	add	r2, r1
 80045d8:	7a12      	ldrb	r2, [r2, #8]
 80045da:	4610      	mov	r0, r2
 80045dc:	4798      	blx	r3
 80045de:	4603      	mov	r3, r0
 80045e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20020ab0 	.word	0x20020ab0

080045f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	4a0d      	ldr	r2, [pc, #52]	@ (8004638 <disk_initialize+0x48>)
 8004602:	5cd3      	ldrb	r3, [r2, r3]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d111      	bne.n	800462c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	4a0b      	ldr	r2, [pc, #44]	@ (8004638 <disk_initialize+0x48>)
 800460c:	2101      	movs	r1, #1
 800460e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	4a09      	ldr	r2, [pc, #36]	@ (8004638 <disk_initialize+0x48>)
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	79fa      	ldrb	r2, [r7, #7]
 800461e:	4906      	ldr	r1, [pc, #24]	@ (8004638 <disk_initialize+0x48>)
 8004620:	440a      	add	r2, r1
 8004622:	7a12      	ldrb	r2, [r2, #8]
 8004624:	4610      	mov	r0, r2
 8004626:	4798      	blx	r3
 8004628:	4603      	mov	r3, r0
 800462a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20020ab0 	.word	0x20020ab0

0800463c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800463c:	b590      	push	{r4, r7, lr}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	4603      	mov	r3, r0
 800464a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	4a0a      	ldr	r2, [pc, #40]	@ (8004678 <disk_read+0x3c>)
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	689c      	ldr	r4, [r3, #8]
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	4a07      	ldr	r2, [pc, #28]	@ (8004678 <disk_read+0x3c>)
 800465c:	4413      	add	r3, r2
 800465e:	7a18      	ldrb	r0, [r3, #8]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	47a0      	blx	r4
 8004668:	4603      	mov	r3, r0
 800466a:	75fb      	strb	r3, [r7, #23]
  return res;
 800466c:	7dfb      	ldrb	r3, [r7, #23]
}
 800466e:	4618      	mov	r0, r3
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd90      	pop	{r4, r7, pc}
 8004676:	bf00      	nop
 8004678:	20020ab0 	.word	0x20020ab0

0800467c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800467c:	b590      	push	{r4, r7, lr}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	4603      	mov	r3, r0
 800468a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	4a0a      	ldr	r2, [pc, #40]	@ (80046b8 <disk_write+0x3c>)
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	68dc      	ldr	r4, [r3, #12]
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	4a07      	ldr	r2, [pc, #28]	@ (80046b8 <disk_write+0x3c>)
 800469c:	4413      	add	r3, r2
 800469e:	7a18      	ldrb	r0, [r3, #8]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	47a0      	blx	r4
 80046a8:	4603      	mov	r3, r0
 80046aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd90      	pop	{r4, r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20020ab0 	.word	0x20020ab0

080046bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	603a      	str	r2, [r7, #0]
 80046c6:	71fb      	strb	r3, [r7, #7]
 80046c8:	460b      	mov	r3, r1
 80046ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	4a09      	ldr	r2, [pc, #36]	@ (80046f4 <disk_ioctl+0x38>)
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	79fa      	ldrb	r2, [r7, #7]
 80046da:	4906      	ldr	r1, [pc, #24]	@ (80046f4 <disk_ioctl+0x38>)
 80046dc:	440a      	add	r2, r1
 80046de:	7a10      	ldrb	r0, [r2, #8]
 80046e0:	79b9      	ldrb	r1, [r7, #6]
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	4798      	blx	r3
 80046e6:	4603      	mov	r3, r0
 80046e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20020ab0 	.word	0x20020ab0

080046f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3301      	adds	r3, #1
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004708:	89fb      	ldrh	r3, [r7, #14]
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	b21a      	sxth	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b21b      	sxth	r3, r3
 8004714:	4313      	orrs	r3, r2
 8004716:	b21b      	sxth	r3, r3
 8004718:	81fb      	strh	r3, [r7, #14]
	return rv;
 800471a:	89fb      	ldrh	r3, [r7, #14]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3303      	adds	r3, #3
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	3202      	adds	r2, #2
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	3201      	adds	r2, #1
 800474e:	7812      	ldrb	r2, [r2, #0]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	7812      	ldrb	r2, [r2, #0]
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004760:	68fb      	ldr	r3, [r7, #12]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800476e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004772:	b09d      	sub	sp, #116	@ 0x74
 8004774:	af00      	add	r7, sp, #0
 8004776:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8004778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800477a:	3307      	adds	r3, #7
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2200      	movs	r2, #0
 8004782:	469a      	mov	sl, r3
 8004784:	4693      	mov	fp, r2
 8004786:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800478a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800478e:	f04f 0000 	mov.w	r0, #0
 8004792:	f04f 0100 	mov.w	r1, #0
 8004796:	0219      	lsls	r1, r3, #8
 8004798:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800479c:	0210      	lsls	r0, r2, #8
 800479e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047a0:	3306      	adds	r3, #6
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2200      	movs	r2, #0
 80047a8:	461c      	mov	r4, r3
 80047aa:	4615      	mov	r5, r2
 80047ac:	ea40 0804 	orr.w	r8, r0, r4
 80047b0:	ea41 0905 	orr.w	r9, r1, r5
 80047b4:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 80047b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80047bc:	f04f 0000 	mov.w	r0, #0
 80047c0:	f04f 0100 	mov.w	r1, #0
 80047c4:	0219      	lsls	r1, r3, #8
 80047c6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80047ca:	0210      	lsls	r0, r2, #8
 80047cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047ce:	3305      	adds	r3, #5
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2200      	movs	r2, #0
 80047d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047d8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80047da:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80047de:	4623      	mov	r3, r4
 80047e0:	4303      	orrs	r3, r0
 80047e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047e4:	462b      	mov	r3, r5
 80047e6:	430b      	orrs	r3, r1
 80047e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ea:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80047ee:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 80047f2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80047f6:	f04f 0000 	mov.w	r0, #0
 80047fa:	f04f 0100 	mov.w	r1, #0
 80047fe:	0219      	lsls	r1, r3, #8
 8004800:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004804:	0210      	lsls	r0, r2, #8
 8004806:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004808:	3304      	adds	r3, #4
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2200      	movs	r2, #0
 8004810:	653b      	str	r3, [r7, #80]	@ 0x50
 8004812:	657a      	str	r2, [r7, #84]	@ 0x54
 8004814:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004818:	4623      	mov	r3, r4
 800481a:	4303      	orrs	r3, r0
 800481c:	623b      	str	r3, [r7, #32]
 800481e:	462b      	mov	r3, r5
 8004820:	430b      	orrs	r3, r1
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
 8004824:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004828:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800482c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004830:	f04f 0000 	mov.w	r0, #0
 8004834:	f04f 0100 	mov.w	r1, #0
 8004838:	0219      	lsls	r1, r3, #8
 800483a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800483e:	0210      	lsls	r0, r2, #8
 8004840:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004842:	3303      	adds	r3, #3
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2200      	movs	r2, #0
 800484a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800484c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800484e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004852:	4623      	mov	r3, r4
 8004854:	4303      	orrs	r3, r0
 8004856:	61bb      	str	r3, [r7, #24]
 8004858:	462b      	mov	r3, r5
 800485a:	430b      	orrs	r3, r1
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004862:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8004866:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800486a:	f04f 0000 	mov.w	r0, #0
 800486e:	f04f 0100 	mov.w	r1, #0
 8004872:	0219      	lsls	r1, r3, #8
 8004874:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004878:	0210      	lsls	r0, r2, #8
 800487a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800487c:	3302      	adds	r3, #2
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2200      	movs	r2, #0
 8004884:	643b      	str	r3, [r7, #64]	@ 0x40
 8004886:	647a      	str	r2, [r7, #68]	@ 0x44
 8004888:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800488c:	4623      	mov	r3, r4
 800488e:	4303      	orrs	r3, r0
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	462b      	mov	r3, r5
 8004894:	430b      	orrs	r3, r1
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800489c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 80048a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	020b      	lsls	r3, r1, #8
 80048ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048b2:	0202      	lsls	r2, r0, #8
 80048b4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80048b6:	3101      	adds	r1, #1
 80048b8:	7809      	ldrb	r1, [r1, #0]
 80048ba:	b2c9      	uxtb	r1, r1
 80048bc:	2000      	movs	r0, #0
 80048be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80048c2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80048c6:	4621      	mov	r1, r4
 80048c8:	4311      	orrs	r1, r2
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	4629      	mov	r1, r5
 80048ce:	4319      	orrs	r1, r3
 80048d0:	60f9      	str	r1, [r7, #12]
 80048d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80048d6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 80048da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	020b      	lsls	r3, r1, #8
 80048e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048ec:	0202      	lsls	r2, r0, #8
 80048ee:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80048f0:	7809      	ldrb	r1, [r1, #0]
 80048f2:	b2c9      	uxtb	r1, r1
 80048f4:	2000      	movs	r0, #0
 80048f6:	6339      	str	r1, [r7, #48]	@ 0x30
 80048f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80048fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048fe:	4621      	mov	r1, r4
 8004900:	4311      	orrs	r1, r2
 8004902:	6039      	str	r1, [r7, #0]
 8004904:	4629      	mov	r1, r5
 8004906:	4319      	orrs	r1, r3
 8004908:	6079      	str	r1, [r7, #4]
 800490a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800490e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8004912:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8004916:	4610      	mov	r0, r2
 8004918:	4619      	mov	r1, r3
 800491a:	3774      	adds	r7, #116	@ 0x74
 800491c:	46bd      	mov	sp, r7
 800491e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004922:	4770      	bx	lr

08004924 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	887a      	ldrh	r2, [r7, #2]
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	701a      	strb	r2, [r3, #0]
 800493c:	887b      	ldrh	r3, [r7, #2]
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	887a      	ldrh	r2, [r7, #2]
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	607a      	str	r2, [r7, #4]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	60fa      	str	r2, [r7, #12]
 80049c4:	783a      	ldrb	r2, [r7, #0]
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	0a02      	lsrs	r2, r0, #8
 80049d6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80049da:	0a0b      	lsrs	r3, r1, #8
 80049dc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	60fa      	str	r2, [r7, #12]
 80049e6:	783a      	ldrb	r2, [r7, #0]
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	0a02      	lsrs	r2, r0, #8
 80049f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80049fc:	0a0b      	lsrs	r3, r1, #8
 80049fe:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	60fa      	str	r2, [r7, #12]
 8004a08:	783a      	ldrb	r2, [r7, #0]
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	0a02      	lsrs	r2, r0, #8
 8004a1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004a1e:	0a0b      	lsrs	r3, r1, #8
 8004a20:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	60fa      	str	r2, [r7, #12]
 8004a2a:	783a      	ldrb	r2, [r7, #0]
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	0a02      	lsrs	r2, r0, #8
 8004a3c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004a40:	0a0b      	lsrs	r3, r1, #8
 8004a42:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	60fa      	str	r2, [r7, #12]
 8004a4c:	783a      	ldrb	r2, [r7, #0]
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	0a02      	lsrs	r2, r0, #8
 8004a5e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004a62:	0a0b      	lsrs	r3, r1, #8
 8004a64:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	60fa      	str	r2, [r7, #12]
 8004a6e:	783a      	ldrb	r2, [r7, #0]
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	0a02      	lsrs	r2, r0, #8
 8004a80:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004a84:	0a0b      	lsrs	r3, r1, #8
 8004a86:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	60fa      	str	r2, [r7, #12]
 8004a90:	783a      	ldrb	r2, [r7, #0]
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	0a02      	lsrs	r2, r0, #8
 8004aa2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004aa6:	0a0b      	lsrs	r3, r1, #8
 8004aa8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	60fa      	str	r2, [r7, #12]
 8004ab2:	783a      	ldrb	r2, [r7, #0]
 8004ab4:	701a      	strb	r2, [r3, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004ac2:	b480      	push	{r7}
 8004ac4:	b087      	sub	sp, #28
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00d      	beq.n	8004af8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	1c53      	adds	r3, r2, #1
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	1c59      	adds	r1, r3, #1
 8004ae6:	6179      	str	r1, [r7, #20]
 8004ae8:	7812      	ldrb	r2, [r2, #0]
 8004aea:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f1      	bne.n	8004adc <mem_cpy+0x1a>
	}
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	617a      	str	r2, [r7, #20]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1f3      	bne.n	8004b14 <mem_set+0x10>
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004b3a:	b480      	push	{r7}
 8004b3c:	b089      	sub	sp, #36	@ 0x24
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	61fa      	str	r2, [r7, #28]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	61ba      	str	r2, [r7, #24]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	1acb      	subs	r3, r1, r3
 8004b66:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <mem_cmp+0x40>
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0eb      	beq.n	8004b52 <mem_cmp+0x18>

	return r;
 8004b7a:	697b      	ldr	r3, [r7, #20]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3724      	adds	r7, #36	@ 0x24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004b92:	e002      	b.n	8004b9a <chk_chr+0x12>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3301      	adds	r3, #1
 8004b98:	607b      	str	r3, [r7, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <chk_chr+0x26>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d1f2      	bne.n	8004b94 <chk_chr+0xc>
	return *str;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	e029      	b.n	8004c28 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004bd4:	4a27      	ldr	r2, [pc, #156]	@ (8004c74 <chk_lock+0xb4>)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	4413      	add	r3, r2
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01d      	beq.n	8004c1e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004be2:	4a24      	ldr	r2, [pc, #144]	@ (8004c74 <chk_lock+0xb4>)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	4413      	add	r3, r2
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d116      	bne.n	8004c22 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c74 <chk_lock+0xb4>)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d10c      	bne.n	8004c22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c08:	4a1a      	ldr	r2, [pc, #104]	@ (8004c74 <chk_lock+0xb4>)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	4413      	add	r3, r2
 8004c10:	3308      	adds	r3, #8
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d102      	bne.n	8004c22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c1c:	e007      	b.n	8004c2e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3301      	adds	r3, #1
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d9d2      	bls.n	8004bd4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d109      	bne.n	8004c48 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <chk_lock+0x80>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d101      	bne.n	8004c44 <chk_lock+0x84>
 8004c40:	2300      	movs	r3, #0
 8004c42:	e010      	b.n	8004c66 <chk_lock+0xa6>
 8004c44:	2312      	movs	r3, #18
 8004c46:	e00e      	b.n	8004c66 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d108      	bne.n	8004c60 <chk_lock+0xa0>
 8004c4e:	4a09      	ldr	r2, [pc, #36]	@ (8004c74 <chk_lock+0xb4>)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	4413      	add	r3, r2
 8004c56:	330c      	adds	r3, #12
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c5e:	d101      	bne.n	8004c64 <chk_lock+0xa4>
 8004c60:	2310      	movs	r3, #16
 8004c62:	e000      	b.n	8004c66 <chk_lock+0xa6>
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20020630 	.word	0x20020630

08004c78 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	607b      	str	r3, [r7, #4]
 8004c82:	e002      	b.n	8004c8a <enq_lock+0x12>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3301      	adds	r3, #1
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d806      	bhi.n	8004c9e <enq_lock+0x26>
 8004c90:	4a09      	ldr	r2, [pc, #36]	@ (8004cb8 <enq_lock+0x40>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	4413      	add	r3, r2
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f2      	bne.n	8004c84 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	bf14      	ite	ne
 8004ca4:	2301      	movne	r3, #1
 8004ca6:	2300      	moveq	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20020630 	.word	0x20020630

08004cbc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	e01f      	b.n	8004d0c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004ccc:	4a41      	ldr	r2, [pc, #260]	@ (8004dd4 <inc_lock+0x118>)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	4413      	add	r3, r2
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d113      	bne.n	8004d06 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004cde:	4a3d      	ldr	r2, [pc, #244]	@ (8004dd4 <inc_lock+0x118>)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d109      	bne.n	8004d06 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004cf2:	4a38      	ldr	r2, [pc, #224]	@ (8004dd4 <inc_lock+0x118>)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3308      	adds	r3, #8
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d006      	beq.n	8004d14 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d9dc      	bls.n	8004ccc <inc_lock+0x10>
 8004d12:	e000      	b.n	8004d16 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004d14:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d132      	bne.n	8004d82 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	e002      	b.n	8004d28 <inc_lock+0x6c>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3301      	adds	r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d806      	bhi.n	8004d3c <inc_lock+0x80>
 8004d2e:	4a29      	ldr	r2, [pc, #164]	@ (8004dd4 <inc_lock+0x118>)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	4413      	add	r3, r2
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f2      	bne.n	8004d22 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d101      	bne.n	8004d46 <inc_lock+0x8a>
 8004d42:	2300      	movs	r3, #0
 8004d44:	e040      	b.n	8004dc8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4922      	ldr	r1, [pc, #136]	@ (8004dd4 <inc_lock+0x118>)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	440b      	add	r3, r1
 8004d52:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	491e      	ldr	r1, [pc, #120]	@ (8004dd4 <inc_lock+0x118>)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	440b      	add	r3, r1
 8004d60:	3304      	adds	r3, #4
 8004d62:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d68:	491a      	ldr	r1, [pc, #104]	@ (8004dd4 <inc_lock+0x118>)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	440b      	add	r3, r1
 8004d70:	3308      	adds	r3, #8
 8004d72:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004d74:	4a17      	ldr	r2, [pc, #92]	@ (8004dd4 <inc_lock+0x118>)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	4413      	add	r3, r2
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	2200      	movs	r2, #0
 8004d80:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <inc_lock+0xe0>
 8004d88:	4a12      	ldr	r2, [pc, #72]	@ (8004dd4 <inc_lock+0x118>)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	4413      	add	r3, r2
 8004d90:	330c      	adds	r3, #12
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <inc_lock+0xe0>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e015      	b.n	8004dc8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d108      	bne.n	8004db4 <inc_lock+0xf8>
 8004da2:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd4 <inc_lock+0x118>)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	4413      	add	r3, r2
 8004daa:	330c      	adds	r3, #12
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	3301      	adds	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	e001      	b.n	8004db8 <inc_lock+0xfc>
 8004db4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004db8:	4906      	ldr	r1, [pc, #24]	@ (8004dd4 <inc_lock+0x118>)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	440b      	add	r3, r1
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3301      	adds	r3, #1
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	20020630 	.word	0x20020630

08004dd8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d825      	bhi.n	8004e38 <dec_lock+0x60>
		n = Files[i].ctr;
 8004dec:	4a17      	ldr	r2, [pc, #92]	@ (8004e4c <dec_lock+0x74>)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	4413      	add	r3, r2
 8004df4:	330c      	adds	r3, #12
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004dfa:	89fb      	ldrh	r3, [r7, #14]
 8004dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e00:	d101      	bne.n	8004e06 <dec_lock+0x2e>
 8004e02:	2300      	movs	r3, #0
 8004e04:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004e06:	89fb      	ldrh	r3, [r7, #14]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <dec_lock+0x3a>
 8004e0c:	89fb      	ldrh	r3, [r7, #14]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004e12:	4a0e      	ldr	r2, [pc, #56]	@ (8004e4c <dec_lock+0x74>)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	4413      	add	r3, r2
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	89fa      	ldrh	r2, [r7, #14]
 8004e1e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004e20:	89fb      	ldrh	r3, [r7, #14]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d105      	bne.n	8004e32 <dec_lock+0x5a>
 8004e26:	4a09      	ldr	r2, [pc, #36]	@ (8004e4c <dec_lock+0x74>)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	4413      	add	r3, r2
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	737b      	strb	r3, [r7, #13]
 8004e36:	e001      	b.n	8004e3c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004e38:	2302      	movs	r3, #2
 8004e3a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004e3c:	7b7b      	ldrb	r3, [r7, #13]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20020630 	.word	0x20020630

08004e50 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	e010      	b.n	8004e80 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004e5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004e94 <clear_lock+0x44>)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	4413      	add	r3, r2
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d105      	bne.n	8004e7a <clear_lock+0x2a>
 8004e6e:	4a09      	ldr	r2, [pc, #36]	@ (8004e94 <clear_lock+0x44>)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	4413      	add	r3, r2
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d9eb      	bls.n	8004e5e <clear_lock+0xe>
	}
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	20020630 	.word	0x20020630

08004e98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	78db      	ldrb	r3, [r3, #3]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d034      	beq.n	8004f16 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	7858      	ldrb	r0, [r3, #1]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	f7ff fbdc 	bl	800467c <disk_write>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
 8004ece:	e022      	b.n	8004f16 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	1ad2      	subs	r2, r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d217      	bcs.n	8004f16 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	789b      	ldrb	r3, [r3, #2]
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	e010      	b.n	8004f10 <sync_window+0x78>
					wsect += fs->fsize;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	7858      	ldrb	r0, [r3, #1]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f02:	2301      	movs	r3, #1
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	f7ff fbb9 	bl	800467c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d8eb      	bhi.n	8004eee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d01b      	beq.n	8004f70 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ffad 	bl	8004e98 <sync_window>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d113      	bne.n	8004f70 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	7858      	ldrb	r0, [r3, #1]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f52:	2301      	movs	r3, #1
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	f7ff fb71 	bl	800463c <disk_read>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004f60:	f04f 33ff 	mov.w	r3, #4294967295
 8004f64:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ff87 	bl	8004e98 <sync_window>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d158      	bne.n	8005046 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d148      	bne.n	800502e <sync_fs+0xb2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	791b      	ldrb	r3, [r3, #4]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d144      	bne.n	800502e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3338      	adds	r3, #56	@ 0x38
 8004fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fda8 	bl	8004b04 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3338      	adds	r3, #56	@ 0x38
 8004fb8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004fbc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fcaf 	bl	8004924 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3338      	adds	r3, #56	@ 0x38
 8004fca:	4921      	ldr	r1, [pc, #132]	@ (8005050 <sync_fs+0xd4>)
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fcc4 	bl	800495a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3338      	adds	r3, #56	@ 0x38
 8004fd6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004fda:	491e      	ldr	r1, [pc, #120]	@ (8005054 <sync_fs+0xd8>)
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fcbc 	bl	800495a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3338      	adds	r3, #56	@ 0x38
 8004fe6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	f7ff fcb2 	bl	800495a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3338      	adds	r3, #56	@ 0x38
 8004ffa:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f7ff fca8 	bl	800495a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	7858      	ldrb	r0, [r3, #1]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005022:	2301      	movs	r3, #1
 8005024:	f7ff fb2a 	bl	800467c <disk_write>
			fs->fsi_flag = 0;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	785b      	ldrb	r3, [r3, #1]
 8005032:	2200      	movs	r2, #0
 8005034:	2100      	movs	r1, #0
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fb40 	bl	80046bc <disk_ioctl>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <sync_fs+0xca>
 8005042:	2301      	movs	r3, #1
 8005044:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	41615252 	.word	0x41615252
 8005054:	61417272 	.word	0x61417272

08005058 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	3b02      	subs	r3, #2
 8005066:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	3b02      	subs	r3, #2
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d301      	bcc.n	8005078 <clust2sect+0x20>
 8005074:	2300      	movs	r3, #0
 8005076:	e008      	b.n	800508a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	895b      	ldrh	r3, [r3, #10]
 800507c:	461a      	mov	r2, r3
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	fb03 f202 	mul.w	r2, r3, r2
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005088:	4413      	add	r3, r2
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
	...

08005098 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	6809      	ldr	r1, [r1, #0]
 80050a6:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80050a8:	6839      	ldr	r1, [r7, #0]
 80050aa:	2901      	cmp	r1, #1
 80050ac:	d904      	bls.n	80050b8 <get_fat+0x20>
 80050ae:	69b9      	ldr	r1, [r7, #24]
 80050b0:	69c9      	ldr	r1, [r1, #28]
 80050b2:	6838      	ldr	r0, [r7, #0]
 80050b4:	4288      	cmp	r0, r1
 80050b6:	d302      	bcc.n	80050be <get_fat+0x26>
		val = 1;	/* Internal error */
 80050b8:	2301      	movs	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	e100      	b.n	80052c0 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80050be:	f04f 31ff 	mov.w	r1, #4294967295
 80050c2:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 80050c4:	69b9      	ldr	r1, [r7, #24]
 80050c6:	7809      	ldrb	r1, [r1, #0]
 80050c8:	3901      	subs	r1, #1
 80050ca:	2903      	cmp	r1, #3
 80050cc:	f200 80ec 	bhi.w	80052a8 <get_fat+0x210>
 80050d0:	a001      	add	r0, pc, #4	@ (adr r0, 80050d8 <get_fat+0x40>)
 80050d2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	080050e9 	.word	0x080050e9
 80050dc:	0800516f 	.word	0x0800516f
 80050e0:	080051a5 	.word	0x080051a5
 80050e4:	080051dd 	.word	0x080051dd
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	085b      	lsrs	r3, r3, #1
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	0a5b      	lsrs	r3, r3, #9
 80050fe:	4413      	add	r3, r2
 8005100:	4619      	mov	r1, r3
 8005102:	69b8      	ldr	r0, [r7, #24]
 8005104:	f7ff ff0c 	bl	8004f20 <move_window>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	f040 80cf 	bne.w	80052ae <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	60fa      	str	r2, [r7, #12]
 8005116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	4413      	add	r3, r2
 800511e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005122:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	0a5b      	lsrs	r3, r3, #9
 800512c:	4413      	add	r3, r2
 800512e:	4619      	mov	r1, r3
 8005130:	69b8      	ldr	r0, [r7, #24]
 8005132:	f7ff fef5 	bl	8004f20 <move_window>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	f040 80ba 	bne.w	80052b2 <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4413      	add	r3, r2
 8005148:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	4313      	orrs	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <get_fat+0xcc>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	e002      	b.n	800516a <get_fat+0xd2>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516a:	61fb      	str	r3, [r7, #28]
			break;
 800516c:	e0a8      	b.n	80052c0 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	4413      	add	r3, r2
 8005178:	4619      	mov	r1, r3
 800517a:	69b8      	ldr	r0, [r7, #24]
 800517c:	f7ff fed0 	bl	8004f20 <move_window>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 8097 	bne.w	80052b6 <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005196:	4413      	add	r3, r2
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff faad 	bl	80046f8 <ld_word>
 800519e:	4603      	mov	r3, r0
 80051a0:	61fb      	str	r3, [r7, #28]
			break;
 80051a2:	e08d      	b.n	80052c0 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	09db      	lsrs	r3, r3, #7
 80051ac:	4413      	add	r3, r2
 80051ae:	4619      	mov	r1, r3
 80051b0:	69b8      	ldr	r0, [r7, #24]
 80051b2:	f7ff feb5 	bl	8004f20 <move_window>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d17e      	bne.n	80052ba <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80051ca:	4413      	add	r3, r2
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff faab 	bl	8004728 <ld_dword>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80051d8:	61fb      	str	r3, [r7, #28]
			break;
 80051da:	e071      	b.n	80052c0 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80051e2:	4301      	orrs	r1, r0
 80051e4:	d060      	beq.n	80052a8 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	6889      	ldr	r1, [r1, #8]
 80051ea:	6838      	ldr	r0, [r7, #0]
 80051ec:	1a41      	subs	r1, r0, r1
 80051ee:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80051f6:	1e42      	subs	r2, r0, #1
 80051f8:	f141 33ff 	adc.w	r3, r1, #4294967295
 80051fc:	f04f 0000 	mov.w	r0, #0
 8005200:	f04f 0100 	mov.w	r1, #0
 8005204:	0a50      	lsrs	r0, r2, #9
 8005206:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800520a:	0a59      	lsrs	r1, r3, #9
 800520c:	4602      	mov	r2, r0
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	895b      	ldrh	r3, [r3, #10]
 8005212:	fbb2 f3f3 	udiv	r3, r2, r3
 8005216:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	79db      	ldrb	r3, [r3, #7]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d10e      	bne.n	800523e <get_fat+0x1a6>
					if (cofs <= clen) {
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	429a      	cmp	r2, r3
 8005226:	d80a      	bhi.n	800523e <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	429a      	cmp	r2, r3
 800522e:	d002      	beq.n	8005236 <get_fat+0x19e>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	3301      	adds	r3, #1
 8005234:	e001      	b.n	800523a <get_fat+0x1a2>
 8005236:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800523a:	61fb      	str	r3, [r7, #28]
						break;
 800523c:	e040      	b.n	80052c0 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	79db      	ldrb	r3, [r3, #7]
 8005242:	2b03      	cmp	r3, #3
 8005244:	d108      	bne.n	8005258 <get_fat+0x1c0>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	429a      	cmp	r2, r3
 800524e:	d203      	bcs.n	8005258 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	3301      	adds	r3, #1
 8005254:	61fb      	str	r3, [r7, #28]
					break;
 8005256:	e033      	b.n	80052c0 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	79db      	ldrb	r3, [r3, #7]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d023      	beq.n	80052a8 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8005268:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800526c:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800526e:	e027      	b.n	80052c0 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	09db      	lsrs	r3, r3, #7
 8005278:	4413      	add	r3, r2
 800527a:	4619      	mov	r1, r3
 800527c:	69b8      	ldr	r0, [r7, #24]
 800527e:	f7ff fe4f 	bl	8004f20 <move_window>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d11a      	bne.n	80052be <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005296:	4413      	add	r3, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff fa45 	bl	8004728 <ld_dword>
 800529e:	4603      	mov	r3, r0
 80052a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052a4:	61fb      	str	r3, [r7, #28]
					break;
 80052a6:	e00b      	b.n	80052c0 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80052a8:	2301      	movs	r3, #1
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	e008      	b.n	80052c0 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052ae:	bf00      	nop
 80052b0:	e006      	b.n	80052c0 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052b2:	bf00      	nop
 80052b4:	e004      	b.n	80052c0 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80052b6:	bf00      	nop
 80052b8:	e002      	b.n	80052c0 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80052ba:	bf00      	nop
 80052bc:	e000      	b.n	80052c0 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80052be:	bf00      	nop
		}
	}

	return val;
 80052c0:	69fb      	ldr	r3, [r7, #28]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop

080052cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80052cc:	b590      	push	{r4, r7, lr}
 80052ce:	b089      	sub	sp, #36	@ 0x24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80052d8:	2302      	movs	r3, #2
 80052da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	f240 80dd 	bls.w	800549e <put_fat+0x1d2>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	f080 80d7 	bcs.w	800549e <put_fat+0x1d2>
		switch (fs->fs_type) {
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	f300 80d2 	bgt.w	800549e <put_fat+0x1d2>
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	f280 8093 	bge.w	8005426 <put_fat+0x15a>
 8005300:	2b01      	cmp	r3, #1
 8005302:	d002      	beq.n	800530a <put_fat+0x3e>
 8005304:	2b02      	cmp	r3, #2
 8005306:	d06e      	beq.n	80053e6 <put_fat+0x11a>
 8005308:	e0c9      	b.n	800549e <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4413      	add	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	0a5b      	lsrs	r3, r3, #9
 8005320:	4413      	add	r3, r2
 8005322:	4619      	mov	r1, r3
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7ff fdfb 	bl	8004f20 <move_window>
 800532a:	4603      	mov	r3, r0
 800532c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800532e:	7ffb      	ldrb	r3, [r7, #31]
 8005330:	2b00      	cmp	r3, #0
 8005332:	f040 80ad 	bne.w	8005490 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	1c59      	adds	r1, r3, #1
 8005340:	61b9      	str	r1, [r7, #24]
 8005342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005346:	4413      	add	r3, r2
 8005348:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00d      	beq.n	8005370 <put_fat+0xa4>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	b25b      	sxtb	r3, r3
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	b25a      	sxtb	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	b25b      	sxtb	r3, r3
 8005368:	4313      	orrs	r3, r2
 800536a:	b25b      	sxtb	r3, r3
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e001      	b.n	8005374 <put_fat+0xa8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2201      	movs	r2, #1
 800537c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	0a5b      	lsrs	r3, r3, #9
 8005386:	4413      	add	r3, r2
 8005388:	4619      	mov	r1, r3
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7ff fdc8 	bl	8004f20 <move_window>
 8005390:	4603      	mov	r3, r0
 8005392:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005394:	7ffb      	ldrb	r3, [r7, #31]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d17c      	bne.n	8005494 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a6:	4413      	add	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <put_fat+0xf0>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	091b      	lsrs	r3, r3, #4
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e00e      	b.n	80053da <put_fat+0x10e>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	b25b      	sxtb	r3, r3
 80053c2:	f023 030f 	bic.w	r3, r3, #15
 80053c6:	b25a      	sxtb	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	0a1b      	lsrs	r3, r3, #8
 80053cc:	b25b      	sxtb	r3, r3
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	b25b      	sxtb	r3, r3
 80053d4:	4313      	orrs	r3, r2
 80053d6:	b25b      	sxtb	r3, r3
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	70da      	strb	r2, [r3, #3]
			break;
 80053e4:	e05b      	b.n	800549e <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	0a1b      	lsrs	r3, r3, #8
 80053ee:	4413      	add	r3, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff fd94 	bl	8004f20 <move_window>
 80053f8:	4603      	mov	r3, r0
 80053fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80053fc:	7ffb      	ldrb	r3, [r7, #31]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d14a      	bne.n	8005498 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005410:	4413      	add	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	b292      	uxth	r2, r2
 8005416:	4611      	mov	r1, r2
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff fa83 	bl	8004924 <st_word>
			fs->wflag = 1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	70da      	strb	r2, [r3, #3]
			break;
 8005424:	e03b      	b.n	800549e <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	09db      	lsrs	r3, r3, #7
 800542e:	4413      	add	r3, r2
 8005430:	4619      	mov	r1, r3
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff fd74 	bl	8004f20 <move_window>
 8005438:	4603      	mov	r3, r0
 800543a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800543c:	7ffb      	ldrb	r3, [r7, #31]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d12c      	bne.n	800549c <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b04      	cmp	r3, #4
 8005448:	d012      	beq.n	8005470 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800545e:	4413      	add	r3, r2
 8005460:	4618      	mov	r0, r3
 8005462:	f7ff f961 	bl	8004728 <ld_dword>
 8005466:	4603      	mov	r3, r0
 8005468:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800546c:	4323      	orrs	r3, r4
 800546e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800547e:	4413      	add	r3, r2
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff fa69 	bl	800495a <st_dword>
			fs->wflag = 1;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	70da      	strb	r2, [r3, #3]
			break;
 800548e:	e006      	b.n	800549e <put_fat+0x1d2>
			if (res != FR_OK) break;
 8005490:	bf00      	nop
 8005492:	e004      	b.n	800549e <put_fat+0x1d2>
			if (res != FR_OK) break;
 8005494:	bf00      	nop
 8005496:	e002      	b.n	800549e <put_fat+0x1d2>
			if (res != FR_OK) break;
 8005498:	bf00      	nop
 800549a:	e000      	b.n	800549e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800549c:	bf00      	nop
		}
	}
	return res;
 800549e:	7ffb      	ldrb	r3, [r7, #31]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3724      	adds	r7, #36	@ 0x24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd90      	pop	{r4, r7, pc}

080054a8 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	@ 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	3b02      	subs	r3, #2
 80054b8:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	3b02      	subs	r3, #2
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d301      	bcc.n	80054ca <find_bitmap+0x22>
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	61bb      	str	r3, [r7, #24]
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	0b1b      	lsrs	r3, r3, #12
 80054de:	4413      	add	r3, r2
 80054e0:	4619      	mov	r1, r3
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff fd1c 	bl	8004f20 <move_window>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <find_bitmap+0x4c>
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	e051      	b.n	8005598 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	08db      	lsrs	r3, r3, #3
 80054f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fc:	623b      	str	r3, [r7, #32]
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	2201      	movs	r2, #1
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	4413      	add	r3, r2
 8005514:	3338      	adds	r3, #56	@ 0x38
 8005516:	781a      	ldrb	r2, [r3, #0]
 8005518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800551c:	4013      	ands	r3, r2
 800551e:	74fb      	strb	r3, [r7, #19]
 8005520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	3301      	adds	r3, #1
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	3b02      	subs	r3, #2
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	429a      	cmp	r2, r3
 800553a:	d307      	bcc.n	800554c <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800553c:	2300      	movs	r3, #0
 800553e:	61fb      	str	r3, [r7, #28]
 8005540:	2300      	movs	r3, #0
 8005542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005546:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800554a:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800554c:	7cfb      	ldrb	r3, [r7, #19]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	3301      	adds	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d106      	bne.n	800556e <find_bitmap+0xc6>
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	3302      	adds	r3, #2
 8005564:	e018      	b.n	8005598 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	429a      	cmp	r2, r3
 8005574:	d101      	bne.n	800557a <find_bitmap+0xd2>
 8005576:	2300      	movs	r3, #0
 8005578:	e00e      	b.n	8005598 <find_bitmap+0xf0>
			} while (bm);
 800557a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1c5      	bne.n	800550e <find_bitmap+0x66>
			bm = 1;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	3301      	adds	r3, #1
 800558c:	623b      	str	r3, [r7, #32]
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005594:	d3bb      	bcc.n	800550e <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8005596:	e79e      	b.n	80054d6 <find_bitmap+0x2e>
	}
}
 8005598:	4618      	mov	r0, r3
 800559a:	3728      	adds	r7, #40	@ 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	3b02      	subs	r3, #2
 80055b2:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	0b1b      	lsrs	r3, r3, #12
 80055bc:	4413      	add	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	08db      	lsrs	r3, r3, #3
 80055c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	2201      	movs	r2, #1
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	617a      	str	r2, [r7, #20]
 80055de:	4619      	mov	r1, r3
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff fc9d 	bl	8004f20 <move_window>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <change_bitmap+0x50>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e03d      	b.n	800566c <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	4413      	add	r3, r2
 80055f6:	3338      	adds	r3, #56	@ 0x38
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	7ffb      	ldrb	r3, [r7, #31]
 80055fc:	4013      	ands	r3, r2
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	4293      	cmp	r3, r2
 8005610:	d101      	bne.n	8005616 <change_bitmap+0x76>
 8005612:	2302      	movs	r3, #2
 8005614:	e02a      	b.n	800566c <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	4413      	add	r3, r2
 800561c:	3338      	adds	r3, #56	@ 0x38
 800561e:	781a      	ldrb	r2, [r3, #0]
 8005620:	7ffb      	ldrb	r3, [r7, #31]
 8005622:	4053      	eors	r3, r2
 8005624:	b2d9      	uxtb	r1, r3
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	4413      	add	r3, r2
 800562c:	3338      	adds	r3, #56	@ 0x38
 800562e:	460a      	mov	r2, r1
 8005630:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3b01      	subs	r3, #1
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <change_bitmap+0xa8>
 8005644:	2300      	movs	r3, #0
 8005646:	e011      	b.n	800566c <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8005648:	7ffb      	ldrb	r3, [r7, #31]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	77fb      	strb	r3, [r7, #31]
 800564e:	7ffb      	ldrb	r3, [r7, #31]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1cd      	bne.n	80055f0 <change_bitmap+0x50>
			bm = 1;
 8005654:	2301      	movs	r3, #1
 8005656:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	3301      	adds	r3, #1
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005664:	d3c4      	bcc.n	80055f0 <change_bitmap+0x50>
		i = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800566a:	e7b5      	b.n	80055d8 <change_bitmap+0x38>
	}
}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	79db      	ldrb	r3, [r3, #7]
 8005680:	2b03      	cmp	r3, #3
 8005682:	d121      	bne.n	80056c8 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	e014      	b.n	80056bc <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	3301      	adds	r3, #1
 800569a:	461a      	mov	r2, r3
 800569c:	6979      	ldr	r1, [r7, #20]
 800569e:	f7ff fe15 	bl	80052cc <put_fat>
 80056a2:	4603      	mov	r3, r0
 80056a4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <fill_first_frag+0x3c>
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	e00c      	b.n	80056ca <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	3301      	adds	r3, #1
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e7      	bne.n	8005692 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b086      	sub	sp, #24
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80056de:	e020      	b.n	8005722 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d905      	bls.n	8005702 <fill_last_frag+0x30>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	3302      	adds	r3, #2
 8005700:	e000      	b.n	8005704 <fill_last_frag+0x32>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	461a      	mov	r2, r3
 8005706:	f7ff fde1 	bl	80052cc <put_fat>
 800570a:	4603      	mov	r3, r0
 800570c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800570e:	7dfb      	ldrb	r3, [r7, #23]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <fill_last_frag+0x46>
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	e009      	b.n	800572c <fill_last_frag+0x5a>
		obj->n_frag--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	1e5a      	subs	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1da      	bne.n	80056e0 <fill_last_frag+0xe>
	}
	return FR_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	@ 0x28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	627b      	str	r3, [r7, #36]	@ 0x24
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d904      	bls.n	8005762 <remove_chain+0x2e>
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	429a      	cmp	r2, r3
 8005760:	d301      	bcc.n	8005766 <remove_chain+0x32>
 8005762:	2302      	movs	r3, #2
 8005764:	e096      	b.n	8005894 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d014      	beq.n	8005796 <remove_chain+0x62>
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b04      	cmp	r3, #4
 8005772:	d103      	bne.n	800577c <remove_chain+0x48>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	79db      	ldrb	r3, [r3, #7]
 8005778:	2b02      	cmp	r3, #2
 800577a:	d00c      	beq.n	8005796 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800577c:	f04f 32ff 	mov.w	r2, #4294967295
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	69b8      	ldr	r0, [r7, #24]
 8005784:	f7ff fda2 	bl	80052cc <put_fat>
 8005788:	4603      	mov	r3, r0
 800578a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800578c:	7ffb      	ldrb	r3, [r7, #31]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <remove_chain+0x62>
 8005792:	7ffb      	ldrb	r3, [r7, #31]
 8005794:	e07e      	b.n	8005894 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7ff fc7d 	bl	8005098 <get_fat>
 800579e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d055      	beq.n	8005852 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <remove_chain+0x7c>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e071      	b.n	8005894 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d101      	bne.n	80057bc <remove_chain+0x88>
 80057b8:	2301      	movs	r3, #1
 80057ba:	e06b      	b.n	8005894 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d00b      	beq.n	80057dc <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80057c4:	2200      	movs	r2, #0
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	69b8      	ldr	r0, [r7, #24]
 80057ca:	f7ff fd7f 	bl	80052cc <put_fat>
 80057ce:	4603      	mov	r3, r0
 80057d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80057d2:	7ffb      	ldrb	r3, [r7, #31]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <remove_chain+0xa8>
 80057d8:	7ffb      	ldrb	r3, [r7, #31]
 80057da:	e05b      	b.n	8005894 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	699a      	ldr	r2, [r3, #24]
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	3b02      	subs	r3, #2
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d20b      	bcs.n	8005802 <remove_chain+0xce>
			fs->free_clst++;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	791b      	ldrb	r3, [r3, #4]
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	3301      	adds	r3, #1
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	429a      	cmp	r2, r3
 800580a:	d102      	bne.n	8005812 <remove_chain+0xde>
			ecl = nxt;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	623b      	str	r3, [r7, #32]
 8005810:	e017      	b.n	8005842 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	2b04      	cmp	r3, #4
 8005818:	d10f      	bne.n	800583a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800581a:	6a3a      	ldr	r2, [r7, #32]
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	2300      	movs	r3, #0
 8005824:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005826:	69b8      	ldr	r0, [r7, #24]
 8005828:	f7ff feba 	bl	80055a0 <change_bitmap>
 800582c:	4603      	mov	r3, r0
 800582e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8005830:	7ffb      	ldrb	r3, [r7, #31]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <remove_chain+0x106>
 8005836:	7ffb      	ldrb	r3, [r7, #31]
 8005838:	e02c      	b.n	8005894 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	623b      	str	r3, [r7, #32]
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	429a      	cmp	r2, r3
 800584e:	d3a2      	bcc.n	8005796 <remove_chain+0x62>
 8005850:	e000      	b.n	8005854 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8005852:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b04      	cmp	r3, #4
 800585a:	d11a      	bne.n	8005892 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	71da      	strb	r2, [r3, #7]
 8005868:	e013      	b.n	8005892 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	79db      	ldrb	r3, [r3, #7]
 800586e:	2b03      	cmp	r3, #3
 8005870:	d10f      	bne.n	8005892 <remove_chain+0x15e>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	429a      	cmp	r2, r3
 800587a:	d30a      	bcc.n	8005892 <remove_chain+0x15e>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	4413      	add	r3, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	429a      	cmp	r2, r3
 800588a:	d802      	bhi.n	8005892 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2202      	movs	r2, #2
 8005890:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3728      	adds	r7, #40	@ 0x28
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10d      	bne.n	80058ce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d004      	beq.n	80058c8 <create_chain+0x2c>
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d31b      	bcc.n	8005900 <create_chain+0x64>
 80058c8:	2301      	movs	r3, #1
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	e018      	b.n	8005900 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff fbe1 	bl	8005098 <get_fat>
 80058d6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d801      	bhi.n	80058e2 <create_chain+0x46>
 80058de:	2301      	movs	r3, #1
 80058e0:	e0d9      	b.n	8005a96 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d101      	bne.n	80058ee <create_chain+0x52>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	e0d3      	b.n	8005a96 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d201      	bcs.n	80058fc <create_chain+0x60>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	e0cc      	b.n	8005a96 <create_chain+0x1fa>
		scl = clst;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b04      	cmp	r3, #4
 8005906:	d164      	bne.n	80059d2 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8005908:	2201      	movs	r2, #1
 800590a:	69b9      	ldr	r1, [r7, #24]
 800590c:	6938      	ldr	r0, [r7, #16]
 800590e:	f7ff fdcb 	bl	80054a8 <find_bitmap>
 8005912:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <create_chain+0x86>
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005920:	d101      	bne.n	8005926 <create_chain+0x8a>
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	e0b7      	b.n	8005a96 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8005926:	2301      	movs	r3, #1
 8005928:	2201      	movs	r2, #1
 800592a:	69f9      	ldr	r1, [r7, #28]
 800592c:	6938      	ldr	r0, [r7, #16]
 800592e:	f7ff fe37 	bl	80055a0 <change_bitmap>
 8005932:	4603      	mov	r3, r0
 8005934:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8005936:	7dfb      	ldrb	r3, [r7, #23]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d101      	bne.n	8005940 <create_chain+0xa4>
 800593c:	2301      	movs	r3, #1
 800593e:	e0aa      	b.n	8005a96 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8005940:	7dfb      	ldrb	r3, [r7, #23]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d102      	bne.n	800594c <create_chain+0xb0>
 8005946:	f04f 33ff 	mov.w	r3, #4294967295
 800594a:	e0a4      	b.n	8005a96 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d103      	bne.n	800595a <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2202      	movs	r2, #2
 8005956:	71da      	strb	r2, [r3, #7]
 8005958:	e011      	b.n	800597e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	79db      	ldrb	r3, [r3, #7]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d10d      	bne.n	800597e <create_chain+0xe2>
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	3301      	adds	r3, #1
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	429a      	cmp	r2, r3
 800596a:	d008      	beq.n	800597e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	1ad2      	subs	r2, r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2203      	movs	r2, #3
 800597c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	79db      	ldrb	r3, [r3, #7]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d064      	beq.n	8005a50 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	3301      	adds	r3, #1
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	429a      	cmp	r2, r3
 800598e:	d10b      	bne.n	80059a8 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <create_chain+0x104>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	3301      	adds	r3, #1
 800599e:	e000      	b.n	80059a2 <create_chain+0x106>
 80059a0:	2302      	movs	r3, #2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	61d3      	str	r3, [r2, #28]
 80059a6:	e053      	b.n	8005a50 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <create_chain+0x11a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff fe89 	bl	80056d2 <fill_last_frag>
 80059c0:	4603      	mov	r3, r0
 80059c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d142      	bne.n	8005a50 <create_chain+0x1b4>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	61da      	str	r2, [r3, #28]
 80059d0:	e03e      	b.n	8005a50 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	3301      	adds	r3, #1
 80059da:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d307      	bcc.n	80059f6 <create_chain+0x15a>
				ncl = 2;
 80059e6:	2302      	movs	r3, #2
 80059e8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d901      	bls.n	80059f6 <create_chain+0x15a>
 80059f2:	2300      	movs	r3, #0
 80059f4:	e04f      	b.n	8005a96 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80059f6:	69f9      	ldr	r1, [r7, #28]
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff fb4d 	bl	8005098 <get_fat>
 80059fe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00e      	beq.n	8005a24 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d003      	beq.n	8005a14 <create_chain+0x178>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a12:	d101      	bne.n	8005a18 <create_chain+0x17c>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	e03e      	b.n	8005a96 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d1da      	bne.n	80059d6 <create_chain+0x13a>
 8005a20:	2300      	movs	r3, #0
 8005a22:	e038      	b.n	8005a96 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8005a24:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005a26:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2a:	69f9      	ldr	r1, [r7, #28]
 8005a2c:	6938      	ldr	r0, [r7, #16]
 8005a2e:	f7ff fc4d 	bl	80052cc <put_fat>
 8005a32:	4603      	mov	r3, r0
 8005a34:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d109      	bne.n	8005a50 <create_chain+0x1b4>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d006      	beq.n	8005a50 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	6938      	ldr	r0, [r7, #16]
 8005a48:	f7ff fc40 	bl	80052cc <put_fat>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d116      	bne.n	8005a84 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	699a      	ldr	r2, [r3, #24]
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	3b02      	subs	r3, #2
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d804      	bhi.n	8005a74 <create_chain+0x1d8>
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	1e5a      	subs	r2, r3, #1
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	791b      	ldrb	r3, [r3, #4]
 8005a78:	f043 0301 	orr.w	r3, r3, #1
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	711a      	strb	r2, [r3, #4]
 8005a82:	e007      	b.n	8005a94 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d102      	bne.n	8005a90 <create_chain+0x1f4>
 8005a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8e:	e000      	b.n	8005a92 <create_chain+0x1f6>
 8005a90:	2301      	movs	r3, #1
 8005a92:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005a94:	69fb      	ldr	r3, [r7, #28]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005a9e:	b5b0      	push	{r4, r5, r7, lr}
 8005aa0:	b088      	sub	sp, #32
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005abc:	f04f 0000 	mov.w	r0, #0
 8005ac0:	f04f 0100 	mov.w	r1, #0
 8005ac4:	0a50      	lsrs	r0, r2, #9
 8005ac6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8005aca:	0a59      	lsrs	r1, r3, #9
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	895b      	ldrh	r3, [r3, #10]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	461c      	mov	r4, r3
 8005ad6:	4615      	mov	r5, r2
 8005ad8:	4622      	mov	r2, r4
 8005ada:	462b      	mov	r3, r5
 8005adc:	f7fa fb94 	bl	8000208 <__aeabi_uldivmod>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	1d1a      	adds	r2, r3, #4
 8005aec:	61ba      	str	r2, [r7, #24]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <clmt_clust+0x5e>
 8005af8:	2300      	movs	r3, #0
 8005afa:	e010      	b.n	8005b1e <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d307      	bcc.n	8005b14 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	61fb      	str	r3, [r7, #28]
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b12:	e7e9      	b.n	8005ae8 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 8005b14:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3720      	adds	r7, #32
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bdb0      	pop	{r4, r5, r7, pc}

08005b26 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b086      	sub	sp, #24
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d102      	bne.n	8005b44 <dir_sdi+0x1e>
 8005b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b42:	e001      	b.n	8005b48 <dir_sdi+0x22>
 8005b44:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d904      	bls.n	8005b58 <dir_sdi+0x32>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	f003 031f 	and.w	r3, r3, #31
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <dir_sdi+0x36>
		return FR_INT_ERR;
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e066      	b.n	8005c2a <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d109      	bne.n	8005b82 <dir_sdi+0x5c>
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d905      	bls.n	8005b82 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10c      	bne.n	8005ba2 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	8912      	ldrh	r2, [r2, #8]
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d301      	bcc.n	8005b98 <dir_sdi+0x72>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e048      	b.n	8005c2a <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ba0:	e029      	b.n	8005bf6 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	895b      	ldrh	r3, [r3, #10]
 8005ba6:	025b      	lsls	r3, r3, #9
 8005ba8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005baa:	e019      	b.n	8005be0 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6979      	ldr	r1, [r7, #20]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff fa71 	bl	8005098 <get_fat>
 8005bb6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d101      	bne.n	8005bc4 <dir_sdi+0x9e>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e032      	b.n	8005c2a <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d904      	bls.n	8005bd4 <dir_sdi+0xae>
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d301      	bcc.n	8005bd8 <dir_sdi+0xb2>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e028      	b.n	8005c2a <dir_sdi+0x104>
			ofs -= csz;
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d2e1      	bcs.n	8005bac <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8005be8:	6979      	ldr	r1, [r7, #20]
 8005bea:	6938      	ldr	r0, [r7, #16]
 8005bec:	f7ff fa34 	bl	8005058 <clust2sect>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <dir_sdi+0xe2>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e010      	b.n	8005c2a <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	0a5b      	lsrs	r3, r3, #9
 8005c10:	441a      	add	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c22:	441a      	add	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b086      	sub	sp, #24
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c46:	3320      	adds	r3, #32
 8005c48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <dir_next+0x38>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d102      	bne.n	8005c60 <dir_next+0x2e>
 8005c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c5e:	e001      	b.n	8005c64 <dir_next+0x32>
 8005c60:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d801      	bhi.n	8005c6e <dir_next+0x3c>
 8005c6a:	2304      	movs	r3, #4
 8005c6c:	e0b2      	b.n	8005dd4 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f040 80a0 	bne.w	8005dba <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10b      	bne.n	8005ca4 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	8912      	ldrh	r2, [r2, #8]
 8005c94:	4293      	cmp	r3, r2
 8005c96:	f0c0 8090 	bcc.w	8005dba <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	e097      	b.n	8005dd4 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	0a5b      	lsrs	r3, r3, #9
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	8952      	ldrh	r2, [r2, #10]
 8005cac:	3a01      	subs	r2, #1
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f040 8082 	bne.w	8005dba <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f7ff f9ea 	bl	8005098 <get_fat>
 8005cc4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d801      	bhi.n	8005cd0 <dir_next+0x9e>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e081      	b.n	8005dd4 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd6:	d101      	bne.n	8005cdc <dir_next+0xaa>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e07b      	b.n	8005dd4 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d35f      	bcc.n	8005da6 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d104      	bne.n	8005cf6 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	639a      	str	r2, [r3, #56]	@ 0x38
 8005cf2:	2304      	movs	r3, #4
 8005cf4:	e06e      	b.n	8005dd4 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	f7ff fdcc 	bl	800589c <create_chain>
 8005d04:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <dir_next+0xde>
 8005d0c:	2307      	movs	r3, #7
 8005d0e:	e061      	b.n	8005dd4 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <dir_next+0xe8>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e05c      	b.n	8005dd4 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d20:	d101      	bne.n	8005d26 <dir_next+0xf4>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e056      	b.n	8005dd4 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	79db      	ldrb	r3, [r3, #7]
 8005d2a:	f043 0304 	orr.w	r3, r3, #4
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff f8af 	bl	8004e98 <sync_window>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <dir_next+0x112>
 8005d40:	2301      	movs	r3, #1
 8005d42:	e047      	b.n	8005dd4 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3338      	adds	r3, #56	@ 0x38
 8005d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe fed8 	bl	8004b04 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005d54:	2300      	movs	r3, #0
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	6979      	ldr	r1, [r7, #20]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f7ff f97c 	bl	8005058 <clust2sect>
 8005d60:	4602      	mov	r2, r0
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d66:	e012      	b.n	8005d8e <dir_next+0x15c>
						fs->wflag = 1;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f7ff f892 	bl	8004e98 <sync_window>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <dir_next+0x14c>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e02a      	b.n	8005dd4 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3301      	adds	r3, #1
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	895b      	ldrh	r3, [r3, #10]
 8005d92:	461a      	mov	r2, r3
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d3e6      	bcc.n	8005d68 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad2      	subs	r2, r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 8005dac:	6979      	ldr	r1, [r7, #20]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f7ff f952 	bl	8005058 <clust2sect>
 8005db4:	4602      	mov	r2, r0
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dcc:	441a      	add	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005dec:	2100      	movs	r1, #0
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff fe99 	bl	8005b26 <dir_sdi>
 8005df4:	4603      	mov	r3, r0
 8005df6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d140      	bne.n	8005e80 <dir_alloc+0xa4>
		n = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e06:	4619      	mov	r1, r3
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f7ff f889 	bl	8004f20 <move_window>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d132      	bne.n	8005e7e <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d108      	bne.n	8005e32 <dir_alloc+0x56>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b25b      	sxtb	r3, r3
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	09db      	lsrs	r3, r3, #7
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	e00f      	b.n	8005e52 <dir_alloc+0x76>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2be5      	cmp	r3, #229	@ 0xe5
 8005e3a:	d004      	beq.n	8005e46 <dir_alloc+0x6a>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <dir_alloc+0x6e>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <dir_alloc+0x70>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d007      	beq.n	8005e66 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d102      	bne.n	8005e6a <dir_alloc+0x8e>
 8005e64:	e00c      	b.n	8005e80 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005e66:	2300      	movs	r3, #0
 8005e68:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff fee0 	bl	8005c32 <dir_next>
 8005e72:	4603      	mov	r3, r0
 8005e74:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0c2      	beq.n	8005e02 <dir_alloc+0x26>
 8005e7c:	e000      	b.n	8005e80 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8005e7e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d101      	bne.n	8005e8a <dir_alloc+0xae>
 8005e86:	2307      	movs	r3, #7
 8005e88:	75fb      	strb	r3, [r7, #23]
	return res;
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	331a      	adds	r3, #26
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fe fc28 	bl	80046f8 <ld_word>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d109      	bne.n	8005ec8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	3314      	adds	r3, #20
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe fc1d 	bl	80046f8 <ld_word>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	041b      	lsls	r3, r3, #16
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	331a      	adds	r3, #26
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe fd1b 	bl	8004924 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d109      	bne.n	8005f0a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f103 0214 	add.w	r2, r3, #20
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	0c1b      	lsrs	r3, r3, #16
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f7fe fd0d 	bl	8004924 <st_word>
	}
}
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005f14:	b590      	push	{r4, r7, lr}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	331a      	adds	r3, #26
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fbe8 	bl	80046f8 <ld_word>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <cmp_lfn+0x1e>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e059      	b.n	8005fe6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f3a:	1e5a      	subs	r2, r3, #1
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005f48:	2301      	movs	r3, #1
 8005f4a:	81fb      	strh	r3, [r7, #14]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	e033      	b.n	8005fba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005f52:	4a27      	ldr	r2, [pc, #156]	@ (8005ff0 <cmp_lfn+0xdc>)
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4413      	add	r3, r2
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	4413      	add	r3, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe fbc9 	bl	80046f8 <ld_word>
 8005f66:	4603      	mov	r3, r0
 8005f68:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005f6a:	89fb      	ldrh	r3, [r7, #14]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01a      	beq.n	8005fa6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2bfe      	cmp	r3, #254	@ 0xfe
 8005f74:	d812      	bhi.n	8005f9c <cmp_lfn+0x88>
 8005f76:	89bb      	ldrh	r3, [r7, #12]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f002 fc9f 	bl	80088bc <ff_wtoupper>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	461c      	mov	r4, r3
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	617a      	str	r2, [r7, #20]
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f002 fc93 	bl	80088bc <ff_wtoupper>
 8005f96:	4603      	mov	r3, r0
 8005f98:	429c      	cmp	r4, r3
 8005f9a:	d001      	beq.n	8005fa0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e022      	b.n	8005fe6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005fa0:	89bb      	ldrh	r3, [r7, #12]
 8005fa2:	81fb      	strh	r3, [r7, #14]
 8005fa4:	e006      	b.n	8005fb4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005fa6:	89bb      	ldrh	r3, [r7, #12]
 8005fa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d001      	beq.n	8005fb4 <cmp_lfn+0xa0>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e018      	b.n	8005fe6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b0c      	cmp	r3, #12
 8005fbe:	d9c8      	bls.n	8005f52 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00b      	beq.n	8005fe4 <cmp_lfn+0xd0>
 8005fcc:	89fb      	ldrh	r3, [r7, #14]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d008      	beq.n	8005fe4 <cmp_lfn+0xd0>
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	4413      	add	r3, r2
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <cmp_lfn+0xd0>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e000      	b.n	8005fe6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005fe4:	2301      	movs	r3, #1
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd90      	pop	{r4, r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	08008b40 	.word	0x08008b40

08005ff4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	331a      	adds	r3, #26
 8006002:	4618      	mov	r0, r3
 8006004:	f7fe fb78 	bl	80046f8 <ld_word>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <pick_lfn+0x1e>
 800600e:	2300      	movs	r3, #0
 8006010:	e04d      	b.n	80060ae <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800601a:	1e5a      	subs	r2, r3, #1
 800601c:	4613      	mov	r3, r2
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	4413      	add	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006028:	2301      	movs	r3, #1
 800602a:	81fb      	strh	r3, [r7, #14]
 800602c:	2300      	movs	r3, #0
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	e028      	b.n	8006084 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006032:	4a21      	ldr	r2, [pc, #132]	@ (80060b8 <pick_lfn+0xc4>)
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4413      	add	r3, r2
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	4413      	add	r3, r2
 8006040:	4618      	mov	r0, r3
 8006042:	f7fe fb59 	bl	80046f8 <ld_word>
 8006046:	4603      	mov	r3, r0
 8006048:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800604a:	89fb      	ldrh	r3, [r7, #14]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00f      	beq.n	8006070 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2bfe      	cmp	r3, #254	@ 0xfe
 8006054:	d901      	bls.n	800605a <pick_lfn+0x66>
 8006056:	2300      	movs	r3, #0
 8006058:	e029      	b.n	80060ae <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800605a:	89bb      	ldrh	r3, [r7, #12]
 800605c:	81fb      	strh	r3, [r7, #14]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	617a      	str	r2, [r7, #20]
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	4413      	add	r3, r2
 800606a:	89fa      	ldrh	r2, [r7, #14]
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	e006      	b.n	800607e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006070:	89bb      	ldrh	r3, [r7, #12]
 8006072:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006076:	4293      	cmp	r3, r2
 8006078:	d001      	beq.n	800607e <pick_lfn+0x8a>
 800607a:	2300      	movs	r3, #0
 800607c:	e017      	b.n	80060ae <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	3301      	adds	r3, #1
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b0c      	cmp	r3, #12
 8006088:	d9d3      	bls.n	8006032 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2bfe      	cmp	r3, #254	@ 0xfe
 800609a:	d901      	bls.n	80060a0 <pick_lfn+0xac>
 800609c:	2300      	movs	r3, #0
 800609e:	e006      	b.n	80060ae <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	4413      	add	r3, r2
 80060a8:	2200      	movs	r2, #0
 80060aa:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80060ac:	2301      	movs	r3, #1
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	08008b40 	.word	0x08008b40

080060bc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	4611      	mov	r1, r2
 80060c8:	461a      	mov	r2, r3
 80060ca:	460b      	mov	r3, r1
 80060cc:	71fb      	strb	r3, [r7, #7]
 80060ce:	4613      	mov	r3, r2
 80060d0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	330d      	adds	r3, #13
 80060d6:	79ba      	ldrb	r2, [r7, #6]
 80060d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	330b      	adds	r3, #11
 80060de:	220f      	movs	r2, #15
 80060e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	330c      	adds	r3, #12
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	331a      	adds	r3, #26
 80060ee:	2100      	movs	r1, #0
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fc17 	bl	8004924 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	1e5a      	subs	r2, r3, #1
 80060fa:	4613      	mov	r3, r2
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	82fb      	strh	r3, [r7, #22]
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800610e:	8afb      	ldrh	r3, [r7, #22]
 8006110:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006114:	4293      	cmp	r3, r2
 8006116:	d007      	beq.n	8006128 <put_lfn+0x6c>
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	61fa      	str	r2, [r7, #28]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006128:	4a17      	ldr	r2, [pc, #92]	@ (8006188 <put_lfn+0xcc>)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	4413      	add	r3, r2
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	4413      	add	r3, r2
 8006136:	8afa      	ldrh	r2, [r7, #22]
 8006138:	4611      	mov	r1, r2
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe fbf2 	bl	8004924 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006140:	8afb      	ldrh	r3, [r7, #22]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <put_lfn+0x90>
 8006146:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800614a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	3301      	adds	r3, #1
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	2b0c      	cmp	r3, #12
 8006156:	d9da      	bls.n	800610e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006158:	8afb      	ldrh	r3, [r7, #22]
 800615a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800615e:	4293      	cmp	r3, r2
 8006160:	d006      	beq.n	8006170 <put_lfn+0xb4>
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d103      	bne.n	8006178 <put_lfn+0xbc>
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006176:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	79fa      	ldrb	r2, [r7, #7]
 800617c:	701a      	strb	r2, [r3, #0]
}
 800617e:	bf00      	nop
 8006180:	3720      	adds	r7, #32
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	08008b40 	.word	0x08008b40

0800618c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08c      	sub	sp, #48	@ 0x30
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800619a:	220b      	movs	r2, #11
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7fe fc8f 	bl	8004ac2 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b05      	cmp	r3, #5
 80061a8:	d929      	bls.n	80061fe <gen_numname+0x72>
		sr = seq;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80061ae:	e020      	b.n	80061f2 <gen_numname+0x66>
			wc = *lfn++;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	1c9a      	adds	r2, r3, #2
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80061ba:	2300      	movs	r3, #0
 80061bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061be:	e015      	b.n	80061ec <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	005a      	lsls	r2, r3, #1
 80061c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	4413      	add	r3, r2
 80061cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80061ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061d0:	085b      	lsrs	r3, r3, #1
 80061d2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <gen_numname+0x5a>
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	4b30      	ldr	r3, [pc, #192]	@ (80062a4 <gen_numname+0x118>)
 80061e2:	4053      	eors	r3, r2
 80061e4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80061e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e8:	3301      	adds	r3, #1
 80061ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ee:	2b0f      	cmp	r3, #15
 80061f0:	d9e6      	bls.n	80061c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1da      	bne.n	80061b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80061fe:	2307      	movs	r3, #7
 8006200:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	b2db      	uxtb	r3, r3
 800620c:	3330      	adds	r3, #48	@ 0x30
 800620e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8006212:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006216:	2b39      	cmp	r3, #57	@ 0x39
 8006218:	d904      	bls.n	8006224 <gen_numname+0x98>
 800621a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800621e:	3307      	adds	r3, #7
 8006220:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8006224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006226:	1e5a      	subs	r2, r3, #1
 8006228:	62ba      	str	r2, [r7, #40]	@ 0x28
 800622a:	3330      	adds	r3, #48	@ 0x30
 800622c:	443b      	add	r3, r7
 800622e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006232:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	091b      	lsrs	r3, r3, #4
 800623a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1df      	bne.n	8006202 <gen_numname+0x76>
	ns[i] = '~';
 8006242:	f107 0214 	add.w	r2, r7, #20
 8006246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006248:	4413      	add	r3, r2
 800624a:	227e      	movs	r2, #126	@ 0x7e
 800624c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800624e:	2300      	movs	r3, #0
 8006250:	627b      	str	r3, [r7, #36]	@ 0x24
 8006252:	e002      	b.n	800625a <gen_numname+0xce>
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	3301      	adds	r3, #1
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
 800625a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800625c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625e:	429a      	cmp	r2, r3
 8006260:	d205      	bcs.n	800626e <gen_numname+0xe2>
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	4413      	add	r3, r2
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b20      	cmp	r3, #32
 800626c:	d1f2      	bne.n	8006254 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800626e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006270:	2b07      	cmp	r3, #7
 8006272:	d807      	bhi.n	8006284 <gen_numname+0xf8>
 8006274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	62ba      	str	r2, [r7, #40]	@ 0x28
 800627a:	3330      	adds	r3, #48	@ 0x30
 800627c:	443b      	add	r3, r7
 800627e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006282:	e000      	b.n	8006286 <gen_numname+0xfa>
 8006284:	2120      	movs	r1, #32
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	627a      	str	r2, [r7, #36]	@ 0x24
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	460a      	mov	r2, r1
 8006292:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	2b07      	cmp	r3, #7
 8006298:	d9e9      	bls.n	800626e <gen_numname+0xe2>
}
 800629a:	bf00      	nop
 800629c:	bf00      	nop
 800629e:	3730      	adds	r7, #48	@ 0x30
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	00011021 	.word	0x00011021

080062a8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80062b4:	230b      	movs	r3, #11
 80062b6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	0852      	lsrs	r2, r2, #1
 80062be:	01db      	lsls	r3, r3, #7
 80062c0:	4313      	orrs	r3, r2
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	1c59      	adds	r1, r3, #1
 80062c8:	6079      	str	r1, [r7, #4]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	4413      	add	r3, r2
 80062ce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1ed      	bne.n	80062b8 <sum_sfn+0x10>
	return sum;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b087      	sub	sp, #28
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3301      	adds	r3, #1
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	3301      	adds	r3, #1
 80062fa:	015b      	lsls	r3, r3, #5
 80062fc:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80062fe:	2300      	movs	r3, #0
 8006300:	827b      	strh	r3, [r7, #18]
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e017      	b.n	8006338 <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d103      	bne.n	8006316 <xdir_sum+0x2c>
			i++;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	3301      	adds	r3, #1
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	e00d      	b.n	8006332 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8006316:	8a7b      	ldrh	r3, [r7, #18]
 8006318:	03db      	lsls	r3, r3, #15
 800631a:	b29a      	uxth	r2, r3
 800631c:	8a7b      	ldrh	r3, [r7, #18]
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	b29b      	uxth	r3, r3
 8006322:	4413      	add	r3, r2
 8006324:	b29b      	uxth	r3, r3
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	440a      	add	r2, r1
 800632c:	7812      	ldrb	r2, [r2, #0]
 800632e:	4413      	add	r3, r2
 8006330:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	3301      	adds	r3, #1
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	429a      	cmp	r2, r3
 800633e:	d3e3      	bcc.n	8006308 <xdir_sum+0x1e>
		}
	}
	return sum;
 8006340:	8a7b      	ldrh	r3, [r7, #18]
}
 8006342:	4618      	mov	r0, r3
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800635a:	e01f      	b.n	800639c <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800635c:	89bb      	ldrh	r3, [r7, #12]
 800635e:	4618      	mov	r0, r3
 8006360:	f002 faac 	bl	80088bc <ff_wtoupper>
 8006364:	4603      	mov	r3, r0
 8006366:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8006368:	89fb      	ldrh	r3, [r7, #14]
 800636a:	03db      	lsls	r3, r3, #15
 800636c:	b29a      	uxth	r2, r3
 800636e:	89fb      	ldrh	r3, [r7, #14]
 8006370:	085b      	lsrs	r3, r3, #1
 8006372:	b29b      	uxth	r3, r3
 8006374:	4413      	add	r3, r2
 8006376:	b29a      	uxth	r2, r3
 8006378:	89bb      	ldrh	r3, [r7, #12]
 800637a:	b2db      	uxtb	r3, r3
 800637c:	b29b      	uxth	r3, r3
 800637e:	4413      	add	r3, r2
 8006380:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8006382:	89fb      	ldrh	r3, [r7, #14]
 8006384:	03db      	lsls	r3, r3, #15
 8006386:	b29a      	uxth	r2, r3
 8006388:	89fb      	ldrh	r3, [r7, #14]
 800638a:	085b      	lsrs	r3, r3, #1
 800638c:	b29b      	uxth	r3, r3
 800638e:	4413      	add	r3, r2
 8006390:	b29a      	uxth	r2, r3
 8006392:	89bb      	ldrh	r3, [r7, #12]
 8006394:	0a1b      	lsrs	r3, r3, #8
 8006396:	b29b      	uxth	r3, r3
 8006398:	4413      	add	r3, r2
 800639a:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	1c9a      	adds	r2, r3, #2
 80063a0:	607a      	str	r2, [r7, #4]
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	81bb      	strh	r3, [r7, #12]
 80063a6:	89bb      	ldrh	r3, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1d7      	bne.n	800635c <xname_sum+0xe>
	}
	return sum;
 80063ac:	89fb      	ldrh	r3, [r7, #14]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80063b8:	b590      	push	{r4, r7, lr}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f7fe fda4 	bl	8004f20 <move_window>
 80063d8:	4603      	mov	r3, r0
 80063da:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <load_xdir+0x2e>
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	e09f      	b.n	8006526 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b85      	cmp	r3, #133	@ 0x85
 80063ee:	d001      	beq.n	80063f4 <load_xdir+0x3c>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e098      	b.n	8006526 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f8:	2220      	movs	r2, #32
 80063fa:	4619      	mov	r1, r3
 80063fc:	6938      	ldr	r0, [r7, #16]
 80063fe:	f7fe fb60 	bl	8004ac2 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	3301      	adds	r3, #1
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	3301      	adds	r3, #1
 800640a:	015b      	lsls	r3, r3, #5
 800640c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b5f      	cmp	r3, #95	@ 0x5f
 8006412:	d903      	bls.n	800641c <load_xdir+0x64>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800641a:	d901      	bls.n	8006420 <load_xdir+0x68>
 800641c:	2302      	movs	r3, #2
 800641e:	e082      	b.n	8006526 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8006420:	2100      	movs	r1, #0
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff fc05 	bl	8005c32 <dir_next>
 8006428:	4603      	mov	r3, r0
 800642a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <load_xdir+0x7e>
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	e077      	b.n	8006526 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643e:	4619      	mov	r1, r3
 8006440:	4610      	mov	r0, r2
 8006442:	f7fe fd6d 	bl	8004f20 <move_window>
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <load_xdir+0x9c>
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	e068      	b.n	8006526 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2bc0      	cmp	r3, #192	@ 0xc0
 800645c:	d001      	beq.n	8006462 <load_xdir+0xaa>
 800645e:	2302      	movs	r3, #2
 8006460:	e061      	b.n	8006526 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f103 0020 	add.w	r0, r3, #32
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800646c:	2220      	movs	r2, #32
 800646e:	4619      	mov	r1, r3
 8006470:	f7fe fb27 	bl	8004ac2 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	3323      	adds	r3, #35	@ 0x23
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	332c      	adds	r3, #44	@ 0x2c
 800647c:	4a2c      	ldr	r2, [pc, #176]	@ (8006530 <load_xdir+0x178>)
 800647e:	fba2 2303 	umull	r2, r3, r2, r3
 8006482:	08db      	lsrs	r3, r3, #3
 8006484:	015b      	lsls	r3, r3, #5
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	429a      	cmp	r2, r3
 800648a:	d201      	bcs.n	8006490 <load_xdir+0xd8>
 800648c:	2302      	movs	r3, #2
 800648e:	e04a      	b.n	8006526 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8006490:	2340      	movs	r3, #64	@ 0x40
 8006492:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8006494:	2100      	movs	r1, #0
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff fbcb 	bl	8005c32 <dir_next>
 800649c:	4603      	mov	r3, r0
 800649e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <load_xdir+0xf2>
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	e03d      	b.n	8006526 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b2:	4619      	mov	r1, r3
 80064b4:	4610      	mov	r0, r2
 80064b6:	f7fe fd33 	bl	8004f20 <move_window>
 80064ba:	4603      	mov	r3, r0
 80064bc:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <load_xdir+0x110>
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	e02e      	b.n	8006526 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2bc1      	cmp	r3, #193	@ 0xc1
 80064d0:	d001      	beq.n	80064d6 <load_xdir+0x11e>
 80064d2:	2302      	movs	r3, #2
 80064d4:	e027      	b.n	8006526 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80064dc:	d208      	bcs.n	80064f0 <load_xdir+0x138>
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	18d0      	adds	r0, r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e8:	2220      	movs	r2, #32
 80064ea:	4619      	mov	r1, r3
 80064ec:	f7fe fae9 	bl	8004ac2 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	3320      	adds	r3, #32
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d3ca      	bcc.n	8006494 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8006504:	d80e      	bhi.n	8006524 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8006506:	6938      	ldr	r0, [r7, #16]
 8006508:	f7ff feef 	bl	80062ea <xdir_sum>
 800650c:	4603      	mov	r3, r0
 800650e:	461c      	mov	r4, r3
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	3302      	adds	r3, #2
 8006514:	4618      	mov	r0, r3
 8006516:	f7fe f8ef 	bl	80046f8 <ld_word>
 800651a:	4603      	mov	r3, r0
 800651c:	429c      	cmp	r4, r3
 800651e:	d001      	beq.n	8006524 <load_xdir+0x16c>
 8006520:	2302      	movs	r3, #2
 8006522:	e000      	b.n	8006526 <load_xdir+0x16e>
	}
	return FR_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd90      	pop	{r4, r7, pc}
 800652e:	bf00      	nop
 8006530:	88888889 	.word	0x88888889

08006534 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8006534:	b5b0      	push	{r4, r5, r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6808      	ldr	r0, [r1, #0]
 8006542:	6879      	ldr	r1, [r7, #4]
 8006544:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6a08      	ldr	r0, [r1, #32]
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8006552:	b2c8      	uxtb	r0, r1
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800655c:	2000      	movs	r0, #0
 800655e:	460c      	mov	r4, r1
 8006560:	4605      	mov	r5, r0
 8006562:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 8006566:	2300      	movs	r3, #0
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7ff fad2 	bl	8005b26 <dir_sdi>
 8006582:	4603      	mov	r3, r0
 8006584:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d104      	bne.n	8006596 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff ff13 	bl	80063b8 <load_xdir>
 8006592:	4603      	mov	r3, r0
 8006594:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8006596:	7bfb      	ldrb	r3, [r7, #15]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bdb0      	pop	{r4, r5, r7, pc}

080065a0 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	1c9c      	adds	r4, r3, #2
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff fe98 	bl	80062ea <xdir_sum>
 80065ba:	4603      	mov	r3, r0
 80065bc:	4619      	mov	r1, r3
 80065be:	4620      	mov	r0, r4
 80065c0:	f7fe f9b0 	bl	8004924 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3301      	adds	r3, #1
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	3301      	adds	r3, #1
 80065cc:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff faa6 	bl	8005b26 <dir_sdi>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80065de:	e026      	b.n	800662e <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e8:	4619      	mov	r1, r3
 80065ea:	4610      	mov	r0, r2
 80065ec:	f7fe fc98 	bl	8004f20 <move_window>
 80065f0:	4603      	mov	r3, r0
 80065f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d11d      	bne.n	8006636 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fe:	2220      	movs	r2, #32
 8006600:	68f9      	ldr	r1, [r7, #12]
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fa5d 	bl	8004ac2 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2201      	movs	r2, #1
 800660e:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	3b01      	subs	r3, #1
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00e      	beq.n	800663a <store_xdir+0x9a>
		dirb += SZDIRE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3320      	adds	r3, #32
 8006620:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8006622:	2100      	movs	r1, #0
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff fb04 	bl	8005c32 <dir_next>
 800662a:	4603      	mov	r3, r0
 800662c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0d5      	beq.n	80065e0 <store_xdir+0x40>
 8006634:	e002      	b.n	800663c <store_xdir+0x9c>
		if (res != FR_OK) break;
 8006636:	bf00      	nop
 8006638:	e000      	b.n	800663c <store_xdir+0x9c>
		if (--nent == 0) break;
 800663a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800663c:	7dfb      	ldrb	r3, [r7, #23]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <store_xdir+0xa8>
 8006642:	7dfb      	ldrb	r3, [r7, #23]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <store_xdir+0xac>
 8006648:	7dfb      	ldrb	r3, [r7, #23]
 800664a:	e000      	b.n	800664e <store_xdir+0xae>
 800664c:	2302      	movs	r3, #2
}
 800664e:	4618      	mov	r0, r3
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	bd90      	pop	{r4, r7, pc}

08006656 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8006656:	b590      	push	{r4, r7, lr}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8006660:	2240      	movs	r2, #64	@ 0x40
 8006662:	2100      	movs	r1, #0
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7fe fa4d 	bl	8004b04 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2285      	movs	r2, #133	@ 0x85
 800666e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3320      	adds	r3, #32
 8006674:	22c0      	movs	r2, #192	@ 0xc0
 8006676:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8006678:	2300      	movs	r3, #0
 800667a:	72bb      	strb	r3, [r7, #10]
 800667c:	2301      	movs	r3, #1
 800667e:	72fb      	strb	r3, [r7, #11]
 8006680:	2301      	movs	r3, #1
 8006682:	813b      	strh	r3, [r7, #8]
 8006684:	2340      	movs	r3, #64	@ 0x40
 8006686:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	60fa      	str	r2, [r7, #12]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	4413      	add	r3, r2
 8006692:	22c1      	movs	r2, #193	@ 0xc1
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	60fa      	str	r2, [r7, #12]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	4413      	add	r3, r2
 80066a0:	2200      	movs	r2, #0
 80066a2:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 80066a4:	893b      	ldrh	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00b      	beq.n	80066c2 <create_xdir+0x6c>
 80066aa:	7abb      	ldrb	r3, [r7, #10]
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	813b      	strh	r3, [r7, #8]
 80066b6:	893b      	ldrh	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <create_xdir+0x6c>
 80066bc:	7abb      	ldrb	r3, [r7, #10]
 80066be:	3301      	adds	r3, #1
 80066c0:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	893a      	ldrh	r2, [r7, #8]
 80066ca:	4611      	mov	r1, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fe f929 	bl	8004924 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3302      	adds	r3, #2
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f003 031f 	and.w	r3, r3, #31
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e0      	bne.n	80066a4 <create_xdir+0x4e>
		nb++;
 80066e2:	7afb      	ldrb	r3, [r7, #11]
 80066e4:	3301      	adds	r3, #1
 80066e6:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 80066e8:	7abb      	ldrb	r3, [r7, #10]
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	4413      	add	r3, r2
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1c8      	bne.n	8006688 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3323      	adds	r3, #35	@ 0x23
 80066fa:	7aba      	ldrb	r2, [r7, #10]
 80066fc:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3301      	adds	r3, #1
 8006702:	7afa      	ldrb	r2, [r7, #11]
 8006704:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800670c:	6838      	ldr	r0, [r7, #0]
 800670e:	f7ff fe1e 	bl	800634e <xname_sum>
 8006712:	4603      	mov	r3, r0
 8006714:	4619      	mov	r1, r3
 8006716:	4620      	mov	r0, r4
 8006718:	f7fe f904 	bl	8004924 <st_word>
}
 800671c:	bf00      	nop
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	bd90      	pop	{r4, r7, pc}

08006724 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800672e:	2304      	movs	r3, #4
 8006730:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8006738:	23ff      	movs	r3, #255	@ 0xff
 800673a:	757b      	strb	r3, [r7, #21]
 800673c:	23ff      	movs	r3, #255	@ 0xff
 800673e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006740:	e09f      	b.n	8006882 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	4619      	mov	r1, r3
 8006748:	6938      	ldr	r0, [r7, #16]
 800674a:	f7fe fbe9 	bl	8004f20 <move_window>
 800674e:	4603      	mov	r3, r0
 8006750:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006752:	7dfb      	ldrb	r3, [r7, #23]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f040 809a 	bne.w	800688e <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006762:	7dbb      	ldrb	r3, [r7, #22]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d102      	bne.n	800676e <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006768:	2304      	movs	r3, #4
 800676a:	75fb      	strb	r3, [r7, #23]
 800676c:	e096      	b.n	800689c <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b04      	cmp	r3, #4
 8006774:	d118      	bne.n	80067a8 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8006776:	7dbb      	ldrb	r3, [r7, #22]
 8006778:	2b85      	cmp	r3, #133	@ 0x85
 800677a:	d179      	bne.n	8006870 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff fe17 	bl	80063b8 <load_xdir>
 800678a:	4603      	mov	r3, r0
 800678c:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d17e      	bne.n	8006892 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	3304      	adds	r3, #4
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	719a      	strb	r2, [r3, #6]
					}
					break;
 80067a6:	e074      	b.n	8006892 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ac:	330b      	adds	r3, #11
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067b4:	73fb      	strb	r3, [r7, #15]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	7bfa      	ldrb	r2, [r7, #15]
 80067ba:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80067bc:	7dbb      	ldrb	r3, [r7, #22]
 80067be:	2be5      	cmp	r3, #229	@ 0xe5
 80067c0:	d00e      	beq.n	80067e0 <dir_read+0xbc>
 80067c2:	7dbb      	ldrb	r3, [r7, #22]
 80067c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80067c6:	d00b      	beq.n	80067e0 <dir_read+0xbc>
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	f023 0320 	bic.w	r3, r3, #32
 80067ce:	2b08      	cmp	r3, #8
 80067d0:	bf0c      	ite	eq
 80067d2:	2301      	moveq	r3, #1
 80067d4:	2300      	movne	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	461a      	mov	r2, r3
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	4293      	cmp	r3, r2
 80067de:	d002      	beq.n	80067e6 <dir_read+0xc2>
				ord = 0xFF;
 80067e0:	23ff      	movs	r3, #255	@ 0xff
 80067e2:	757b      	strb	r3, [r7, #21]
 80067e4:	e044      	b.n	8006870 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	2b0f      	cmp	r3, #15
 80067ea:	d12f      	bne.n	800684c <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80067ec:	7dbb      	ldrb	r3, [r7, #22]
 80067ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00d      	beq.n	8006812 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067fa:	7b5b      	ldrb	r3, [r3, #13]
 80067fc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80067fe:	7dbb      	ldrb	r3, [r7, #22]
 8006800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006804:	75bb      	strb	r3, [r7, #22]
 8006806:	7dbb      	ldrb	r3, [r7, #22]
 8006808:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006812:	7dba      	ldrb	r2, [r7, #22]
 8006814:	7d7b      	ldrb	r3, [r7, #21]
 8006816:	429a      	cmp	r2, r3
 8006818:	d115      	bne.n	8006846 <dir_read+0x122>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800681e:	330d      	adds	r3, #13
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	7d3a      	ldrb	r2, [r7, #20]
 8006824:	429a      	cmp	r2, r3
 8006826:	d10e      	bne.n	8006846 <dir_read+0x122>
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	68da      	ldr	r2, [r3, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f7ff fbde 	bl	8005ff4 <pick_lfn>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <dir_read+0x122>
 800683e:	7d7b      	ldrb	r3, [r7, #21]
 8006840:	3b01      	subs	r3, #1
 8006842:	b2db      	uxtb	r3, r3
 8006844:	e000      	b.n	8006848 <dir_read+0x124>
 8006846:	23ff      	movs	r3, #255	@ 0xff
 8006848:	757b      	strb	r3, [r7, #21]
 800684a:	e011      	b.n	8006870 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800684c:	7d7b      	ldrb	r3, [r7, #21]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <dir_read+0x142>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff fd26 	bl	80062a8 <sum_sfn>
 800685c:	4603      	mov	r3, r0
 800685e:	461a      	mov	r2, r3
 8006860:	7d3b      	ldrb	r3, [r7, #20]
 8006862:	4293      	cmp	r3, r2
 8006864:	d017      	beq.n	8006896 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f04f 32ff 	mov.w	r2, #4294967295
 800686c:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800686e:	e012      	b.n	8006896 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006870:	2100      	movs	r1, #0
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff f9dd 	bl	8005c32 <dir_next>
 8006878:	4603      	mov	r3, r0
 800687a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800687c:	7dfb      	ldrb	r3, [r7, #23]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10b      	bne.n	800689a <dir_read+0x176>
	while (dp->sect) {
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006886:	2b00      	cmp	r3, #0
 8006888:	f47f af5b 	bne.w	8006742 <dir_read+0x1e>
 800688c:	e006      	b.n	800689c <dir_read+0x178>
		if (res != FR_OK) break;
 800688e:	bf00      	nop
 8006890:	e004      	b.n	800689c <dir_read+0x178>
					break;
 8006892:	bf00      	nop
 8006894:	e002      	b.n	800689c <dir_read+0x178>
					break;
 8006896:	bf00      	nop
 8006898:	e000      	b.n	800689c <dir_read+0x178>
		if (res != FR_OK) break;
 800689a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800689c:	7dfb      	ldrb	r3, [r7, #23]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <dir_read+0x184>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80068b2:	b590      	push	{r4, r7, lr}
 80068b4:	b089      	sub	sp, #36	@ 0x24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80068c0:	2100      	movs	r1, #0
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff f92f 	bl	8005b26 <dir_sdi>
 80068c8:	4603      	mov	r3, r0
 80068ca:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80068cc:	7ffb      	ldrb	r3, [r7, #31]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <dir_find+0x24>
 80068d2:	7ffb      	ldrb	r3, [r7, #31]
 80068d4:	e113      	b.n	8006afe <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d165      	bne.n	80069aa <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff fd33 	bl	800634e <xname_sum>
 80068e8:	4603      	mov	r3, r0
 80068ea:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80068ec:	e050      	b.n	8006990 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	3324      	adds	r3, #36	@ 0x24
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fd feff 	bl	80046f8 <ld_word>
 80068fa:	4603      	mov	r3, r0
 80068fc:	461a      	mov	r2, r3
 80068fe:	893b      	ldrh	r3, [r7, #8]
 8006900:	4293      	cmp	r3, r2
 8006902:	d144      	bne.n	800698e <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800690c:	76fb      	strb	r3, [r7, #27]
 800690e:	2340      	movs	r3, #64	@ 0x40
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	2300      	movs	r3, #0
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	e029      	b.n	800696c <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <dir_find+0x76>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	3302      	adds	r3, #2
 8006926:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	4413      	add	r3, r2
 8006930:	4618      	mov	r0, r3
 8006932:	f7fd fee1 	bl	80046f8 <ld_word>
 8006936:	4603      	mov	r3, r0
 8006938:	4618      	mov	r0, r3
 800693a:	f001 ffbf 	bl	80088bc <ff_wtoupper>
 800693e:	4603      	mov	r3, r0
 8006940:	461c      	mov	r4, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	4413      	add	r3, r2
 800694c:	881b      	ldrh	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f001 ffb4 	bl	80088bc <ff_wtoupper>
 8006954:	4603      	mov	r3, r0
 8006956:	429c      	cmp	r4, r3
 8006958:	d10c      	bne.n	8006974 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800695a:	7efb      	ldrb	r3, [r7, #27]
 800695c:	3b01      	subs	r3, #1
 800695e:	76fb      	strb	r3, [r7, #27]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	3302      	adds	r3, #2
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	3301      	adds	r3, #1
 800696a:	613b      	str	r3, [r7, #16]
 800696c:	7efb      	ldrb	r3, [r7, #27]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1d2      	bne.n	8006918 <dir_find+0x66>
 8006972:	e000      	b.n	8006976 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8006974:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8006976:	7efb      	ldrb	r3, [r7, #27]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d109      	bne.n	8006990 <dir_find+0xde>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <dir_find+0xf2>
 800698c:	e000      	b.n	8006990 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800698e:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8006990:	2100      	movs	r1, #0
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff fec6 	bl	8006724 <dir_read>
 8006998:	4603      	mov	r3, r0
 800699a:	77fb      	strb	r3, [r7, #31]
 800699c:	7ffb      	ldrb	r3, [r7, #31]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0a5      	beq.n	80068ee <dir_find+0x3c>
 80069a2:	e000      	b.n	80069a6 <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80069a4:	bf00      	nop
		}
		return res;
 80069a6:	7ffb      	ldrb	r3, [r7, #31]
 80069a8:	e0a9      	b.n	8006afe <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80069aa:	23ff      	movs	r3, #255	@ 0xff
 80069ac:	773b      	strb	r3, [r7, #28]
 80069ae:	7f3b      	ldrb	r3, [r7, #28]
 80069b0:	777b      	strb	r3, [r7, #29]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f04f 32ff 	mov.w	r2, #4294967295
 80069b8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069be:	4619      	mov	r1, r3
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7fe faad 	bl	8004f20 <move_window>
 80069c6:	4603      	mov	r3, r0
 80069c8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 80069ca:	7ffb      	ldrb	r3, [r7, #31]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f040 8090 	bne.w	8006af2 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80069da:	7fbb      	ldrb	r3, [r7, #30]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d102      	bne.n	80069e6 <dir_find+0x134>
 80069e0:	2304      	movs	r3, #4
 80069e2:	77fb      	strb	r3, [r7, #31]
 80069e4:	e08a      	b.n	8006afc <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ea:	330b      	adds	r3, #11
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069f2:	72fb      	strb	r3, [r7, #11]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	7afa      	ldrb	r2, [r7, #11]
 80069f8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80069fa:	7fbb      	ldrb	r3, [r7, #30]
 80069fc:	2be5      	cmp	r3, #229	@ 0xe5
 80069fe:	d007      	beq.n	8006a10 <dir_find+0x15e>
 8006a00:	7afb      	ldrb	r3, [r7, #11]
 8006a02:	f003 0308 	and.w	r3, r3, #8
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <dir_find+0x16c>
 8006a0a:	7afb      	ldrb	r3, [r7, #11]
 8006a0c:	2b0f      	cmp	r3, #15
 8006a0e:	d006      	beq.n	8006a1e <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006a10:	23ff      	movs	r3, #255	@ 0xff
 8006a12:	777b      	strb	r3, [r7, #29]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f04f 32ff 	mov.w	r2, #4294967295
 8006a1a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006a1c:	e05e      	b.n	8006adc <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006a1e:	7afb      	ldrb	r3, [r7, #11]
 8006a20:	2b0f      	cmp	r3, #15
 8006a22:	d136      	bne.n	8006a92 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d154      	bne.n	8006adc <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006a32:	7fbb      	ldrb	r3, [r7, #30]
 8006a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00d      	beq.n	8006a58 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a40:	7b5b      	ldrb	r3, [r3, #13]
 8006a42:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006a44:	7fbb      	ldrb	r3, [r7, #30]
 8006a46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a4a:	77bb      	strb	r3, [r7, #30]
 8006a4c:	7fbb      	ldrb	r3, [r7, #30]
 8006a4e:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006a58:	7fba      	ldrb	r2, [r7, #30]
 8006a5a:	7f7b      	ldrb	r3, [r7, #29]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d115      	bne.n	8006a8c <dir_find+0x1da>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a64:	330d      	adds	r3, #13
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	7f3a      	ldrb	r2, [r7, #28]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d10e      	bne.n	8006a8c <dir_find+0x1da>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a76:	4619      	mov	r1, r3
 8006a78:	4610      	mov	r0, r2
 8006a7a:	f7ff fa4b 	bl	8005f14 <cmp_lfn>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <dir_find+0x1da>
 8006a84:	7f7b      	ldrb	r3, [r7, #29]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	e000      	b.n	8006a8e <dir_find+0x1dc>
 8006a8c:	23ff      	movs	r3, #255	@ 0xff
 8006a8e:	777b      	strb	r3, [r7, #29]
 8006a90:	e024      	b.n	8006adc <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006a92:	7f7b      	ldrb	r3, [r7, #29]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <dir_find+0x1fa>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff fc03 	bl	80062a8 <sum_sfn>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	7f3b      	ldrb	r3, [r7, #28]
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d024      	beq.n	8006af6 <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <dir_find+0x21e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3340      	adds	r3, #64	@ 0x40
 8006ac2:	220b      	movs	r2, #11
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	f7fe f838 	bl	8004b3a <mem_cmp>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d014      	beq.n	8006afa <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ad0:	23ff      	movs	r3, #255	@ 0xff
 8006ad2:	777b      	strb	r3, [r7, #29]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8006ada:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006adc:	2100      	movs	r1, #0
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff f8a7 	bl	8005c32 <dir_next>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8006ae8:	7ffb      	ldrb	r3, [r7, #31]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f43f af65 	beq.w	80069ba <dir_find+0x108>
 8006af0:	e004      	b.n	8006afc <dir_find+0x24a>
		if (res != FR_OK) break;
 8006af2:	bf00      	nop
 8006af4:	e002      	b.n	8006afc <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006af6:	bf00      	nop
 8006af8:	e000      	b.n	8006afc <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006afa:	bf00      	nop

	return res;
 8006afc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3724      	adds	r7, #36	@ 0x24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd90      	pop	{r4, r7, pc}
	...

08006b08 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006b08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b0c:	b0a0      	sub	sp, #128	@ 0x80
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006b1e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <dir_register+0x22>
 8006b26:	2306      	movs	r3, #6
 8006b28:	e18e      	b.n	8006e48 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b2e:	e002      	b.n	8006b36 <dir_register+0x2e>
 8006b30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b32:	3301      	adds	r3, #1
 8006b34:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	4413      	add	r3, r2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f4      	bne.n	8006b30 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	f040 809f 	bne.w	8006c8e <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8006b50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b52:	330e      	adds	r3, #14
 8006b54:	4aa2      	ldr	r2, [pc, #648]	@ (8006de0 <dir_register+0x2d8>)
 8006b56:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5a:	08db      	lsrs	r3, r3, #3
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8006b60:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff f93a 	bl	8005ddc <dir_alloc>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 8006b6e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <dir_register+0x74>
 8006b76:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006b7a:	e165      	b.n	8006e48 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b82:	3b01      	subs	r3, #1
 8006b84:	015b      	lsls	r3, r3, #5
 8006b86:	1ad2      	subs	r2, r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d072      	beq.n	8006c7a <dir_register+0x172>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	79db      	ldrb	r3, [r3, #7]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d06c      	beq.n	8006c7a <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006ba6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006ba8:	8949      	ldrh	r1, [r1, #10]
 8006baa:	0249      	lsls	r1, r1, #9
 8006bac:	2000      	movs	r0, #0
 8006bae:	460c      	mov	r4, r1
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	eb12 0804 	adds.w	r8, r2, r4
 8006bb6:	eb43 0905 	adc.w	r9, r3, r5
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe fd56 	bl	8005674 <fill_first_frag>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8006bce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <dir_register+0xd4>
 8006bd6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006bda:	e135      	b.n	8006e48 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be2:	f04f 32ff 	mov.w	r2, #4294967295
 8006be6:	4619      	mov	r1, r3
 8006be8:	f7fe fd73 	bl	80056d2 <fill_last_frag>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8006bf2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <dir_register+0xf8>
 8006bfa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006bfe:	e123      	b.n	8006e48 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	f107 0308 	add.w	r3, r7, #8
 8006c06:	4611      	mov	r1, r2
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff fc93 	bl	8006534 <load_obj_dir>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8006c14:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <dir_register+0x11a>
 8006c1c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006c20:	e112      	b.n	8006e48 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8006c22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006c30:	4608      	mov	r0, r1
 8006c32:	f7fd febe 	bl	80049b2 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8006c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006c44:	4608      	mov	r0, r1
 8006c46:	f7fd feb4 	bl	80049b2 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	79da      	ldrb	r2, [r3, #7]
 8006c4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	3321      	adds	r3, #33	@ 0x21
 8006c54:	f042 0201 	orr.w	r2, r2, #1
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8006c5c:	f107 0308 	add.w	r3, r7, #8
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff fc9d 	bl	80065a0 <store_xdir>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8006c6c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <dir_register+0x172>
 8006c74:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006c78:	e0e6      	b.n	8006e48 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8006c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c7c:	691a      	ldr	r2, [r3, #16]
 8006c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f7ff fce6 	bl	8006656 <create_xdir>
		return FR_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e0dc      	b.n	8006e48 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8006c94:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006c98:	220c      	movs	r2, #12
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fd ff11 	bl	8004ac2 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006ca0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d033      	beq.n	8006d14 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2240      	movs	r2, #64	@ 0x40
 8006cb0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cb8:	e016      	b.n	8006ce8 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8006cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8006cc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cca:	f7ff fa5f 	bl	800618c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff fdef 	bl	80068b2 <dir_find>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 8006cda:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 8006ce2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ce8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cea:	2b63      	cmp	r3, #99	@ 0x63
 8006cec:	d9e5      	bls.n	8006cba <dir_register+0x1b2>
 8006cee:	e000      	b.n	8006cf2 <dir_register+0x1ea>
			if (res != FR_OK) break;
 8006cf0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006cf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cf4:	2b64      	cmp	r3, #100	@ 0x64
 8006cf6:	d101      	bne.n	8006cfc <dir_register+0x1f4>
 8006cf8:	2307      	movs	r3, #7
 8006cfa:	e0a5      	b.n	8006e48 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006cfc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d002      	beq.n	8006d0a <dir_register+0x202>
 8006d04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006d08:	e09e      	b.n	8006e48 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006d0a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006d14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d007      	beq.n	8006d30 <dir_register+0x228>
 8006d20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d22:	330c      	adds	r3, #12
 8006d24:	4a2f      	ldr	r2, [pc, #188]	@ (8006de4 <dir_register+0x2dc>)
 8006d26:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2a:	089b      	lsrs	r3, r3, #2
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	e000      	b.n	8006d32 <dir_register+0x22a>
 8006d30:	2301      	movs	r3, #1
 8006d32:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006d34:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff f850 	bl	8005ddc <dir_alloc>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006d42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d14f      	bne.n	8006dea <dir_register+0x2e2>
 8006d4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d049      	beq.n	8006dea <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d5c:	015b      	lsls	r3, r3, #5
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fe fedf 	bl	8005b26 <dir_sdi>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8006d6e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d139      	bne.n	8006dea <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3340      	adds	r3, #64	@ 0x40
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff fa94 	bl	80062a8 <sum_sfn>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d8e:	f7fe f8c7 	bl	8004f20 <move_window>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 8006d98:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d123      	bne.n	8006de8 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006da0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006da2:	68d8      	ldr	r0, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8006da8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8006db0:	f7ff f984 	bl	80060bc <put_lfn>
				fs->wflag = 1;
 8006db4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006db6:	2201      	movs	r2, #1
 8006db8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006dba:	2100      	movs	r1, #0
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7fe ff38 	bl	8005c32 <dir_next>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 8006dc8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10c      	bne.n	8006dea <dir_register+0x2e2>
 8006dd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1d4      	bne.n	8006d86 <dir_register+0x27e>
 8006ddc:	e005      	b.n	8006dea <dir_register+0x2e2>
 8006dde:	bf00      	nop
 8006de0:	88888889 	.word	0x88888889
 8006de4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8006de8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006dea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d128      	bne.n	8006e44 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df6:	4619      	mov	r1, r3
 8006df8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006dfa:	f7fe f891 	bl	8004f20 <move_window>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8006e04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d11b      	bne.n	8006e44 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e10:	2220      	movs	r2, #32
 8006e12:	2100      	movs	r1, #0
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fd fe75 	bl	8004b04 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	3340      	adds	r3, #64	@ 0x40
 8006e22:	220b      	movs	r2, #11
 8006e24:	4619      	mov	r1, r3
 8006e26:	f7fd fe4c 	bl	8004ac2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e34:	330c      	adds	r3, #12
 8006e36:	f002 0218 	and.w	r2, r2, #24
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e40:	2201      	movs	r2, #1
 8006e42:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006e44:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3780      	adds	r7, #128	@ 0x80
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006e52:	bf00      	nop

08006e54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b08a      	sub	sp, #40	@ 0x28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	613b      	str	r3, [r7, #16]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	61ba      	str	r2, [r7, #24]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006e82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e84:	2b1f      	cmp	r3, #31
 8006e86:	d940      	bls.n	8006f0a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006e88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e8c:	d006      	beq.n	8006e9c <create_name+0x48>
 8006e8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e90:	2b5c      	cmp	r3, #92	@ 0x5c
 8006e92:	d110      	bne.n	8006eb6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006e94:	e002      	b.n	8006e9c <create_name+0x48>
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	61bb      	str	r3, [r7, #24]
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b2f      	cmp	r3, #47	@ 0x2f
 8006ea6:	d0f6      	beq.n	8006e96 <create_name+0x42>
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	4413      	add	r3, r2
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b5c      	cmp	r3, #92	@ 0x5c
 8006eb2:	d0f0      	beq.n	8006e96 <create_name+0x42>
			break;
 8006eb4:	e02a      	b.n	8006f0c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2bfe      	cmp	r3, #254	@ 0xfe
 8006eba:	d901      	bls.n	8006ec0 <create_name+0x6c>
 8006ebc:	2306      	movs	r3, #6
 8006ebe:	e17d      	b.n	80071bc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006ec0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006ec6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ec8:	2101      	movs	r1, #1
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f001 fcba 	bl	8008844 <ff_convert>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006ed4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <create_name+0x8a>
 8006eda:	2306      	movs	r3, #6
 8006edc:	e16e      	b.n	80071bc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006ede:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ee0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ee2:	d809      	bhi.n	8006ef8 <create_name+0xa4>
 8006ee4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	488d      	ldr	r0, [pc, #564]	@ (8007120 <create_name+0x2cc>)
 8006eea:	f7fd fe4d 	bl	8004b88 <chk_chr>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <create_name+0xa4>
 8006ef4:	2306      	movs	r3, #6
 8006ef6:	e161      	b.n	80071bc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	617a      	str	r2, [r7, #20]
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006f06:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006f08:	e7b4      	b.n	8006e74 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006f0a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	441a      	add	r2, r3
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006f16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f18:	2b1f      	cmp	r3, #31
 8006f1a:	d801      	bhi.n	8006f20 <create_name+0xcc>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	e000      	b.n	8006f22 <create_name+0xce>
 8006f20:	2300      	movs	r3, #0
 8006f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006f26:	e011      	b.n	8006f4c <create_name+0xf8>
		w = lfn[di - 1];
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8006f2e:	4413      	add	r3, r2
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006f3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d002      	beq.n	8006f46 <create_name+0xf2>
 8006f40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f42:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f44:	d106      	bne.n	8006f54 <create_name+0x100>
		di--;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1ea      	bne.n	8006f28 <create_name+0xd4>
 8006f52:	e000      	b.n	8006f56 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006f54:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	2200      	movs	r2, #0
 8006f60:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <create_name+0x118>
 8006f68:	2306      	movs	r3, #6
 8006f6a:	e127      	b.n	80071bc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3340      	adds	r3, #64	@ 0x40
 8006f70:	220b      	movs	r2, #11
 8006f72:	2120      	movs	r1, #32
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fd fdc5 	bl	8004b04 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	e002      	b.n	8006f86 <create_name+0x132>
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	3301      	adds	r3, #1
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d0f5      	beq.n	8006f80 <create_name+0x12c>
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fa0:	d0ee      	beq.n	8006f80 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d009      	beq.n	8006fbc <create_name+0x168>
 8006fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fac:	f043 0303 	orr.w	r3, r3, #3
 8006fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006fb4:	e002      	b.n	8006fbc <create_name+0x168>
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d009      	beq.n	8006fd6 <create_name+0x182>
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8006fc8:	4413      	add	r3, r2
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fd4:	d1ef      	bne.n	8006fb6 <create_name+0x162>

	i = b = 0; ni = 8;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006fdc:	2300      	movs	r3, #0
 8006fde:	623b      	str	r3, [r7, #32]
 8006fe0:	2308      	movs	r3, #8
 8006fe2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	61ba      	str	r2, [r7, #24]
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006ff4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 8090 	beq.w	800711c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006ffc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ffe:	2b20      	cmp	r3, #32
 8007000:	d006      	beq.n	8007010 <create_name+0x1bc>
 8007002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007004:	2b2e      	cmp	r3, #46	@ 0x2e
 8007006:	d10a      	bne.n	800701e <create_name+0x1ca>
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	429a      	cmp	r2, r3
 800700e:	d006      	beq.n	800701e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007014:	f043 0303 	orr.w	r3, r3, #3
 8007018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800701c:	e07d      	b.n	800711a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800701e:	6a3a      	ldr	r2, [r7, #32]
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	429a      	cmp	r2, r3
 8007024:	d203      	bcs.n	800702e <create_name+0x1da>
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	429a      	cmp	r2, r3
 800702c:	d123      	bne.n	8007076 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	2b0b      	cmp	r3, #11
 8007032:	d106      	bne.n	8007042 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007038:	f043 0303 	orr.w	r3, r3, #3
 800703c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007040:	e075      	b.n	800712e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	429a      	cmp	r2, r3
 8007048:	d005      	beq.n	8007056 <create_name+0x202>
 800704a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800704e:	f043 0303 	orr.w	r3, r3, #3
 8007052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	429a      	cmp	r2, r3
 800705c:	d866      	bhi.n	800712c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	2308      	movs	r3, #8
 8007064:	623b      	str	r3, [r7, #32]
 8007066:	230b      	movs	r3, #11
 8007068:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800706a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007074:	e051      	b.n	800711a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007076:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007078:	2b7f      	cmp	r3, #127	@ 0x7f
 800707a:	d914      	bls.n	80070a6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800707c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800707e:	2100      	movs	r1, #0
 8007080:	4618      	mov	r0, r3
 8007082:	f001 fbdf 	bl	8008844 <ff_convert>
 8007086:	4603      	mov	r3, r0
 8007088:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800708a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <create_name+0x246>
 8007090:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007092:	3b80      	subs	r3, #128	@ 0x80
 8007094:	4a23      	ldr	r2, [pc, #140]	@ (8007124 <create_name+0x2d0>)
 8007096:	5cd3      	ldrb	r3, [r2, r3]
 8007098:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800709a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800709e:	f043 0302 	orr.w	r3, r3, #2
 80070a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80070a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d007      	beq.n	80070bc <create_name+0x268>
 80070ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070ae:	4619      	mov	r1, r3
 80070b0:	481d      	ldr	r0, [pc, #116]	@ (8007128 <create_name+0x2d4>)
 80070b2:	f7fd fd69 	bl	8004b88 <chk_chr>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d008      	beq.n	80070ce <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80070bc:	235f      	movs	r3, #95	@ 0x5f
 80070be:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80070c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070c4:	f043 0303 	orr.w	r3, r3, #3
 80070c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80070cc:	e01b      	b.n	8007106 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80070ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070d0:	2b40      	cmp	r3, #64	@ 0x40
 80070d2:	d909      	bls.n	80070e8 <create_name+0x294>
 80070d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070d6:	2b5a      	cmp	r3, #90	@ 0x5a
 80070d8:	d806      	bhi.n	80070e8 <create_name+0x294>
					b |= 2;
 80070da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070de:	f043 0302 	orr.w	r3, r3, #2
 80070e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80070e6:	e00e      	b.n	8007106 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80070e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070ea:	2b60      	cmp	r3, #96	@ 0x60
 80070ec:	d90b      	bls.n	8007106 <create_name+0x2b2>
 80070ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070f0:	2b7a      	cmp	r3, #122	@ 0x7a
 80070f2:	d808      	bhi.n	8007106 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80070f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070f8:	f043 0301 	orr.w	r3, r3, #1
 80070fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007100:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007102:	3b20      	subs	r3, #32
 8007104:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	623a      	str	r2, [r7, #32]
 800710c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800710e:	b2d1      	uxtb	r1, r2
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	4413      	add	r3, r2
 8007114:	460a      	mov	r2, r1
 8007116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800711a:	e763      	b.n	8006fe4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800711c:	bf00      	nop
 800711e:	e006      	b.n	800712e <create_name+0x2da>
 8007120:	08008a50 	.word	0x08008a50
 8007124:	08008ac0 	.word	0x08008ac0
 8007128:	08008a5c 	.word	0x08008a5c
			if (si > di) break;			/* No extension */
 800712c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007134:	2be5      	cmp	r3, #229	@ 0xe5
 8007136:	d103      	bne.n	8007140 <create_name+0x2ec>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2205      	movs	r2, #5
 800713c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	2b08      	cmp	r3, #8
 8007144:	d104      	bne.n	8007150 <create_name+0x2fc>
 8007146:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007150:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007154:	f003 030c 	and.w	r3, r3, #12
 8007158:	2b0c      	cmp	r3, #12
 800715a:	d005      	beq.n	8007168 <create_name+0x314>
 800715c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	2b03      	cmp	r3, #3
 8007166:	d105      	bne.n	8007174 <create_name+0x320>
 8007168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800716c:	f043 0302 	orr.w	r3, r3, #2
 8007170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d117      	bne.n	80071b0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007180:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007184:	f003 0303 	and.w	r3, r3, #3
 8007188:	2b01      	cmp	r3, #1
 800718a:	d105      	bne.n	8007198 <create_name+0x344>
 800718c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007190:	f043 0310 	orr.w	r3, r3, #16
 8007194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007198:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800719c:	f003 030c 	and.w	r3, r3, #12
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d105      	bne.n	80071b0 <create_name+0x35c>
 80071a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071a8:	f043 0308 	orr.w	r3, r3, #8
 80071ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80071b6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 80071ba:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3728      	adds	r7, #40	@ 0x28
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80071d8:	e002      	b.n	80071e0 <follow_path+0x1c>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80071e6:	d0f8      	beq.n	80071da <follow_path+0x16>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80071ee:	d0f4      	beq.n	80071da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2200      	movs	r2, #0
 80071f4:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2200      	movs	r2, #0
 80071fa:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2b1f      	cmp	r3, #31
 8007202:	d80a      	bhi.n	800721a <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2280      	movs	r2, #128	@ 0x80
 8007208:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800720c:	2100      	movs	r1, #0
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7fe fc89 	bl	8005b26 <dir_sdi>
 8007214:	4603      	mov	r3, r0
 8007216:	75fb      	strb	r3, [r7, #23]
 8007218:	e078      	b.n	800730c <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800721a:	463b      	mov	r3, r7
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff fe18 	bl	8006e54 <create_name>
 8007224:	4603      	mov	r3, r0
 8007226:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d169      	bne.n	8007302 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7ff fb3f 	bl	80068b2 <dir_find>
 8007234:	4603      	mov	r3, r0
 8007236:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800723e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	2b04      	cmp	r3, #4
 800724a:	d15c      	bne.n	8007306 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800724c:	7afb      	ldrb	r3, [r7, #11]
 800724e:	f003 0304 	and.w	r3, r3, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	d157      	bne.n	8007306 <follow_path+0x142>
 8007256:	2305      	movs	r3, #5
 8007258:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800725a:	e054      	b.n	8007306 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800725c:	7afb      	ldrb	r3, [r7, #11]
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d151      	bne.n	800730a <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	799b      	ldrb	r3, [r3, #6]
 800726a:	f003 0310 	and.w	r3, r3, #16
 800726e:	2b00      	cmp	r3, #0
 8007270:	d102      	bne.n	8007278 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8007272:	2305      	movs	r3, #5
 8007274:	75fb      	strb	r3, [r7, #23]
 8007276:	e049      	b.n	800730c <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b04      	cmp	r3, #4
 800727e:	d130      	bne.n	80072e2 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800728e:	4613      	mov	r3, r2
 8007290:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	79d2      	ldrb	r2, [r2, #7]
 8007298:	431a      	orrs	r2, r3
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	3334      	adds	r3, #52	@ 0x34
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fd fa3b 	bl	8004728 <ld_dword>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	3321      	adds	r3, #33	@ 0x21
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	3338      	adds	r3, #56	@ 0x38
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fd fa4c 	bl	800476e <ld_qword>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	6939      	ldr	r1, [r7, #16]
 80072dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80072e0:	e79b      	b.n	800721a <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f0:	4413      	add	r3, r2
 80072f2:	4619      	mov	r1, r3
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f7fe fdcd 	bl	8005e94 <ld_clust>
 80072fa:	4602      	mov	r2, r0
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007300:	e78b      	b.n	800721a <follow_path+0x56>
			if (res != FR_OK) break;
 8007302:	bf00      	nop
 8007304:	e002      	b.n	800730c <follow_path+0x148>
				break;
 8007306:	bf00      	nop
 8007308:	e000      	b.n	800730c <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800730a:	bf00      	nop
			}
		}
	}

	return res;
 800730c:	7dfb      	ldrb	r3, [r7, #23]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007316:	b480      	push	{r7}
 8007318:	b087      	sub	sp, #28
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800731e:	f04f 33ff 	mov.w	r3, #4294967295
 8007322:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d031      	beq.n	8007390 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	e002      	b.n	800733a <get_ldnumber+0x24>
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	3301      	adds	r3, #1
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b1f      	cmp	r3, #31
 8007340:	d903      	bls.n	800734a <get_ldnumber+0x34>
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b3a      	cmp	r3, #58	@ 0x3a
 8007348:	d1f4      	bne.n	8007334 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007350:	d11c      	bne.n	800738c <get_ldnumber+0x76>
			tp = *path;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	60fa      	str	r2, [r7, #12]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	3b30      	subs	r3, #48	@ 0x30
 8007362:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b09      	cmp	r3, #9
 8007368:	d80e      	bhi.n	8007388 <get_ldnumber+0x72>
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	429a      	cmp	r2, r3
 8007370:	d10a      	bne.n	8007388 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d107      	bne.n	8007388 <get_ldnumber+0x72>
					vol = (int)i;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	3301      	adds	r3, #1
 8007380:	617b      	str	r3, [r7, #20]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	e002      	b.n	8007392 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800738c:	2300      	movs	r3, #0
 800738e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007390:	693b      	ldr	r3, [r7, #16]
}
 8007392:	4618      	mov	r0, r3
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
	...

080073a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	70da      	strb	r2, [r3, #3]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f04f 32ff 	mov.w	r2, #4294967295
 80073b6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fd fdb0 	bl	8004f20 <move_window>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <check_fs+0x2a>
 80073c6:	2304      	movs	r3, #4
 80073c8:	e044      	b.n	8007454 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3338      	adds	r3, #56	@ 0x38
 80073ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fd f990 	bl	80046f8 <ld_word>
 80073d8:	4603      	mov	r3, r0
 80073da:	461a      	mov	r2, r3
 80073dc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d001      	beq.n	80073e8 <check_fs+0x48>
 80073e4:	2303      	movs	r3, #3
 80073e6:	e035      	b.n	8007454 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80073ee:	2be9      	cmp	r3, #233	@ 0xe9
 80073f0:	d009      	beq.n	8007406 <check_fs+0x66>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80073f8:	2beb      	cmp	r3, #235	@ 0xeb
 80073fa:	d11e      	bne.n	800743a <check_fs+0x9a>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007402:	2b90      	cmp	r3, #144	@ 0x90
 8007404:	d119      	bne.n	800743a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3338      	adds	r3, #56	@ 0x38
 800740a:	3336      	adds	r3, #54	@ 0x36
 800740c:	4618      	mov	r0, r3
 800740e:	f7fd f98b 	bl	8004728 <ld_dword>
 8007412:	4603      	mov	r3, r0
 8007414:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007418:	4a10      	ldr	r2, [pc, #64]	@ (800745c <check_fs+0xbc>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d101      	bne.n	8007422 <check_fs+0x82>
 800741e:	2300      	movs	r3, #0
 8007420:	e018      	b.n	8007454 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3338      	adds	r3, #56	@ 0x38
 8007426:	3352      	adds	r3, #82	@ 0x52
 8007428:	4618      	mov	r0, r3
 800742a:	f7fd f97d 	bl	8004728 <ld_dword>
 800742e:	4603      	mov	r3, r0
 8007430:	4a0b      	ldr	r2, [pc, #44]	@ (8007460 <check_fs+0xc0>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d101      	bne.n	800743a <check_fs+0x9a>
 8007436:	2300      	movs	r3, #0
 8007438:	e00c      	b.n	8007454 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3338      	adds	r3, #56	@ 0x38
 800743e:	220b      	movs	r2, #11
 8007440:	4908      	ldr	r1, [pc, #32]	@ (8007464 <check_fs+0xc4>)
 8007442:	4618      	mov	r0, r3
 8007444:	f7fd fb79 	bl	8004b3a <mem_cmp>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <check_fs+0xb2>
 800744e:	2301      	movs	r3, #1
 8007450:	e000      	b.n	8007454 <check_fs+0xb4>
#endif
	return 2;
 8007452:	2302      	movs	r3, #2
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	00544146 	.word	0x00544146
 8007460:	33544146 	.word	0x33544146
 8007464:	08008a64 	.word	0x08008a64

08007468 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800746c:	b09c      	sub	sp, #112	@ 0x70
 800746e:	af00      	add	r7, sp, #0
 8007470:	61f8      	str	r0, [r7, #28]
 8007472:	61b9      	str	r1, [r7, #24]
 8007474:	4613      	mov	r3, r2
 8007476:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800747e:	69f8      	ldr	r0, [r7, #28]
 8007480:	f7ff ff49 	bl	8007316 <get_ldnumber>
 8007484:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 8007486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007488:	2b00      	cmp	r3, #0
 800748a:	da01      	bge.n	8007490 <find_volume+0x28>
 800748c:	230b      	movs	r3, #11
 800748e:	e337      	b.n	8007b00 <find_volume+0x698>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007490:	4a99      	ldr	r2, [pc, #612]	@ (80076f8 <find_volume+0x290>)
 8007492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007498:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800749a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <find_volume+0x3c>
 80074a0:	230c      	movs	r3, #12
 80074a2:	e32d      	b.n	8007b00 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80074a8:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	f023 0301 	bic.w	r3, r3, #1
 80074b0:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80074b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d01a      	beq.n	80074f0 <find_volume+0x88>
		stat = disk_status(fs->drv);
 80074ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074bc:	785b      	ldrb	r3, [r3, #1]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fd f87c 	bl	80045bc <disk_status>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80074ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10c      	bne.n	80074f0 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d007      	beq.n	80074ec <find_volume+0x84>
 80074dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80074e8:	230a      	movs	r3, #10
 80074ea:	e309      	b.n	8007b00 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 80074ec:	2300      	movs	r3, #0
 80074ee:	e307      	b.n	8007b00 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80074f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074f2:	2200      	movs	r2, #0
 80074f4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80074f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074fc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80074fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	4618      	mov	r0, r3
 8007504:	f7fd f874 	bl	80045f0 <disk_initialize>
 8007508:	4603      	mov	r3, r0
 800750a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800750e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800751a:	2303      	movs	r3, #3
 800751c:	e2f0      	b.n	8007b00 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d007      	beq.n	8007534 <find_volume+0xcc>
 8007524:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8007530:	230a      	movs	r3, #10
 8007532:	e2e5      	b.n	8007b00 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007538:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800753a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800753c:	f7ff ff30 	bl	80073a0 <check_fs>
 8007540:	4603      	mov	r3, r0
 8007542:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007546:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800754a:	2b02      	cmp	r3, #2
 800754c:	d14d      	bne.n	80075ea <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800754e:	2300      	movs	r3, #0
 8007550:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007552:	e020      	b.n	8007596 <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007554:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007556:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800755a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007562:	4413      	add	r3, r2
 8007564:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007568:	3304      	adds	r3, #4
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d006      	beq.n	800757e <find_volume+0x116>
 8007570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007572:	3308      	adds	r3, #8
 8007574:	4618      	mov	r0, r3
 8007576:	f7fd f8d7 	bl	8004728 <ld_dword>
 800757a:	4602      	mov	r2, r0
 800757c:	e000      	b.n	8007580 <find_volume+0x118>
 800757e:	2200      	movs	r2, #0
 8007580:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	3360      	adds	r3, #96	@ 0x60
 8007586:	f107 0110 	add.w	r1, r7, #16
 800758a:	440b      	add	r3, r1
 800758c:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007590:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007592:	3301      	adds	r3, #1
 8007594:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007596:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007598:	2b03      	cmp	r3, #3
 800759a:	d9db      	bls.n	8007554 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800759c:	2300      	movs	r3, #0
 800759e:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 80075a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <find_volume+0x144>
 80075a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075a8:	3b01      	subs	r3, #1
 80075aa:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 80075ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	3360      	adds	r3, #96	@ 0x60
 80075b2:	f107 0210 	add.w	r2, r7, #16
 80075b6:	4413      	add	r3, r2
 80075b8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80075bc:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80075be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <find_volume+0x168>
 80075c4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80075c6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80075c8:	f7ff feea 	bl	80073a0 <check_fs>
 80075cc:	4603      	mov	r3, r0
 80075ce:	e000      	b.n	80075d2 <find_volume+0x16a>
 80075d0:	2303      	movs	r3, #3
 80075d2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80075d6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d905      	bls.n	80075ea <find_volume+0x182>
 80075de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075e0:	3301      	adds	r3, #1
 80075e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d9e0      	bls.n	80075ac <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80075ea:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d101      	bne.n	80075f6 <find_volume+0x18e>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e284      	b.n	8007b00 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80075f6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d901      	bls.n	8007602 <find_volume+0x19a>
 80075fe:	230d      	movs	r3, #13
 8007600:	e27e      	b.n	8007b00 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8007602:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007606:	2b01      	cmp	r3, #1
 8007608:	f040 80fa 	bne.w	8007800 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800760c:	230b      	movs	r3, #11
 800760e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007610:	e002      	b.n	8007618 <find_volume+0x1b0>
 8007612:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007614:	3301      	adds	r3, #1
 8007616:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007618:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800761a:	2b3f      	cmp	r3, #63	@ 0x3f
 800761c:	d806      	bhi.n	800762c <find_volume+0x1c4>
 800761e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007622:	4413      	add	r3, r2
 8007624:	3338      	adds	r3, #56	@ 0x38
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0f2      	beq.n	8007612 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800762c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800762e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007630:	d801      	bhi.n	8007636 <find_volume+0x1ce>
 8007632:	230d      	movs	r3, #13
 8007634:	e264      	b.n	8007b00 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8007636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007638:	3338      	adds	r3, #56	@ 0x38
 800763a:	3368      	adds	r3, #104	@ 0x68
 800763c:	4618      	mov	r0, r3
 800763e:	f7fd f85b 	bl	80046f8 <ld_word>
 8007642:	4603      	mov	r3, r0
 8007644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007648:	d001      	beq.n	800764e <find_volume+0x1e6>
 800764a:	230d      	movs	r3, #13
 800764c:	e258      	b.n	8007b00 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800764e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007650:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007654:	2b09      	cmp	r3, #9
 8007656:	d001      	beq.n	800765c <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 8007658:	230d      	movs	r3, #13
 800765a:	e251      	b.n	8007b00 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800765c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800765e:	3338      	adds	r3, #56	@ 0x38
 8007660:	3348      	adds	r3, #72	@ 0x48
 8007662:	4618      	mov	r0, r3
 8007664:	f7fd f883 	bl	800476e <ld_qword>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800766e:	2000      	movs	r0, #0
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	68b9      	ldr	r1, [r7, #8]
 8007676:	1851      	adds	r1, r2, r1
 8007678:	6039      	str	r1, [r7, #0]
 800767a:	68f9      	ldr	r1, [r7, #12]
 800767c:	eb43 0101 	adc.w	r1, r3, r1
 8007680:	6079      	str	r1, [r7, #4]
 8007682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007686:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800768a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800768e:	2b01      	cmp	r3, #1
 8007690:	d301      	bcc.n	8007696 <find_volume+0x22e>
 8007692:	230d      	movs	r3, #13
 8007694:	e234      	b.n	8007b00 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8007696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007698:	3338      	adds	r3, #56	@ 0x38
 800769a:	3354      	adds	r3, #84	@ 0x54
 800769c:	4618      	mov	r0, r3
 800769e:	f7fd f843 	bl	8004728 <ld_dword>
 80076a2:	4602      	mov	r2, r0
 80076a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076a6:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80076a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076aa:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 80076ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076b0:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80076b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076b4:	789b      	ldrb	r3, [r3, #2]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d001      	beq.n	80076be <find_volume+0x256>
 80076ba:	230d      	movs	r3, #13
 80076bc:	e220      	b.n	8007b00 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80076be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80076c4:	461a      	mov	r2, r3
 80076c6:	2301      	movs	r3, #1
 80076c8:	4093      	lsls	r3, r2
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ce:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80076d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076d2:	895b      	ldrh	r3, [r3, #10]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <find_volume+0x274>
 80076d8:	230d      	movs	r3, #13
 80076da:	e211      	b.n	8007b00 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80076dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076de:	3338      	adds	r3, #56	@ 0x38
 80076e0:	335c      	adds	r3, #92	@ 0x5c
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fd f820 	bl	8004728 <ld_dword>
 80076e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80076ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ec:	4a03      	ldr	r2, [pc, #12]	@ (80076fc <find_volume+0x294>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d906      	bls.n	8007700 <find_volume+0x298>
 80076f2:	230d      	movs	r3, #13
 80076f4:	e204      	b.n	8007b00 <find_volume+0x698>
 80076f6:	bf00      	nop
 80076f8:	20020628 	.word	0x20020628
 80076fc:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8007700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007702:	1c9a      	adds	r2, r3, #2
 8007704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007706:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8007708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800770a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800770c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800770e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007710:	3338      	adds	r3, #56	@ 0x38
 8007712:	3358      	adds	r3, #88	@ 0x58
 8007714:	4618      	mov	r0, r3
 8007716:	f7fd f807 	bl	8004728 <ld_dword>
 800771a:	4602      	mov	r2, r0
 800771c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800771e:	441a      	add	r2, r3
 8007720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007722:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8007724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007726:	3338      	adds	r3, #56	@ 0x38
 8007728:	3350      	adds	r3, #80	@ 0x50
 800772a:	4618      	mov	r0, r3
 800772c:	f7fc fffc 	bl	8004728 <ld_dword>
 8007730:	4602      	mov	r2, r0
 8007732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007734:	441a      	add	r2, r3
 8007736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007738:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800773a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800773c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800773e:	2200      	movs	r2, #0
 8007740:	469a      	mov	sl, r3
 8007742:	4693      	mov	fp, r2
 8007744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007746:	895b      	ldrh	r3, [r3, #10]
 8007748:	461a      	mov	r2, r3
 800774a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800774c:	fb02 f303 	mul.w	r3, r2, r3
 8007750:	2200      	movs	r2, #0
 8007752:	4698      	mov	r8, r3
 8007754:	4691      	mov	r9, r2
 8007756:	eb1a 0408 	adds.w	r4, sl, r8
 800775a:	eb4b 0509 	adc.w	r5, fp, r9
 800775e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007762:	42a2      	cmp	r2, r4
 8007764:	41ab      	sbcs	r3, r5
 8007766:	d201      	bcs.n	800776c <find_volume+0x304>
 8007768:	230d      	movs	r3, #13
 800776a:	e1c9      	b.n	8007b00 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800776c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800776e:	3338      	adds	r3, #56	@ 0x38
 8007770:	3360      	adds	r3, #96	@ 0x60
 8007772:	4618      	mov	r0, r3
 8007774:	f7fc ffd8 	bl	8004728 <ld_dword>
 8007778:	4602      	mov	r2, r0
 800777a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800777c:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800777e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007782:	4619      	mov	r1, r3
 8007784:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007786:	f7fd fc67 	bl	8005058 <clust2sect>
 800778a:	4603      	mov	r3, r0
 800778c:	4619      	mov	r1, r3
 800778e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007790:	f7fd fbc6 	bl	8004f20 <move_window>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <find_volume+0x336>
 800779a:	2301      	movs	r3, #1
 800779c:	e1b0      	b.n	8007b00 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800779e:	2300      	movs	r3, #0
 80077a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077a2:	e015      	b.n	80077d0 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80077a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80077a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077a8:	4413      	add	r3, r2
 80077aa:	3338      	adds	r3, #56	@ 0x38
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b81      	cmp	r3, #129	@ 0x81
 80077b0:	d10b      	bne.n	80077ca <find_volume+0x362>
 80077b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077b4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80077b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077ba:	3314      	adds	r3, #20
 80077bc:	4413      	add	r3, r2
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fc ffb2 	bl	8004728 <ld_dword>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d007      	beq.n	80077da <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80077ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077cc:	3320      	adds	r3, #32
 80077ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077d6:	d3e5      	bcc.n	80077a4 <find_volume+0x33c>
 80077d8:	e000      	b.n	80077dc <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80077da:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 80077dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077e2:	d101      	bne.n	80077e8 <find_volume+0x380>
 80077e4:	230d      	movs	r3, #13
 80077e6:	e18b      	b.n	8007b00 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80077e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ea:	f04f 32ff 	mov.w	r2, #4294967295
 80077ee:	619a      	str	r2, [r3, #24]
 80077f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077f2:	699a      	ldr	r2, [r3, #24]
 80077f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077f6:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80077f8:	2304      	movs	r3, #4
 80077fa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80077fe:	e167      	b.n	8007ad0 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007802:	3338      	adds	r3, #56	@ 0x38
 8007804:	330b      	adds	r3, #11
 8007806:	4618      	mov	r0, r3
 8007808:	f7fc ff76 	bl	80046f8 <ld_word>
 800780c:	4603      	mov	r3, r0
 800780e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007812:	d001      	beq.n	8007818 <find_volume+0x3b0>
 8007814:	230d      	movs	r3, #13
 8007816:	e173      	b.n	8007b00 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800781a:	3338      	adds	r3, #56	@ 0x38
 800781c:	3316      	adds	r3, #22
 800781e:	4618      	mov	r0, r3
 8007820:	f7fc ff6a 	bl	80046f8 <ld_word>
 8007824:	4603      	mov	r3, r0
 8007826:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800782a:	2b00      	cmp	r3, #0
 800782c:	d106      	bne.n	800783c <find_volume+0x3d4>
 800782e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007830:	3338      	adds	r3, #56	@ 0x38
 8007832:	3324      	adds	r3, #36	@ 0x24
 8007834:	4618      	mov	r0, r3
 8007836:	f7fc ff77 	bl	8004728 <ld_dword>
 800783a:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800783c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800783e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007840:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007844:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8007848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800784a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800784c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800784e:	789b      	ldrb	r3, [r3, #2]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d005      	beq.n	8007860 <find_volume+0x3f8>
 8007854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007856:	789b      	ldrb	r3, [r3, #2]
 8007858:	2b02      	cmp	r3, #2
 800785a:	d001      	beq.n	8007860 <find_volume+0x3f8>
 800785c:	230d      	movs	r3, #13
 800785e:	e14f      	b.n	8007b00 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007862:	789b      	ldrb	r3, [r3, #2]
 8007864:	461a      	mov	r2, r3
 8007866:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007868:	fb02 f303 	mul.w	r3, r2, r3
 800786c:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800786e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007870:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007874:	461a      	mov	r2, r3
 8007876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007878:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800787a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800787c:	895b      	ldrh	r3, [r3, #10]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d008      	beq.n	8007894 <find_volume+0x42c>
 8007882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007884:	895b      	ldrh	r3, [r3, #10]
 8007886:	461a      	mov	r2, r3
 8007888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800788a:	895b      	ldrh	r3, [r3, #10]
 800788c:	3b01      	subs	r3, #1
 800788e:	4013      	ands	r3, r2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <find_volume+0x430>
 8007894:	230d      	movs	r3, #13
 8007896:	e133      	b.n	8007b00 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800789a:	3338      	adds	r3, #56	@ 0x38
 800789c:	3311      	adds	r3, #17
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fc ff2a 	bl	80046f8 <ld_word>
 80078a4:	4603      	mov	r3, r0
 80078a6:	461a      	mov	r2, r3
 80078a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80078ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078ae:	891b      	ldrh	r3, [r3, #8]
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <find_volume+0x456>
 80078ba:	230d      	movs	r3, #13
 80078bc:	e120      	b.n	8007b00 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80078be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078c0:	3338      	adds	r3, #56	@ 0x38
 80078c2:	3313      	adds	r3, #19
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fc ff17 	bl	80046f8 <ld_word>
 80078ca:	4603      	mov	r3, r0
 80078cc:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80078ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d106      	bne.n	80078e2 <find_volume+0x47a>
 80078d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078d6:	3338      	adds	r3, #56	@ 0x38
 80078d8:	3320      	adds	r3, #32
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fc ff24 	bl	8004728 <ld_dword>
 80078e0:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80078e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078e4:	3338      	adds	r3, #56	@ 0x38
 80078e6:	330e      	adds	r3, #14
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fc ff05 	bl	80046f8 <ld_word>
 80078ee:	4603      	mov	r3, r0
 80078f0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80078f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <find_volume+0x498>
 80078fc:	230d      	movs	r3, #13
 80078fe:	e0ff      	b.n	8007b00 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007900:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007906:	4413      	add	r3, r2
 8007908:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800790a:	8912      	ldrh	r2, [r2, #8]
 800790c:	0912      	lsrs	r2, r2, #4
 800790e:	b292      	uxth	r2, r2
 8007910:	4413      	add	r3, r2
 8007912:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007914:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007918:	429a      	cmp	r2, r3
 800791a:	d201      	bcs.n	8007920 <find_volume+0x4b8>
 800791c:	230d      	movs	r3, #13
 800791e:	e0ef      	b.n	8007b00 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007920:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007928:	8952      	ldrh	r2, [r2, #10]
 800792a:	fbb3 f3f2 	udiv	r3, r3, r2
 800792e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <find_volume+0x4d2>
 8007936:	230d      	movs	r3, #13
 8007938:	e0e2      	b.n	8007b00 <find_volume+0x698>
		fmt = FS_FAT32;
 800793a:	2303      	movs	r3, #3
 800793c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007942:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007946:	4293      	cmp	r3, r2
 8007948:	d802      	bhi.n	8007950 <find_volume+0x4e8>
 800794a:	2302      	movs	r3, #2
 800794c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007952:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007956:	4293      	cmp	r3, r2
 8007958:	d802      	bhi.n	8007960 <find_volume+0x4f8>
 800795a:	2301      	movs	r3, #1
 800795c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007962:	1c9a      	adds	r2, r3, #2
 8007964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007966:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800796a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800796c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800796e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007972:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007974:	441a      	add	r2, r3
 8007976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007978:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800797a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800797c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800797e:	441a      	add	r2, r3
 8007980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007982:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8007984:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007988:	2b03      	cmp	r3, #3
 800798a:	d11e      	bne.n	80079ca <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800798c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800798e:	3338      	adds	r3, #56	@ 0x38
 8007990:	332a      	adds	r3, #42	@ 0x2a
 8007992:	4618      	mov	r0, r3
 8007994:	f7fc feb0 	bl	80046f8 <ld_word>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <find_volume+0x53a>
 800799e:	230d      	movs	r3, #13
 80079a0:	e0ae      	b.n	8007b00 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80079a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079a4:	891b      	ldrh	r3, [r3, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <find_volume+0x546>
 80079aa:	230d      	movs	r3, #13
 80079ac:	e0a8      	b.n	8007b00 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80079ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079b0:	3338      	adds	r3, #56	@ 0x38
 80079b2:	332c      	adds	r3, #44	@ 0x2c
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fc feb7 	bl	8004728 <ld_dword>
 80079ba:	4602      	mov	r2, r0
 80079bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079be:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80079c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079c8:	e01f      	b.n	8007a0a <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80079ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079cc:	891b      	ldrh	r3, [r3, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <find_volume+0x56e>
 80079d2:	230d      	movs	r3, #13
 80079d4:	e094      	b.n	8007b00 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80079d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079dc:	441a      	add	r2, r3
 80079de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079e0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80079e2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d103      	bne.n	80079f2 <find_volume+0x58a>
 80079ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	e00a      	b.n	8007a08 <find_volume+0x5a0>
 80079f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079f4:	69da      	ldr	r2, [r3, #28]
 80079f6:	4613      	mov	r3, r2
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	4413      	add	r3, r2
 80079fc:	085a      	lsrs	r2, r3, #1
 80079fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007a0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a0c:	6a1a      	ldr	r2, [r3, #32]
 8007a0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a10:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007a14:	0a5b      	lsrs	r3, r3, #9
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d201      	bcs.n	8007a1e <find_volume+0x5b6>
 8007a1a:	230d      	movs	r3, #13
 8007a1c:	e070      	b.n	8007b00 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a20:	f04f 32ff 	mov.w	r2, #4294967295
 8007a24:	619a      	str	r2, [r3, #24]
 8007a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a2c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a30:	2280      	movs	r2, #128	@ 0x80
 8007a32:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007a34:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d149      	bne.n	8007ad0 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a3e:	3338      	adds	r3, #56	@ 0x38
 8007a40:	3330      	adds	r3, #48	@ 0x30
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fc fe58 	bl	80046f8 <ld_word>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d140      	bne.n	8007ad0 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007a4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a50:	3301      	adds	r3, #1
 8007a52:	4619      	mov	r1, r3
 8007a54:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007a56:	f7fd fa63 	bl	8004f20 <move_window>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d137      	bne.n	8007ad0 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 8007a60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a62:	2200      	movs	r2, #0
 8007a64:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a68:	3338      	adds	r3, #56	@ 0x38
 8007a6a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fc fe42 	bl	80046f8 <ld_word>
 8007a74:	4603      	mov	r3, r0
 8007a76:	461a      	mov	r2, r3
 8007a78:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d127      	bne.n	8007ad0 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a82:	3338      	adds	r3, #56	@ 0x38
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fc fe4f 	bl	8004728 <ld_dword>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8007b0c <find_volume+0x6a4>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d11e      	bne.n	8007ad0 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a94:	3338      	adds	r3, #56	@ 0x38
 8007a96:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fc fe44 	bl	8004728 <ld_dword>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8007b10 <find_volume+0x6a8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d113      	bne.n	8007ad0 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007aa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aaa:	3338      	adds	r3, #56	@ 0x38
 8007aac:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fc fe39 	bl	8004728 <ld_dword>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aba:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007abe:	3338      	adds	r3, #56	@ 0x38
 8007ac0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fc fe2f 	bl	8004728 <ld_dword>
 8007aca:	4602      	mov	r2, r0
 8007acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ace:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007ad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ad2:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8007ad6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8007b14 <find_volume+0x6ac>)
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	3301      	adds	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8007b14 <find_volume+0x6ac>)
 8007ae2:	801a      	strh	r2, [r3, #0]
 8007ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b14 <find_volume+0x6ac>)
 8007ae6:	881a      	ldrh	r2, [r3, #0]
 8007ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aea:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aee:	4a0a      	ldr	r2, [pc, #40]	@ (8007b18 <find_volume+0x6b0>)
 8007af0:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8007af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007af4:	4a09      	ldr	r2, [pc, #36]	@ (8007b1c <find_volume+0x6b4>)
 8007af6:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007af8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007afa:	f7fd f9a9 	bl	8004e50 <clear_lock>
#endif
	return FR_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3770      	adds	r7, #112	@ 0x70
 8007b04:	46bd      	mov	sp, r7
 8007b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b0a:	bf00      	nop
 8007b0c:	41615252 	.word	0x41615252
 8007b10:	61417272 	.word	0x61417272
 8007b14:	2002062c 	.word	0x2002062c
 8007b18:	200208b0 	.word	0x200208b0
 8007b1c:	20020650 	.word	0x20020650

08007b20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007b2a:	2309      	movs	r3, #9
 8007b2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01c      	beq.n	8007b6e <validate+0x4e>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d018      	beq.n	8007b6e <validate+0x4e>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d013      	beq.n	8007b6e <validate+0x4e>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	889a      	ldrh	r2, [r3, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	88db      	ldrh	r3, [r3, #6]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d10c      	bne.n	8007b6e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fc fd2e 	bl	80045bc <disk_status>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <validate+0x4e>
			res = FR_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <validate+0x5a>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	e000      	b.n	8007b7c <validate+0x5c>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	6013      	str	r3, [r2, #0]
	return res;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
	...

08007b8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b088      	sub	sp, #32
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007b9e:	f107 0310 	add.w	r3, r7, #16
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7ff fbb7 	bl	8007316 <get_ldnumber>
 8007ba8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	da01      	bge.n	8007bb4 <f_mount+0x28>
 8007bb0:	230b      	movs	r3, #11
 8007bb2:	e02b      	b.n	8007c0c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007bb4:	4a17      	ldr	r2, [pc, #92]	@ (8007c14 <f_mount+0x88>)
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bbc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d005      	beq.n	8007bd0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007bc4:	69b8      	ldr	r0, [r7, #24]
 8007bc6:	f7fd f943 	bl	8004e50 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	490d      	ldr	r1, [pc, #52]	@ (8007c14 <f_mount+0x88>)
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <f_mount+0x66>
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d001      	beq.n	8007bf6 <f_mount+0x6a>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	e00a      	b.n	8007c0c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007bf6:	f107 010c 	add.w	r1, r7, #12
 8007bfa:	f107 0308 	add.w	r3, r7, #8
 8007bfe:	2200      	movs	r2, #0
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7ff fc31 	bl	8007468 <find_volume>
 8007c06:	4603      	mov	r3, r0
 8007c08:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3720      	adds	r7, #32
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	20020628 	.word	0x20020628

08007c18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c1c:	b0a6      	sub	sp, #152	@ 0x98
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	61f8      	str	r0, [r7, #28]
 8007c22:	61b9      	str	r1, [r7, #24]
 8007c24:	4613      	mov	r3, r2
 8007c26:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <f_open+0x1a>
 8007c2e:	2309      	movs	r3, #9
 8007c30:	e2aa      	b.n	8008188 <f_open+0x570>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
 8007c34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c38:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 8007c3a:	7dfa      	ldrb	r2, [r7, #23]
 8007c3c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8007c40:	f107 0318 	add.w	r3, r7, #24
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff fc0f 	bl	8007468 <find_volume>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	if (res == FR_OK) {
 8007c50:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f040 828e 	bne.w	8008176 <f_open+0x55e>
		dj.obj.fs = fs;
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007c64:	4611      	mov	r1, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff faac 	bl	80071c4 <follow_path>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007c72:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d118      	bne.n	8007cac <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007c7a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8007c7e:	b25b      	sxtb	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	da03      	bge.n	8007c8c <f_open+0x74>
				res = FR_INVALID_NAME;
 8007c84:	2306      	movs	r3, #6
 8007c86:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8007c8a:	e00f      	b.n	8007cac <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	bf8c      	ite	hi
 8007c92:	2301      	movhi	r3, #1
 8007c94:	2300      	movls	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	461a      	mov	r2, r3
 8007c9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fc ff8d 	bl	8004bc0 <chk_lock>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
 8007cae:	f003 031c 	and.w	r3, r3, #28
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 8115 	beq.w	8007ee2 <f_open+0x2ca>
			if (res != FR_OK) {					/* No file, create new */
 8007cb8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d017      	beq.n	8007cf0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007cc0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007cc4:	2b04      	cmp	r3, #4
 8007cc6:	d10e      	bne.n	8007ce6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007cc8:	f7fc ffd6 	bl	8004c78 <enq_lock>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d006      	beq.n	8007ce0 <f_open+0xc8>
 8007cd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe ff16 	bl	8006b08 <dir_register>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	e000      	b.n	8007ce2 <f_open+0xca>
 8007ce0:	2312      	movs	r3, #18
 8007ce2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	f043 0308 	orr.w	r3, r3, #8
 8007cec:	75fb      	strb	r3, [r7, #23]
 8007cee:	e011      	b.n	8007d14 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007cf0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007cf4:	f003 0311 	and.w	r3, r3, #17
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <f_open+0xec>
					res = FR_DENIED;
 8007cfc:	2307      	movs	r3, #7
 8007cfe:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8007d02:	e007      	b.n	8007d14 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <f_open+0xfc>
 8007d0e:	2308      	movs	r3, #8
 8007d10:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007d14:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f040 80fe 	bne.w	8007f1a <f_open+0x302>
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80f8 	beq.w	8007f1a <f_open+0x302>
				dw = GET_FATTIME();
 8007d2a:	f7fc fa21 	bl	8004170 <get_fattime>
 8007d2e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	f040 8084 	bne.w	8007e44 <f_open+0x22c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8007d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8007d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	3334      	adds	r3, #52	@ 0x34
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fc fced 	bl	8004728 <ld_dword>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8007d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	3338      	adds	r3, #56	@ 0x38
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fc fd07 	bl	800476e <ld_qword>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	69f9      	ldr	r1, [r7, #28]
 8007d66:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	3321      	adds	r3, #33	@ 0x21
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	3308      	adds	r3, #8
 8007d88:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fc fde4 	bl	800495a <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8007d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	3314      	adds	r3, #20
 8007d98:	2200      	movs	r2, #0
 8007d9a:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	330c      	adds	r3, #12
 8007da2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fc fdd7 	bl	800495a <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	3315      	adds	r3, #21
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8007db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	3334      	adds	r3, #52	@ 0x34
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fc fdc6 	bl	800495a <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8007dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007dd6:	f04f 0200 	mov.w	r2, #0
 8007dda:	f04f 0300 	mov.w	r3, #0
 8007dde:	4608      	mov	r0, r1
 8007de0:	f7fc fde7 	bl	80049b2 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8007de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	4608      	mov	r0, r1
 8007df6:	f7fc fddc 	bl	80049b2 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	3321      	adds	r3, #33	@ 0x21
 8007e00:	2201      	movs	r2, #1
 8007e02:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8007e04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fe fbc9 	bl	80065a0 <store_xdir>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8007e14:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d17e      	bne.n	8007f1a <f_open+0x302>
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d07a      	beq.n	8007f1a <f_open+0x302>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8007e24:	69f8      	ldr	r0, [r7, #28]
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	f7fd fc81 	bl	8005734 <remove_chain>
 8007e32:	4603      	mov	r3, r0
 8007e34:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3e:	3a01      	subs	r2, #1
 8007e40:	615a      	str	r2, [r3, #20]
 8007e42:	e06a      	b.n	8007f1a <f_open+0x302>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007e44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e46:	330e      	adds	r3, #14
 8007e48:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fc fd84 	bl	800495a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007e52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e54:	3316      	adds	r3, #22
 8007e56:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fc fd7d 	bl	800495a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007e60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e62:	330b      	adds	r3, #11
 8007e64:	2220      	movs	r2, #32
 8007e66:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe f810 	bl	8005e94 <ld_clust>
 8007e74:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe f827 	bl	8005ed2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e86:	331c      	adds	r3, #28
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fc fd65 	bl	800495a <st_dword>
					fs->wflag = 1;
 8007e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e92:	2201      	movs	r2, #1
 8007e94:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d03d      	beq.n	8007f1a <f_open+0x302>
						dw = fs->winsect;
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						res = remove_chain(&dj.obj, cl, 0);
 8007ea6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fd fc3f 	bl	8005734 <remove_chain>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						if (res == FR_OK) {
 8007ebc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d12a      	bne.n	8007f1a <f_open+0x302>
							res = move_window(fs, dw);
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec6:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fd f828 	bl	8004f20 <move_window>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007edc:	3a01      	subs	r2, #1
 8007ede:	615a      	str	r2, [r3, #20]
 8007ee0:	e01b      	b.n	8007f1a <f_open+0x302>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007ee2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d117      	bne.n	8007f1a <f_open+0x302>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007eea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007eee:	f003 0310 	and.w	r3, r3, #16
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <f_open+0x2e6>
					res = FR_NO_FILE;
 8007ef6:	2304      	movs	r3, #4
 8007ef8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8007efc:	e00d      	b.n	8007f1a <f_open+0x302>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d008      	beq.n	8007f1a <f_open+0x302>
 8007f08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <f_open+0x302>
						res = FR_DENIED;
 8007f14:	2307      	movs	r3, #7
 8007f16:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 8007f1a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d126      	bne.n	8007f70 <f_open+0x358>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <f_open+0x31c>
				mode |= FA_MODIFIED;
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f32:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8007f3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	bf8c      	ite	hi
 8007f48:	2301      	movhi	r3, #1
 8007f4a:	2300      	movls	r3, #0
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007f54:	4611      	mov	r1, r2
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fc feb0 	bl	8004cbc <inc_lock>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d102      	bne.n	8007f70 <f_open+0x358>
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007f70:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f040 80fe 	bne.w	8008176 <f_open+0x55e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d12d      	bne.n	8007fde <f_open+0x3c6>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8007f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8007f88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007f92:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007f96:	431a      	orrs	r2, r3
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8007f9c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	3334      	adds	r3, #52	@ 0x34
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fc fbbd 	bl	8004728 <ld_dword>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	3338      	adds	r3, #56	@ 0x38
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fc fbd7 	bl	800476e <ld_qword>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	69f9      	ldr	r1, [r7, #28]
 8007fc6:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	3321      	adds	r3, #33	@ 0x21
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	71da      	strb	r2, [r3, #7]
 8007fdc:	e016      	b.n	800800c <f_open+0x3f4>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fd ff55 	bl	8005e94 <ld_clust>
 8007fea:	4602      	mov	r2, r0
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ff2:	331c      	adds	r3, #28
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fc fb97 	bl	8004728 <ld_dword>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	60bb      	str	r3, [r7, #8]
 8008000:	60fa      	str	r2, [r7, #12]
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008008:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	2200      	movs	r2, #0
 8008010:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801a:	88da      	ldrh	r2, [r3, #6]
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	7dfa      	ldrb	r2, [r7, #23]
 8008024:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	2200      	movs	r2, #0
 8008034:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008036:	69f9      	ldr	r1, [r7, #28]
 8008038:	f04f 0200 	mov.w	r2, #0
 800803c:	f04f 0300 	mov.w	r3, #0
 8008040:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	3354      	adds	r3, #84	@ 0x54
 8008048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f7fc fd58 	bl	8004b04 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008054:	7dfb      	ldrb	r3, [r7, #23]
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 808b 	beq.w	8008176 <f_open+0x55e>
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008066:	4313      	orrs	r3, r2
 8008068:	f000 8085 	beq.w	8008176 <f_open+0x55e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008072:	69f9      	ldr	r1, [r7, #28]
 8008074:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807a:	895b      	ldrh	r3, [r3, #10]
 800807c:	025b      	lsls	r3, r3, #9
 800807e:	67fb      	str	r3, [r7, #124]	@ 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800808e:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8008092:	e026      	b.n	80080e2 <f_open+0x4ca>
					clst = get_fat(&fp->obj, clst);
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800809a:	4618      	mov	r0, r3
 800809c:	f7fc fffc 	bl	8005098 <get_fat>
 80080a0:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					if (clst <= 1) res = FR_INT_ERR;
 80080a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d802      	bhi.n	80080b2 <f_open+0x49a>
 80080ac:	2302      	movs	r3, #2
 80080ae:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80080b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80080b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ba:	d102      	bne.n	80080c2 <f_open+0x4aa>
 80080bc:	2301      	movs	r3, #1
 80080be:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80080c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80080c4:	2200      	movs	r2, #0
 80080c6:	469a      	mov	sl, r3
 80080c8:	4693      	mov	fp, r2
 80080ca:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80080ce:	ebb2 010a 	subs.w	r1, r2, sl
 80080d2:	6039      	str	r1, [r7, #0]
 80080d4:	eb63 030b 	sbc.w	r3, r3, fp
 80080d8:	607b      	str	r3, [r7, #4]
 80080da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080de:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 80080e2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d109      	bne.n	80080fe <f_open+0x4e6>
 80080ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80080ec:	2200      	movs	r2, #0
 80080ee:	4698      	mov	r8, r3
 80080f0:	4691      	mov	r9, r2
 80080f2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80080f6:	4590      	cmp	r8, r2
 80080f8:	eb79 0303 	sbcs.w	r3, r9, r3
 80080fc:	d3ca      	bcc.n	8008094 <f_open+0x47c>
				}
				fp->clust = clst;
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008104:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008106:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800810a:	2b00      	cmp	r3, #0
 800810c:	d133      	bne.n	8008176 <f_open+0x55e>
 800810e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008112:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8008116:	2500      	movs	r5, #0
 8008118:	ea54 0305 	orrs.w	r3, r4, r5
 800811c:	d02b      	beq.n	8008176 <f_open+0x55e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008120:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008124:	4618      	mov	r0, r3
 8008126:	f7fc ff97 	bl	8005058 <clust2sect>
 800812a:	67b8      	str	r0, [r7, #120]	@ 0x78
 800812c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800812e:	2b00      	cmp	r3, #0
 8008130:	d103      	bne.n	800813a <f_open+0x522>
						res = FR_INT_ERR;
 8008132:	2302      	movs	r3, #2
 8008134:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8008138:	e01d      	b.n	8008176 <f_open+0x55e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800813a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800813e:	f04f 0200 	mov.w	r2, #0
 8008142:	f04f 0300 	mov.w	r3, #0
 8008146:	0a42      	lsrs	r2, r0, #9
 8008148:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800814c:	0a4b      	lsrs	r3, r1, #9
 800814e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008150:	441a      	add	r2, r3
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008158:	7858      	ldrb	r0, [r3, #1]
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008164:	2301      	movs	r3, #1
 8008166:	f7fc fa69 	bl	800463c <disk_read>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <f_open+0x55e>
 8008170:	2301      	movs	r3, #1
 8008172:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008176:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <f_open+0x56c>
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	2200      	movs	r2, #0
 8008182:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008184:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8008188:	4618      	mov	r0, r3
 800818a:	3798      	adds	r7, #152	@ 0x98
 800818c:	46bd      	mov	sp, r7
 800818e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008192 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008192:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008196:	b08d      	sub	sp, #52	@ 0x34
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f107 0210 	add.w	r2, r7, #16
 80081b2:	4611      	mov	r1, r2
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7ff fcb3 	bl	8007b20 <validate>
 80081ba:	4603      	mov	r3, r0
 80081bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80081c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d108      	bne.n	80081da <f_write+0x48>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80081ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80081d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <f_write+0x4e>
 80081da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081de:	e187      	b.n	80084f0 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <f_write+0x60>
 80081ee:	2307      	movs	r3, #7
 80081f0:	e17e      	b.n	80084f0 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	f000 816a 	beq.w	80084d0 <f_write+0x33e>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	18d1      	adds	r1, r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800820c:	4613      	mov	r3, r2
 800820e:	4299      	cmp	r1, r3
 8008210:	f080 815e 	bcs.w	80084d0 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800821a:	4613      	mov	r3, r2
 800821c:	43db      	mvns	r3, r3
 800821e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008220:	e156      	b.n	80084d0 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008228:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800822c:	2500      	movs	r5, #0
 800822e:	ea54 0305 	orrs.w	r3, r4, r5
 8008232:	f040 80fb 	bne.w	800842c <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800823c:	f04f 0200 	mov.w	r2, #0
 8008240:	f04f 0300 	mov.w	r3, #0
 8008244:	0a42      	lsrs	r2, r0, #9
 8008246:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800824a:	0a4b      	lsrs	r3, r1, #9
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	895b      	ldrh	r3, [r3, #10]
 8008250:	3b01      	subs	r3, #1
 8008252:	4013      	ands	r3, r2
 8008254:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d146      	bne.n	80082ea <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008262:	4313      	orrs	r3, r2
 8008264:	d10c      	bne.n	8008280 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800826c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826e:	2b00      	cmp	r3, #0
 8008270:	d11a      	bne.n	80082a8 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2100      	movs	r1, #0
 8008276:	4618      	mov	r0, r3
 8008278:	f7fd fb10 	bl	800589c <create_chain>
 800827c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800827e:	e013      	b.n	80082a8 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008284:	2b00      	cmp	r3, #0
 8008286:	d007      	beq.n	8008298 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f7fd fc05 	bl	8005a9e <clmt_clust>
 8008294:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008296:	e007      	b.n	80082a8 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829e:	4619      	mov	r1, r3
 80082a0:	4610      	mov	r0, r2
 80082a2:	f7fd fafb 	bl	800589c <create_chain>
 80082a6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80082a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 8115 	beq.w	80084da <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80082b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d105      	bne.n	80082c2 <f_write+0x130>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80082be:	2302      	movs	r3, #2
 80082c0:	e116      	b.n	80084f0 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80082c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c8:	d105      	bne.n	80082d6 <f_write+0x144>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80082d2:	2301      	movs	r3, #1
 80082d4:	e10c      	b.n	80084f0 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082da:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d102      	bne.n	80082ea <f_write+0x158>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082e8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80082f0:	b25b      	sxtb	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	da1b      	bge.n	800832e <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	7858      	ldrb	r0, [r3, #1]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008304:	2301      	movs	r3, #1
 8008306:	f7fc f9b9 	bl	800467c <disk_write>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <f_write+0x18a>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008318:	2301      	movs	r3, #1
 800831a:	e0e9      	b.n	80084f0 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008326:	b2da      	uxtb	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008334:	4619      	mov	r1, r3
 8008336:	4610      	mov	r0, r2
 8008338:	f7fc fe8e 	bl	8005058 <clust2sect>
 800833c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d105      	bne.n	8008350 <f_write+0x1be>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2202      	movs	r2, #2
 8008348:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800834c:	2302      	movs	r3, #2
 800834e:	e0cf      	b.n	80084f0 <f_write+0x35e>
			sect += csect;
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	4413      	add	r3, r2
 8008356:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	0a5b      	lsrs	r3, r3, #9
 800835c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d03f      	beq.n	80083e4 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	4413      	add	r3, r2
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	8952      	ldrh	r2, [r2, #10]
 800836e:	4293      	cmp	r3, r2
 8008370:	d905      	bls.n	800837e <f_write+0x1ec>
					cc = fs->csize - csect;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	895b      	ldrh	r3, [r3, #10]
 8008376:	461a      	mov	r2, r3
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	7858      	ldrb	r0, [r3, #1]
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	69f9      	ldr	r1, [r7, #28]
 8008388:	f7fc f978 	bl	800467c <disk_write>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d005      	beq.n	800839e <f_write+0x20c>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800839a:	2301      	movs	r3, #1
 800839c:	e0a8      	b.n	80084f0 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	6a3a      	ldr	r2, [r7, #32]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d917      	bls.n	80083dc <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	025b      	lsls	r3, r3, #9
 80083bc:	69fa      	ldr	r2, [r7, #28]
 80083be:	4413      	add	r3, r2
 80083c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083c4:	4619      	mov	r1, r3
 80083c6:	f7fc fb7c 	bl	8004ac2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80083dc:	6a3b      	ldr	r3, [r7, #32]
 80083de:	025b      	lsls	r3, r3, #9
 80083e0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80083e2:	e04a      	b.n	800847a <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d01b      	beq.n	8008426 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80083fa:	4290      	cmp	r0, r2
 80083fc:	eb71 0303 	sbcs.w	r3, r1, r3
 8008400:	d211      	bcs.n	8008426 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	7858      	ldrb	r0, [r3, #1]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800840c:	2301      	movs	r3, #1
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	f7fc f914 	bl	800463c <disk_read>
 8008414:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008416:	2b00      	cmp	r3, #0
 8008418:	d005      	beq.n	8008426 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008422:	2301      	movs	r3, #1
 8008424:	e064      	b.n	80084f0 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008432:	4613      	mov	r3, r2
 8008434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008438:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800843c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800843e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	429a      	cmp	r2, r3
 8008444:	d901      	bls.n	800844a <f_write+0x2b8>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008456:	4613      	mov	r3, r2
 8008458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845c:	440b      	add	r3, r1
 800845e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008460:	69f9      	ldr	r1, [r7, #28]
 8008462:	4618      	mov	r0, r3
 8008464:	f7fc fb2d 	bl	8004ac2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800846e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008472:	b2da      	uxtb	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847e:	4413      	add	r3, r2
 8008480:	61fb      	str	r3, [r7, #28]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008488:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800848a:	2000      	movs	r0, #0
 800848c:	4688      	mov	r8, r1
 800848e:	4681      	mov	r9, r0
 8008490:	eb12 0a08 	adds.w	sl, r2, r8
 8008494:	eb43 0b09 	adc.w	fp, r3, r9
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80084a4:	68f9      	ldr	r1, [r7, #12]
 80084a6:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 80084aa:	4282      	cmp	r2, r0
 80084ac:	eb73 0601 	sbcs.w	r6, r3, r1
 80084b0:	d201      	bcs.n	80084b6 <f_write+0x324>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	68f9      	ldr	r1, [r7, #12]
 80084b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c2:	441a      	add	r2, r3
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f47f aea5 	bne.w	8008222 <f_write+0x90>
 80084d8:	e000      	b.n	80084dc <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80084da:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80084e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3734      	adds	r7, #52	@ 0x34
 80084f4:	46bd      	mov	sp, r7
 80084f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b09a      	sub	sp, #104	@ 0x68
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8008508:	4611      	mov	r1, r2
 800850a:	4618      	mov	r0, r3
 800850c:	f7ff fb08 	bl	8007b20 <validate>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8008516:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800851a:	2b00      	cmp	r3, #0
 800851c:	f040 8105 	bne.w	800872a <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 80fd 	beq.w	800872a <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008536:	b25b      	sxtb	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	da17      	bge.n	800856c <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800853c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800853e:	7858      	ldrb	r0, [r3, #1]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800854a:	2301      	movs	r3, #1
 800854c:	f7fc f896 	bl	800467c <disk_write>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <f_sync+0x60>
 8008556:	2301      	movs	r3, #1
 8008558:	e0e9      	b.n	800872e <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008564:	b2da      	uxtb	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800856c:	f7fb fe00 	bl	8004170 <get_fattime>
 8008570:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8008572:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b04      	cmp	r3, #4
 8008578:	f040 808c 	bne.w	8008694 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4618      	mov	r0, r3
 8008580:	f7fd f878 	bl	8005674 <fill_first_frag>
 8008584:	4603      	mov	r3, r0
 8008586:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800858a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10a      	bne.n	80085a8 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008598:	f04f 32ff 	mov.w	r2, #4294967295
 800859c:	4619      	mov	r1, r3
 800859e:	f7fd f898 	bl	80056d2 <fill_last_frag>
 80085a2:	4603      	mov	r3, r0
 80085a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 80085a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 80bc 	bne.w	800872a <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	f107 0308 	add.w	r3, r7, #8
 80085b8:	4611      	mov	r1, r2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fd ffba 	bl	8006534 <load_obj_dir>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 80085c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f040 80ad 	bne.w	800872a <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 80085d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	3304      	adds	r3, #4
 80085d6:	781a      	ldrb	r2, [r3, #0]
 80085d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	3304      	adds	r3, #4
 80085de:	f042 0220 	orr.w	r2, r2, #32
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	79da      	ldrb	r2, [r3, #7]
 80085ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	3321      	adds	r3, #33	@ 0x21
 80085f0:	f042 0201 	orr.w	r2, r2, #1
 80085f4:	b2d2      	uxtb	r2, r2
 80085f6:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80085f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	4619      	mov	r1, r3
 8008606:	4610      	mov	r0, r2
 8008608:	f7fc f9a7 	bl	800495a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800860c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800861a:	4608      	mov	r0, r1
 800861c:	f7fc f9c9 	bl	80049b2 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8008620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800862e:	4608      	mov	r0, r1
 8008630:	f7fc f9bf 	bl	80049b2 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8008634:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	330c      	adds	r3, #12
 800863a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800863c:	4618      	mov	r0, r3
 800863e:	f7fc f98c 	bl	800495a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8008642:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	3315      	adds	r3, #21
 8008648:	2200      	movs	r2, #0
 800864a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800864c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	3310      	adds	r3, #16
 8008652:	2100      	movs	r1, #0
 8008654:	4618      	mov	r0, r3
 8008656:	f7fc f980 	bl	800495a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800865a:	f107 0308 	add.w	r3, r7, #8
 800865e:	4618      	mov	r0, r3
 8008660:	f7fd ff9e 	bl	80065a0 <store_xdir>
 8008664:	4603      	mov	r3, r0
 8008666:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800866a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800866e:	2b00      	cmp	r3, #0
 8008670:	d15b      	bne.n	800872a <f_sync+0x230>
							res = sync_fs(fs);
 8008672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008674:	4618      	mov	r0, r3
 8008676:	f7fc fc81 	bl	8004f7c <sync_fs>
 800867a:	4603      	mov	r3, r0
 800867c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800868a:	b2da      	uxtb	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8008692:	e04a      	b.n	800872a <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008694:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800869a:	4619      	mov	r1, r3
 800869c:	4610      	mov	r0, r2
 800869e:	f7fc fc3f 	bl	8004f20 <move_window>
 80086a2:	4603      	mov	r3, r0
 80086a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 80086a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d13c      	bne.n	800872a <f_sync+0x230>
					dir = fp->dir_ptr;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80086b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086b8:	330b      	adds	r3, #11
 80086ba:	781a      	ldrb	r2, [r3, #0]
 80086bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086be:	330b      	adds	r3, #11
 80086c0:	f042 0220 	orr.w	r2, r2, #32
 80086c4:	b2d2      	uxtb	r2, r2
 80086c6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6818      	ldr	r0, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	461a      	mov	r2, r3
 80086d2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80086d4:	f7fd fbfd 	bl	8005ed2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80086d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086da:	f103 001c 	add.w	r0, r3, #28
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80086e4:	4613      	mov	r3, r2
 80086e6:	4619      	mov	r1, r3
 80086e8:	f7fc f937 	bl	800495a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80086ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086ee:	3316      	adds	r3, #22
 80086f0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fc f931 	bl	800495a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80086f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086fa:	3312      	adds	r3, #18
 80086fc:	2100      	movs	r1, #0
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fc f910 	bl	8004924 <st_word>
					fs->wflag = 1;
 8008704:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008706:	2201      	movs	r2, #1
 8008708:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800870a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800870c:	4618      	mov	r0, r3
 800870e:	f7fc fc35 	bl	8004f7c <sync_fs>
 8008712:	4603      	mov	r3, r0
 8008714:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800871e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008722:	b2da      	uxtb	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800872a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800872e:	4618      	mov	r0, r3
 8008730:	3768      	adds	r7, #104	@ 0x68
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff fedb 	bl	80084fa <f_sync>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d118      	bne.n	8008780 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f107 0208 	add.w	r2, r7, #8
 8008754:	4611      	mov	r1, r2
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff f9e2 	bl	8007b20 <validate>
 800875c:	4603      	mov	r3, r0
 800875e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10c      	bne.n	8008780 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876a:	4618      	mov	r0, r3
 800876c:	f7fc fb34 	bl	8004dd8 <dec_lock>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d102      	bne.n	8008780 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008780:	7bfb      	ldrb	r3, [r7, #15]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
	...

0800878c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	4613      	mov	r3, r2
 8008798:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800879a:	2301      	movs	r3, #1
 800879c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80087a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008820 <FATFS_LinkDriverEx+0x94>)
 80087a4:	7a5b      	ldrb	r3, [r3, #9]
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d131      	bne.n	8008810 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80087ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008820 <FATFS_LinkDriverEx+0x94>)
 80087ae:	7a5b      	ldrb	r3, [r3, #9]
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	461a      	mov	r2, r3
 80087b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008820 <FATFS_LinkDriverEx+0x94>)
 80087b6:	2100      	movs	r1, #0
 80087b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80087ba:	4b19      	ldr	r3, [pc, #100]	@ (8008820 <FATFS_LinkDriverEx+0x94>)
 80087bc:	7a5b      	ldrb	r3, [r3, #9]
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	4a17      	ldr	r2, [pc, #92]	@ (8008820 <FATFS_LinkDriverEx+0x94>)
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80087ca:	4b15      	ldr	r3, [pc, #84]	@ (8008820 <FATFS_LinkDriverEx+0x94>)
 80087cc:	7a5b      	ldrb	r3, [r3, #9]
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	461a      	mov	r2, r3
 80087d2:	4b13      	ldr	r3, [pc, #76]	@ (8008820 <FATFS_LinkDriverEx+0x94>)
 80087d4:	4413      	add	r3, r2
 80087d6:	79fa      	ldrb	r2, [r7, #7]
 80087d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80087da:	4b11      	ldr	r3, [pc, #68]	@ (8008820 <FATFS_LinkDriverEx+0x94>)
 80087dc:	7a5b      	ldrb	r3, [r3, #9]
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	b2d1      	uxtb	r1, r2
 80087e4:	4a0e      	ldr	r2, [pc, #56]	@ (8008820 <FATFS_LinkDriverEx+0x94>)
 80087e6:	7251      	strb	r1, [r2, #9]
 80087e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80087ea:	7dbb      	ldrb	r3, [r7, #22]
 80087ec:	3330      	adds	r3, #48	@ 0x30
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	3301      	adds	r3, #1
 80087f8:	223a      	movs	r2, #58	@ 0x3a
 80087fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	3302      	adds	r3, #2
 8008800:	222f      	movs	r2, #47	@ 0x2f
 8008802:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	3303      	adds	r3, #3
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008810:	7dfb      	ldrb	r3, [r7, #23]
}
 8008812:	4618      	mov	r0, r3
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	20020ab0 	.word	0x20020ab0

08008824 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800882e:	2200      	movs	r2, #0
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7ff ffaa 	bl	800878c <FATFS_LinkDriverEx>
 8008838:	4603      	mov	r3, r0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
	...

08008844 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	6039      	str	r1, [r7, #0]
 800884e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008850:	88fb      	ldrh	r3, [r7, #6]
 8008852:	2b7f      	cmp	r3, #127	@ 0x7f
 8008854:	d802      	bhi.n	800885c <ff_convert+0x18>
		c = chr;
 8008856:	88fb      	ldrh	r3, [r7, #6]
 8008858:	81fb      	strh	r3, [r7, #14]
 800885a:	e025      	b.n	80088a8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008862:	88fb      	ldrh	r3, [r7, #6]
 8008864:	2bff      	cmp	r3, #255	@ 0xff
 8008866:	d805      	bhi.n	8008874 <ff_convert+0x30>
 8008868:	88fb      	ldrh	r3, [r7, #6]
 800886a:	3b80      	subs	r3, #128	@ 0x80
 800886c:	4a12      	ldr	r2, [pc, #72]	@ (80088b8 <ff_convert+0x74>)
 800886e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008872:	e000      	b.n	8008876 <ff_convert+0x32>
 8008874:	2300      	movs	r3, #0
 8008876:	81fb      	strh	r3, [r7, #14]
 8008878:	e016      	b.n	80088a8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800887a:	2300      	movs	r3, #0
 800887c:	81fb      	strh	r3, [r7, #14]
 800887e:	e009      	b.n	8008894 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008880:	89fb      	ldrh	r3, [r7, #14]
 8008882:	4a0d      	ldr	r2, [pc, #52]	@ (80088b8 <ff_convert+0x74>)
 8008884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008888:	88fa      	ldrh	r2, [r7, #6]
 800888a:	429a      	cmp	r2, r3
 800888c:	d006      	beq.n	800889c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800888e:	89fb      	ldrh	r3, [r7, #14]
 8008890:	3301      	adds	r3, #1
 8008892:	81fb      	strh	r3, [r7, #14]
 8008894:	89fb      	ldrh	r3, [r7, #14]
 8008896:	2b7f      	cmp	r3, #127	@ 0x7f
 8008898:	d9f2      	bls.n	8008880 <ff_convert+0x3c>
 800889a:	e000      	b.n	800889e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800889c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800889e:	89fb      	ldrh	r3, [r7, #14]
 80088a0:	3380      	adds	r3, #128	@ 0x80
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80088a8:	89fb      	ldrh	r3, [r7, #14]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	08008b50 	.word	0x08008b50

080088bc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	4603      	mov	r3, r0
 80088c4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088cc:	d201      	bcs.n	80088d2 <ff_wtoupper+0x16>
 80088ce:	4b3e      	ldr	r3, [pc, #248]	@ (80089c8 <ff_wtoupper+0x10c>)
 80088d0:	e000      	b.n	80088d4 <ff_wtoupper+0x18>
 80088d2:	4b3e      	ldr	r3, [pc, #248]	@ (80089cc <ff_wtoupper+0x110>)
 80088d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	1c9a      	adds	r2, r3, #2
 80088da:	617a      	str	r2, [r7, #20]
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80088e0:	8a7b      	ldrh	r3, [r7, #18]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d068      	beq.n	80089b8 <ff_wtoupper+0xfc>
 80088e6:	88fa      	ldrh	r2, [r7, #6]
 80088e8:	8a7b      	ldrh	r3, [r7, #18]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d364      	bcc.n	80089b8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	1c9a      	adds	r2, r3, #2
 80088f2:	617a      	str	r2, [r7, #20]
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	823b      	strh	r3, [r7, #16]
 80088f8:	8a3b      	ldrh	r3, [r7, #16]
 80088fa:	0a1b      	lsrs	r3, r3, #8
 80088fc:	81fb      	strh	r3, [r7, #14]
 80088fe:	8a3b      	ldrh	r3, [r7, #16]
 8008900:	b2db      	uxtb	r3, r3
 8008902:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008904:	88fa      	ldrh	r2, [r7, #6]
 8008906:	8a79      	ldrh	r1, [r7, #18]
 8008908:	8a3b      	ldrh	r3, [r7, #16]
 800890a:	440b      	add	r3, r1
 800890c:	429a      	cmp	r2, r3
 800890e:	da49      	bge.n	80089a4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008910:	89fb      	ldrh	r3, [r7, #14]
 8008912:	2b08      	cmp	r3, #8
 8008914:	d84f      	bhi.n	80089b6 <ff_wtoupper+0xfa>
 8008916:	a201      	add	r2, pc, #4	@ (adr r2, 800891c <ff_wtoupper+0x60>)
 8008918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891c:	08008941 	.word	0x08008941
 8008920:	08008953 	.word	0x08008953
 8008924:	08008969 	.word	0x08008969
 8008928:	08008971 	.word	0x08008971
 800892c:	08008979 	.word	0x08008979
 8008930:	08008981 	.word	0x08008981
 8008934:	08008989 	.word	0x08008989
 8008938:	08008991 	.word	0x08008991
 800893c:	08008999 	.word	0x08008999
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008940:	88fa      	ldrh	r2, [r7, #6]
 8008942:	8a7b      	ldrh	r3, [r7, #18]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	005b      	lsls	r3, r3, #1
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	4413      	add	r3, r2
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	80fb      	strh	r3, [r7, #6]
 8008950:	e027      	b.n	80089a2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008952:	88fa      	ldrh	r2, [r7, #6]
 8008954:	8a7b      	ldrh	r3, [r7, #18]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	b29b      	uxth	r3, r3
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	b29b      	uxth	r3, r3
 8008960:	88fa      	ldrh	r2, [r7, #6]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	80fb      	strh	r3, [r7, #6]
 8008966:	e01c      	b.n	80089a2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008968:	88fb      	ldrh	r3, [r7, #6]
 800896a:	3b10      	subs	r3, #16
 800896c:	80fb      	strh	r3, [r7, #6]
 800896e:	e018      	b.n	80089a2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008970:	88fb      	ldrh	r3, [r7, #6]
 8008972:	3b20      	subs	r3, #32
 8008974:	80fb      	strh	r3, [r7, #6]
 8008976:	e014      	b.n	80089a2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008978:	88fb      	ldrh	r3, [r7, #6]
 800897a:	3b30      	subs	r3, #48	@ 0x30
 800897c:	80fb      	strh	r3, [r7, #6]
 800897e:	e010      	b.n	80089a2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008980:	88fb      	ldrh	r3, [r7, #6]
 8008982:	3b1a      	subs	r3, #26
 8008984:	80fb      	strh	r3, [r7, #6]
 8008986:	e00c      	b.n	80089a2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008988:	88fb      	ldrh	r3, [r7, #6]
 800898a:	3308      	adds	r3, #8
 800898c:	80fb      	strh	r3, [r7, #6]
 800898e:	e008      	b.n	80089a2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008990:	88fb      	ldrh	r3, [r7, #6]
 8008992:	3b50      	subs	r3, #80	@ 0x50
 8008994:	80fb      	strh	r3, [r7, #6]
 8008996:	e004      	b.n	80089a2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008998:	88fb      	ldrh	r3, [r7, #6]
 800899a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800899e:	80fb      	strh	r3, [r7, #6]
 80089a0:	bf00      	nop
			}
			break;
 80089a2:	e008      	b.n	80089b6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80089a4:	89fb      	ldrh	r3, [r7, #14]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d195      	bne.n	80088d6 <ff_wtoupper+0x1a>
 80089aa:	8a3b      	ldrh	r3, [r7, #16]
 80089ac:	005b      	lsls	r3, r3, #1
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	4413      	add	r3, r2
 80089b2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80089b4:	e78f      	b.n	80088d6 <ff_wtoupper+0x1a>
			break;
 80089b6:	bf00      	nop
	}

	return chr;
 80089b8:	88fb      	ldrh	r3, [r7, #6]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	371c      	adds	r7, #28
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	08008c50 	.word	0x08008c50
 80089cc:	08008e44 	.word	0x08008e44

080089d0 <memset>:
 80089d0:	4402      	add	r2, r0
 80089d2:	4603      	mov	r3, r0
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d100      	bne.n	80089da <memset+0xa>
 80089d8:	4770      	bx	lr
 80089da:	f803 1b01 	strb.w	r1, [r3], #1
 80089de:	e7f9      	b.n	80089d4 <memset+0x4>

080089e0 <__libc_init_array>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	4d0d      	ldr	r5, [pc, #52]	@ (8008a18 <__libc_init_array+0x38>)
 80089e4:	4c0d      	ldr	r4, [pc, #52]	@ (8008a1c <__libc_init_array+0x3c>)
 80089e6:	1b64      	subs	r4, r4, r5
 80089e8:	10a4      	asrs	r4, r4, #2
 80089ea:	2600      	movs	r6, #0
 80089ec:	42a6      	cmp	r6, r4
 80089ee:	d109      	bne.n	8008a04 <__libc_init_array+0x24>
 80089f0:	4d0b      	ldr	r5, [pc, #44]	@ (8008a20 <__libc_init_array+0x40>)
 80089f2:	4c0c      	ldr	r4, [pc, #48]	@ (8008a24 <__libc_init_array+0x44>)
 80089f4:	f000 f818 	bl	8008a28 <_init>
 80089f8:	1b64      	subs	r4, r4, r5
 80089fa:	10a4      	asrs	r4, r4, #2
 80089fc:	2600      	movs	r6, #0
 80089fe:	42a6      	cmp	r6, r4
 8008a00:	d105      	bne.n	8008a0e <__libc_init_array+0x2e>
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a08:	4798      	blx	r3
 8008a0a:	3601      	adds	r6, #1
 8008a0c:	e7ee      	b.n	80089ec <__libc_init_array+0xc>
 8008a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a12:	4798      	blx	r3
 8008a14:	3601      	adds	r6, #1
 8008a16:	e7f2      	b.n	80089fe <__libc_init_array+0x1e>
 8008a18:	08008f08 	.word	0x08008f08
 8008a1c:	08008f08 	.word	0x08008f08
 8008a20:	08008f08 	.word	0x08008f08
 8008a24:	08008f0c 	.word	0x08008f0c

08008a28 <_init>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	bf00      	nop
 8008a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2e:	bc08      	pop	{r3}
 8008a30:	469e      	mov	lr, r3
 8008a32:	4770      	bx	lr

08008a34 <_fini>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	bf00      	nop
 8008a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3a:	bc08      	pop	{r3}
 8008a3c:	469e      	mov	lr, r3
 8008a3e:	4770      	bx	lr
